{"file_contents":{"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { Pool } from \"@neondatabase/serverless\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Trust proxy - Required for apps behind reverse proxies (like Replit deployments)\n// This ensures secure cookies work properly in production\napp.set('trust proxy', 1);\n\n// Health check endpoint - ABSOLUTE FIRST - No dependencies, no imports, no async operations\n// Dedicated /health endpoint for deployment platform health checks\napp.get('/health', (req, res) => {\n  res.status(200).send('OK');\n});\n\n// Root endpoint health check fallback for platforms that only check /\n// This is more selective and won't interfere with normal app routing\napp.use((req, res, next) => {\n  // Only respond to root path requests that look like health checks\n  if (req.method === 'GET' && req.path === '/') {\n    const accept = req.headers.accept || '';\n    const userAgent = req.headers['user-agent'] || '';\n    \n    // Deployment health checks typically have simple/no user agents and don't request HTML\n    const looksLikeHealthCheck = \n      (!userAgent || userAgent.includes('HealthCheck') || userAgent.includes('curl')) &&\n      !accept.includes('text/html');\n    \n    if (looksLikeHealthCheck) {\n      return res.status(200).send('OK');\n    }\n  }\n  \n  // All other requests proceed to the app\n  next();\n});\n\n// Security check: Ensure SESSION_SECRET is set (after health check)\nif (!process.env.SESSION_SECRET) {\n  console.error(\"FATAL: SESSION_SECRET environment variable is not set!\");\n  console.error(\"Server will not start without a secure session secret.\");\n  process.exit(1);\n}\n\n// Import routes and auth AFTER health check is established\n// This prevents any database initialization from blocking the health check\nimport { registerRoutes } from \"./routes\";\nimport { attachUser } from \"./auth\";\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\n// Session typing\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\n// Session store configuration\nconst PgSession = connectPgSimple(session);\nconst sessionStore = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL\n  ? new PgSession({\n      pool: new Pool({ connectionString: process.env.DATABASE_URL }),\n      tableName: 'session',\n      createTableIfMissing: true,\n    })\n  : undefined; // Use default MemoryStore in development\n\n// Session middleware\napp.use(session({\n  store: sessionStore,\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'lax',\n    maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n  }\n}));\n\n// Attach user to request if session exists\napp.use(attachUser);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Create HTTP server and start listening IMMEDIATELY for instant health checks\nimport { createServer } from \"http\";\nconst server = createServer(app);\nconst port = parseInt(process.env.PORT || '5000', 10);\n\n// Start listening immediately - health check endpoints work right away\nserver.listen(port, \"0.0.0.0\", () => {\n  log(`serving on port ${port}`);\n  log(`Health check endpoints ready at /health and /`);\n  \n  // Register routes in background - health checks don't need to wait for this\n  registerRoutes(app, server).then(() => {\n    // Error handler middleware\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n      throw err;\n    });\n\n    // Setup vite in development, serve static in production\n    const setupPromise = app.get(\"env\") === \"development\"\n      ? setupVite(app, server)\n      : Promise.resolve(serveStatic(app));\n\n    return setupPromise;\n  }).then(() => {\n    log(`Application fully initialized and ready`);\n  }).catch((error) => {\n    console.error('Failed to initialize application:', error);\n  });\n});\n\n// Handle server errors without exiting\nserver.on('error', (error) => {\n  console.error('Server error:', error);\n});\n","size_bytes":5167},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Analytics.tsx":{"content":"import { Division, Item, ProjectSummary, Priority } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\nimport { TrendingUp, Package, Layers, DollarSign } from \"lucide-react\";\n\ninterface AnalyticsProps {\n  summary: ProjectSummary | undefined;\n  divisions: Division[];\n  items: Item[];\n}\n\nconst priorityColors = {\n  High: \"hsl(var(--destructive))\",\n  Mid: \"hsl(var(--chart-4))\",\n  Low: \"hsl(var(--chart-5))\",\n};\n\nconst chartColors = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n];\n\nexport function Analytics({ summary, divisions, items }: AnalyticsProps) {\n  if (!summary) {\n    return (\n      <div className=\"w-96 border-l border-border bg-card/30 backdrop-blur-sm p-6\">\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-12 h-12 mx-auto text-muted-foreground mb-3 opacity-50\" />\n            <p className=\"text-sm text-muted-foreground\">Loading analytics...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const priorityChartData = summary.priorityBreakdown.map((item) => ({\n    name: item.priority,\n    value: item.cost,\n    itemCount: item.itemCount,\n  }));\n\n  const divisionChartData = summary.divisionBreakdown.slice(0, 5).map((item, idx) => ({\n    name: item.divisionName.length > 15 \n      ? item.divisionName.substring(0, 15) + '...' \n      : item.divisionName,\n    value: item.totalCost,\n    fill: chartColors[idx % chartColors.length],\n  }));\n\n  return (\n    <div className=\"w-96 border-l border-border bg-card/30 backdrop-blur-sm flex flex-col overflow-hidden\">\n      <div className=\"p-6 border-b border-border\">\n        <h2 className=\"text-sm font-display font-semibold text-foreground uppercase tracking-wider\">\n          Analytics Dashboard\n        </h2>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Card className=\"p-4 border-primary/30 bg-gradient-to-br from-primary/10 to-transparent\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n                <DollarSign className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1\">\n                  Total Cost\n                </p>\n                <p className=\"text-lg font-mono font-bold text-primary truncate\" data-testid=\"text-total-cost\">\n                  {summary.totalCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">PKR</p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-4 border-chart-4/30 bg-gradient-to-br from-chart-4/10 to-transparent\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-chart-4/20 border border-chart-4/50 flex items-center justify-center\">\n                <Package className=\"w-5 h-5 text-chart-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1\">\n                  Total Items\n                </p>\n                <p className=\"text-lg font-mono font-bold text-foreground\" data-testid=\"text-total-items\">\n                  {summary.totalItems}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-4 border-chart-2/30 bg-gradient-to-br from-chart-2/10 to-transparent\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-chart-2/20 border border-chart-2/50 flex items-center justify-center\">\n                <Layers className=\"w-5 h-5 text-chart-2\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1\">\n                  Divisions\n                </p>\n                <p className=\"text-lg font-mono font-bold text-foreground\" data-testid=\"text-total-divisions\">\n                  {summary.totalDivisions}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-4 border-destructive/30 bg-gradient-to-br from-destructive/10 to-transparent\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-destructive/20 border border-destructive/50 flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-destructive\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1\">\n                  High Priority\n                </p>\n                <p className=\"text-sm font-mono font-bold text-destructive truncate\" data-testid=\"text-high-priority-cost\">\n                  {summary.highPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">PKR</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Priority Breakdown Chart */}\n        <Card className=\"p-4 border-border\" data-testid=\"card-priority-chart\">\n          <h3 className=\"text-xs font-display font-semibold uppercase tracking-wider text-muted-foreground mb-4\">\n            Budget by Priority\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={priorityChartData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={90}\n                  paddingAngle={2}\n                  dataKey=\"value\"\n                >\n                  {priorityChartData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`} \n                      fill={priorityColors[entry.name as Priority]}\n                      stroke=\"hsl(var(--background))\"\n                      strokeWidth={2}\n                    />\n                  ))}\n                </Pie>\n                <Tooltip\n                  content={({ active, payload }) => {\n                    if (active && payload && payload.length) {\n                      const data = payload[0].payload;\n                      return (\n                        <Card className=\"p-3 border-primary/30 bg-card/95 backdrop-blur-sm\">\n                          <p className=\"text-xs font-display font-semibold uppercase tracking-wider mb-1\">\n                            {data.name} Priority\n                          </p>\n                          <p className=\"text-sm font-mono font-bold text-primary\">\n                            {data.value.toLocaleString('en-PK')} PKR\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {data.itemCount} items\n                          </p>\n                        </Card>\n                      );\n                    }\n                    return null;\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"mt-4 space-y-2\">\n            {summary.priorityBreakdown.map((item) => (\n              <div key={item.priority} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-sm\"\n                    style={{ backgroundColor: priorityColors[item.priority] }}\n                  />\n                  <span className=\"text-sm text-foreground\">{item.priority}</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-mono font-semibold text-foreground\">\n                    {item.cost.toLocaleString('en-PK', { maximumFractionDigits: 0 })} PKR\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">{item.itemCount} items</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Division Breakdown Chart */}\n        {divisionChartData.length > 0 && (\n          <Card className=\"p-4 border-border\" data-testid=\"card-division-chart\">\n            <h3 className=\"text-xs font-display font-semibold uppercase tracking-wider text-muted-foreground mb-4\">\n              Top Divisions by Cost\n            </h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={divisionChartData}>\n                  <XAxis\n                    dataKey=\"name\"\n                    tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 11 }}\n                    stroke=\"hsl(var(--border))\"\n                  />\n                  <YAxis\n                    tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 11 }}\n                    stroke=\"hsl(var(--border))\"\n                    tickFormatter={(value) => `${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip\n                    content={({ active, payload }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0];\n                        return (\n                          <Card className=\"p-3 border-primary/30 bg-card/95 backdrop-blur-sm\">\n                            <p className=\"text-xs font-display font-semibold uppercase tracking-wider mb-1\">\n                              {data.payload.name}\n                            </p>\n                            <p className=\"text-sm font-mono font-bold text-primary\">\n                              {Number(data.value).toLocaleString('en-PK')} PKR\n                            </p>\n                          </Card>\n                        );\n                      }\n                      return null;\n                    }}\n                  />\n                  <Bar dataKey=\"value\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        )}\n\n        {/* Priority Funds Summary */}\n        <Card className=\"p-4 border-border\">\n          <h3 className=\"text-xs font-display font-semibold uppercase tracking-wider text-muted-foreground mb-4\">\n            Priority-Based Funds Required\n          </h3>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 rounded-md bg-destructive/10 border border-destructive/30\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-display font-medium text-destructive\">\n                  High Priority Items\n                </span>\n                <span className=\"text-lg font-mono font-bold text-destructive\" data-testid=\"text-high-funds\">\n                  {summary.highPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })} PKR\n                </span>\n              </div>\n            </div>\n\n            <div className=\"p-3 rounded-md bg-chart-4/10 border border-chart-4/30\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-display font-medium text-chart-4\">\n                  Mid Priority Items\n                </span>\n                <span className=\"text-lg font-mono font-bold text-chart-4\" data-testid=\"text-mid-funds\">\n                  {summary.midPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })} PKR\n                </span>\n              </div>\n            </div>\n\n            <div className=\"p-3 rounded-md bg-chart-5/10 border border-chart-5/30\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-display font-medium text-chart-5\">\n                  Low Priority Items\n                </span>\n                <span className=\"text-lg font-mono font-bold text-chart-5\" data-testid=\"text-low-funds\">\n                  {summary.lowPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })} PKR\n                </span>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12691},"client/src/components/ItemManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Division, Item, InsertItem, Priority, Unit, ItemStatus, priorityLevels, unitTypes, itemStatuses } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, Edit2, Trash2, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface ItemManagementProps {\n  division: Division | undefined;\n  items: Item[];\n  isLoading: boolean;\n}\n\ninterface ItemFormData {\n  description: string;\n  unit: Unit;\n  quantity: string;\n  rate: string;\n  priority: Priority;\n  status: ItemStatus;\n}\n\nconst initialFormData: ItemFormData = {\n  description: \"\",\n  unit: \"number\",\n  quantity: \"\",\n  rate: \"\",\n  priority: \"Mid\",\n  status: \"Not Started\",\n};\n\nconst priorityColors: Record<Priority, string> = {\n  High: \"bg-destructive/20 text-destructive border-destructive/50\",\n  Mid: \"bg-chart-4/20 text-chart-4 border-chart-4/50\",\n  Low: \"bg-chart-5/20 text-chart-5 border-chart-5/50\",\n};\n\nconst statusColors: Record<ItemStatus, string> = {\n  \"Not Started\": \"bg-muted text-muted-foreground border-muted-foreground/50\",\n  \"Purchased\": \"bg-chart-4/20 text-chart-4 border-chart-4/50\",\n  \"In Installation Phase\": \"bg-accent/20 text-accent-foreground border-accent/50\",\n  \"Installed\": \"bg-chart-5/20 text-chart-5 border-chart-5/50\",\n  \"Delivered\": \"bg-primary/20 text-primary border-primary/50\",\n};\n\nexport function ItemManagement({ division, items, isLoading }: ItemManagementProps) {\n  const [isAdding, setIsAdding] = useState(false);\n  const [formData, setFormData] = useState<ItemFormData>(initialFormData);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const [selectedPriority, setSelectedPriority] = useState<Priority | \"All\">(\"All\");\n  const { toast } = useToast();\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertItem) => {\n      return await apiRequest(\"POST\", \"/api/items\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/items')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setIsAdding(false);\n      setFormData(initialFormData);\n      toast({\n        title: \"Item added\",\n        description: \"New item has been added successfully.\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<Item> & { id: string }) => {\n      return await apiRequest(\"PATCH\", `/api/items/${data.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/items')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setEditingId(null);\n      toast({\n        title: \"Item updated\",\n        description: \"Item has been updated successfully.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/items/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/items')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setDeletingId(null);\n      toast({\n        title: \"Item deleted\",\n        description: \"Item has been removed successfully.\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (!division) return;\n    \n    const quantity = parseFloat(formData.quantity);\n    const rate = parseFloat(formData.rate);\n\n    if (!formData.description.trim() || isNaN(quantity) || isNaN(rate)) {\n      toast({\n        title: \"Invalid input\",\n        description: \"Please fill all fields correctly.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMutation.mutate({\n      divisionId: division.id,\n      description: formData.description.trim(),\n      unit: formData.unit,\n      quantity,\n      rate,\n      priority: formData.priority,\n      status: formData.status,\n    });\n  };\n\n  const filteredItems = selectedPriority === \"All\" \n    ? items \n    : items.filter(item => item.priority === selectedPriority);\n\n  const divisionTotal = items.reduce((sum, item) => sum + Number(item.quantity) * Number(item.rate), 0);\n\n  if (!division) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Package className=\"w-16 h-16 mx-auto text-muted-foreground mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-display font-semibold text-foreground mb-2\">\n            No Division Selected\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Select a division from the sidebar to manage its items\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Division Header */}\n      <div className=\"border-b border-border bg-card/30 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-display font-bold text-foreground mb-1\">\n              {division.name}\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {items.length} items · Total: <span className=\"font-mono font-semibold text-primary\">\n                {divisionTotal.toLocaleString('en-PK')} PKR\n              </span>\n            </p>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            {/* Priority Filter */}\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant={selectedPriority === \"All\" ? \"default\" : \"outline\"}\n                onClick={() => setSelectedPriority(\"All\")}\n                className=\"h-8\"\n                data-testid=\"filter-all\"\n              >\n                All\n              </Button>\n              {priorityLevels.map((priority) => (\n                <Button\n                  key={priority}\n                  size=\"sm\"\n                  variant={selectedPriority === priority ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedPriority(priority)}\n                  className={`h-8 ${selectedPriority === priority ? priorityColors[priority] : \"\"}`}\n                  data-testid={`filter-${priority.toLowerCase()}`}\n                >\n                  {priority}\n                </Button>\n              ))}\n            </div>\n\n            <Button\n              onClick={() => setIsAdding(!isAdding)}\n              data-testid=\"button-add-item\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Item\n            </Button>\n          </div>\n        </div>\n\n        {/* Add Item Form */}\n        {isAdding && (\n          <Card className=\"mt-4 p-4 border-primary/30 bg-card/50\">\n            <div className=\"grid grid-cols-5 gap-3\">\n              <div className=\"col-span-2\">\n                <label className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1 block\">\n                  Description\n                </label>\n                <Input\n                  placeholder=\"Item description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  data-testid=\"input-item-description\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1 block\">\n                  Unit\n                </label>\n                <Select\n                  value={formData.unit}\n                  onValueChange={(value: Unit) => setFormData({ ...formData, unit: value })}\n                >\n                  <SelectTrigger data-testid=\"select-unit\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {unitTypes.map((unit) => (\n                      <SelectItem key={unit} value={unit}>\n                        {unit}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1 block\">\n                  Quantity\n                </label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"0\"\n                  value={formData.quantity}\n                  onChange={(e) => setFormData({ ...formData, quantity: e.target.value })}\n                  data-testid=\"input-item-quantity\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1 block\">\n                  Rate (PKR)\n                </label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"0\"\n                  value={formData.rate}\n                  onChange={(e) => setFormData({ ...formData, rate: e.target.value })}\n                  data-testid=\"input-item-rate\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 mt-3\">\n              <div className=\"flex gap-2\">\n                <span className=\"text-xs text-muted-foreground uppercase tracking-wider self-center\">Priority:</span>\n                {priorityLevels.map((priority) => (\n                  <Button\n                    key={priority}\n                    size=\"sm\"\n                    variant={formData.priority === priority ? \"default\" : \"outline\"}\n                    onClick={() => setFormData({ ...formData, priority })}\n                    className={`h-7 ${formData.priority === priority ? priorityColors[priority] : \"\"}`}\n                    data-testid={`priority-${priority.toLowerCase()}`}\n                  >\n                    {priority}\n                  </Button>\n                ))}\n              </div>\n\n              <div>\n                <label className=\"text-xs text-muted-foreground uppercase tracking-wider mb-1 block\">\n                  Status\n                </label>\n                <Select\n                  value={formData.status}\n                  onValueChange={(value: ItemStatus) => setFormData({ ...formData, status: value })}\n                >\n                  <SelectTrigger data-testid=\"select-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {itemStatuses.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-end gap-2 mt-3\">\n              {formData.quantity && formData.rate && (\n                <div className=\"text-sm font-mono font-semibold text-primary\">\n                  Total: {(parseFloat(formData.quantity) * parseFloat(formData.rate)).toLocaleString('en-PK')} PKR\n                </div>\n              )}\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsAdding(false);\n                  setFormData(initialFormData);\n                }}\n                data-testid=\"button-cancel-add\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreate}\n                disabled={createMutation.isPending}\n                data-testid=\"button-save-item\"\n              >\n                Save Item\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Items Table */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-16 rounded-md bg-muted/20 animate-pulse\" />\n            ))}\n          </div>\n        ) : filteredItems.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Package className=\"w-12 h-12 mx-auto text-muted-foreground mb-3 opacity-50\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {items.length === 0 ? \"No items in this division\" : \"No items match the selected priority filter\"}\n            </p>\n          </div>\n        ) : (\n          <Card className=\"border-border\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-border hover:bg-transparent\">\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                    Description\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                    Unit\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                    Quantity\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                    Rate (PKR)\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                    Total (PKR)\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                    Priority\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                    Status\n                  </TableHead>\n                  <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                    Actions\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredItems.map((item) => (\n                  <TableRow\n                    key={item.id}\n                    className=\"border-border hover-elevate\"\n                    data-testid={`row-item-${item.id}`}\n                  >\n                    <TableCell className=\"font-medium\">{item.description}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">{item.unit}</TableCell>\n                    <TableCell className=\"text-right font-mono\">{item.quantity}</TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      {Number(item.rate).toLocaleString('en-PK')}\n                    </TableCell>\n                    <TableCell className=\"text-right font-mono font-semibold text-primary\">\n                      {(Number(item.quantity) * Number(item.rate)).toLocaleString('en-PK')}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={priorityColors[item.priority as Priority]} data-testid={`badge-priority-${item.id}`}>\n                        {item.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Select\n                        value={item.status}\n                        onValueChange={(value: ItemStatus) => {\n                          updateMutation.mutate({ id: item.id, status: value });\n                        }}\n                      >\n                        <SelectTrigger className=\"h-8 w-40\" data-testid={`select-status-${item.id}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {itemStatuses.map((status) => (\n                            <SelectItem key={status} value={status}>\n                              <Badge className={statusColors[status]}>\n                                {status}\n                              </Badge>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-1\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8\"\n                          data-testid={`button-edit-item-${item.id}`}\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 text-destructive\"\n                          onClick={() => setDeletingId(item.id)}\n                          data-testid={`button-delete-item-${item.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Card>\n        )}\n      </div>\n\n      <AlertDialog open={!!deletingId} onOpenChange={() => setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Item?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete this item. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingId && deleteMutation.mutate(deletingId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":19156},"shared/schema.ts":{"content":"import { pgTable, text, varchar, integer, numeric, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { sql } from \"drizzle-orm\";\n\nexport const priorityLevels = [\"High\", \"Mid\", \"Low\"] as const;\nexport const priorityEnum = z.enum(priorityLevels);\nexport type Priority = z.infer<typeof priorityEnum>;\n\nexport const itemStatuses = [\"Not Started\", \"Purchased\", \"In Installation Phase\", \"Installed\", \"Delivered\"] as const;\nexport const itemStatusEnum = z.enum(itemStatuses);\nexport type ItemStatus = z.infer<typeof itemStatusEnum>;\n\nexport const userRoles = [\"principle\", \"employee\", \"client\", \"procurement\"] as const;\nexport const userRoleEnum = z.enum(userRoles);\nexport type UserRole = z.infer<typeof userRoleEnum>;\n\nexport const taskTypes = [\"Design CAD\", \"IFCs\", \"3D Rendering\", \"Procurement\", \"Site Visits\"] as const;\nexport const taskTypeEnum = z.enum(taskTypes);\nexport type TaskType = z.infer<typeof taskTypeEnum>;\n\nexport const taskStatuses = [\"Done\", \"Undone\", \"In Progress\"] as const;\nexport const taskStatusEnum = z.enum(taskStatuses);\nexport type TaskStatus = z.infer<typeof taskStatusEnum>;\n\nexport const laborTypes = [\"Daily Wage\", \"Contract\"] as const;\nexport const laborTypeEnum = z.enum(laborTypes);\nexport type LaborType = z.infer<typeof laborTypeEnum>;\n\nexport const documentTypes = [\"Appointment Letter\", \"Joining Letter\", \"Resignation Letter\"] as const;\nexport const documentTypeEnum = z.enum(documentTypes);\nexport type DocumentType = z.infer<typeof documentTypeEnum>;\n\nexport const unitTypes = [\n  \"number\",\n  \"rft\",\n  \"sft\",\n  \"meter\",\n  \"meter square\",\n  \"gallons\",\n  \"drums\",\n  \"coils\",\n  \"length\",\n] as const;\nexport const unitEnum = z.enum(unitTypes);\nexport type Unit = z.infer<typeof unitEnum>;\n\n// Database Tables\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  clientName: text(\"client_name\"),\n  projectTitle: text(\"project_title\"),\n  startDate: timestamp(\"start_date\"),\n  deliveryDate: timestamp(\"delivery_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const divisions = pgTable(\"divisions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const items = pgTable(\"items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  divisionId: varchar(\"division_id\").notNull().references(() => divisions.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  unit: text(\"unit\").notNull(),\n  quantity: numeric(\"quantity\", { precision: 18, scale: 2 }).notNull(),\n  rate: numeric(\"rate\", { precision: 18, scale: 2 }).notNull(),\n  priority: text(\"priority\").notNull(),\n  status: text(\"status\").notNull().default(\"Not Started\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Multi-Role Management System Tables\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // principle, employee, client, procurement\n  fullName: text(\"full_name\").notNull(),\n  isActive: integer(\"is_active\").notNull().default(1), // 1 = active, 0 = inactive\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }).unique(),\n  idCard: text(\"id_card\"),\n  whatsapp: text(\"whatsapp\"),\n  homeAddress: text(\"home_address\"),\n  joiningDate: timestamp(\"joining_date\"),\n  profilePicture: text(\"profile_picture\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }).unique(),\n  company: text(\"company\"),\n  contactNumber: text(\"contact_number\"),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const projectAssignments = pgTable(\"project_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  assignedBy: varchar(\"assigned_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  taskType: text(\"task_type\").notNull(), // Design CAD, IFCs, 3D Rendering, Procurement, Site Visits\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"Undone\"), // Done, Undone, In Progress\n  remarks: text(\"remarks\"), // Comments/remarks on task progress\n  dueDate: timestamp(\"due_date\"),\n  assignedBy: varchar(\"assigned_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const procurementItems = pgTable(\"procurement_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  itemName: text(\"item_name\").notNull(),\n  projectCost: numeric(\"project_cost\", { precision: 18, scale: 2 }).notNull(), // Cost visible to client\n  executionCost: numeric(\"execution_cost\", { precision: 18, scale: 2 }), // Actual cost, visible only to principle\n  isPurchased: integer(\"is_purchased\").notNull().default(0), // 0 = not purchased, 1 = purchased\n  billNumber: text(\"bill_number\"),\n  rentalDetails: text(\"rental_details\"), // RFT, SFT, etc.\n  quantity: numeric(\"quantity\", { precision: 18, scale: 2 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  notes: text(\"notes\"),\n  purchasedBy: varchar(\"purchased_by\").references(() => users.id),\n  purchasedDate: timestamp(\"purchased_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const laborCosts = pgTable(\"labor_costs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  laborType: text(\"labor_type\").notNull(), // Daily Wage or Contract\n  wageRate: numeric(\"wage_rate\", { precision: 18, scale: 2 }), // For daily wage\n  numberOfWorkers: integer(\"number_of_workers\"), // For daily wage\n  contractAmount: numeric(\"contract_amount\", { precision: 18, scale: 2 }), // For contract\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  attendanceDate: timestamp(\"attendance_date\").notNull(),\n  isPresent: integer(\"is_present\").notNull().default(1), // 1 = present, 0 = absent\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const employeeDocuments = pgTable(\"employee_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  documentType: text(\"document_type\").notNull(), // Appointment Letter, Joining Letter, Resignation Letter\n  template: text(\"template\").notNull(),\n  generatedDocument: text(\"generated_document\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const salaries = pgTable(\"salaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  month: text(\"month\").notNull(), // Format: YYYY-MM\n  basicSalary: numeric(\"basic_salary\", { precision: 18, scale: 2 }).notNull(),\n  incentives: numeric(\"incentives\", { precision: 18, scale: 2 }).notNull().default('0'),\n  medical: numeric(\"medical\", { precision: 18, scale: 2 }).notNull().default('0'),\n  tax: numeric(\"tax\", { precision: 18, scale: 2 }).notNull().default('0'),\n  deductions: numeric(\"deductions\", { precision: 18, scale: 2 }).notNull().default('0'),\n  netSalary: numeric(\"net_salary\", { precision: 18, scale: 2 }).notNull(),\n  isPaid: integer(\"is_paid\").notNull().default(0), // 0 = not paid, 1 = paid\n  paidDate: timestamp(\"paid_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  comment: text(\"comment\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const projectFinancials = pgTable(\"project_financials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }).unique(),\n  contractValue: numeric(\"contract_value\", { precision: 18, scale: 2 }).notNull(),\n  amountReceived: numeric(\"amount_received\", { precision: 18, scale: 2 }).notNull().default('0'),\n  workCompleted: numeric(\"work_completed\", { precision: 18, scale: 2 }).notNull().default('0'), // Percentage 0-100\n  isArchived: integer(\"is_archived\").notNull().default(0), // 0 = active, 1 = archived/completed\n  archivedDate: timestamp(\"archived_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Zod Schemas\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  name: z.string().min(1, \"Project name is required\"),\n  clientName: z.string().optional(),\n  projectTitle: z.string().optional(),\n  startDate: z.union([z.string(), z.date()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ).optional(),\n  deliveryDate: z.union([z.string(), z.date()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ).optional(),\n});\n\nexport const insertDivisionSchema = createInsertSchema(divisions).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  projectId: z.string(),\n  name: z.string().min(1, \"Division name is required\"),\n  order: z.number(),\n});\n\nexport const insertItemSchema = createInsertSchema(items).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  divisionId: z.string(),\n  description: z.string().min(1, \"Description is required\"),\n  unit: unitEnum,\n  quantity: z.number().min(0, \"Quantity must be positive\"),\n  rate: z.number().min(0, \"Rate must be positive\"),\n  priority: priorityEnum,\n  status: itemStatusEnum.optional(),\n});\n\nexport const updateProjectSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1).optional(),\n  clientName: z.string().optional(),\n  projectTitle: z.string().optional(),\n  startDate: z.union([z.string(), z.date()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ).optional(),\n  deliveryDate: z.union([z.string(), z.date()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ).optional(),\n});\n\nexport const updateDivisionSchema = z.object({\n  id: z.string(),\n  projectId: z.string().optional(),\n  name: z.string().min(1).optional(),\n  order: z.number().optional(),\n});\n\nexport const updateItemSchema = z.object({\n  id: z.string(),\n  divisionId: z.string().optional(),\n  description: z.string().min(1).optional(),\n  unit: unitEnum.optional(),\n  quantity: z.number().min(0).optional(),\n  rate: z.number().min(0).optional(),\n  priority: priorityEnum.optional(),\n  status: itemStatusEnum.optional(),\n});\n\n// Multi-Role Management Schemas\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  role: userRoleEnum,\n  fullName: z.string().min(1, \"Full name is required\"),\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  userId: z.string(),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  userId: z.string(),\n});\n\nexport const insertProjectAssignmentSchema = createInsertSchema(projectAssignments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  projectId: z.string(),\n  userId: z.string(),\n  assignedBy: z.string(),\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  projectId: z.string(),\n  employeeId: z.string(),\n  taskType: taskTypeEnum,\n  status: taskStatusEnum.optional(),\n  assignedBy: z.string(),\n});\n\nexport const insertProcurementItemSchema = createInsertSchema(procurementItems).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  projectId: z.string(),\n  itemName: z.string().min(1, \"Item name is required\"),\n  projectCost: z.number().min(0, \"Project cost must be positive\"),\n  executionCost: z.number().min(0, \"Execution cost must be positive\").optional(),\n  quantity: z.number().min(0, \"Quantity must be positive\"),\n  unit: z.string().min(1, \"Unit is required\"),\n});\n\nexport const insertLaborCostSchema = createInsertSchema(laborCosts).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  projectId: z.string(),\n  laborType: laborTypeEnum,\n  wageRate: z.number().min(0).optional(),\n  numberOfWorkers: z.number().int().min(0).optional(),\n  contractAmount: z.number().min(0).optional(),\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  employeeId: z.string(),\n  attendanceDate: z.union([z.string(), z.date()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n});\n\nexport const insertEmployeeDocumentSchema = createInsertSchema(employeeDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  employeeId: z.string(),\n  documentType: documentTypeEnum,\n  template: z.string().min(1, \"Template is required\"),\n});\n\nexport const insertSalarySchema = createInsertSchema(salaries).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  employeeId: z.string(),\n  month: z.string().regex(/^\\d{4}-\\d{2}$/, \"Month must be in YYYY-MM format\"),\n  basicSalary: z.number().min(0, \"Basic salary must be positive\"),\n  incentives: z.number().min(0).optional(),\n  medical: z.number().min(0).optional(),\n  tax: z.number().min(0).optional(),\n  deductions: z.number().min(0).optional(),\n  netSalary: z.number().min(0, \"Net salary must be positive\"),\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  projectId: z.string(),\n  userId: z.string(),\n  comment: z.string().min(1, \"Comment cannot be empty\"),\n});\n\nexport const insertProjectFinancialsSchema = createInsertSchema(projectFinancials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  projectId: z.string(),\n  contractValue: z.number().min(0, \"Contract value must be positive\"),\n  amountReceived: z.number().min(0).optional(),\n  workCompleted: z.number().min(0).max(100).optional(),\n});\n\n// Types\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type UpdateProject = z.infer<typeof updateProjectSchema>;\n\nexport type Division = typeof divisions.$inferSelect;\nexport type InsertDivision = z.infer<typeof insertDivisionSchema>;\nexport type UpdateDivision = z.infer<typeof updateDivisionSchema>;\n\nexport type Item = typeof items.$inferSelect;\nexport type InsertItem = z.infer<typeof insertItemSchema>;\nexport type UpdateItem = z.infer<typeof updateItemSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type ProjectAssignment = typeof projectAssignments.$inferSelect;\nexport type InsertProjectAssignment = z.infer<typeof insertProjectAssignmentSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type ProcurementItem = typeof procurementItems.$inferSelect;\nexport type InsertProcurementItem = z.infer<typeof insertProcurementItemSchema>;\n\nexport type LaborCost = typeof laborCosts.$inferSelect;\nexport type InsertLaborCost = z.infer<typeof insertLaborCostSchema>;\n\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\n\nexport type EmployeeDocument = typeof employeeDocuments.$inferSelect;\nexport type InsertEmployeeDocument = z.infer<typeof insertEmployeeDocumentSchema>;\n\nexport type Salary = typeof salaries.$inferSelect;\nexport type InsertSalary = z.infer<typeof insertSalarySchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type ProjectFinancials = typeof projectFinancials.$inferSelect;\nexport type InsertProjectFinancials = z.infer<typeof insertProjectFinancialsSchema>;\n\nexport interface DivisionWithItems extends Division {\n  items: Item[];\n}\n\nexport interface ProjectSummary {\n  totalCost: number;\n  highPriorityCost: number;\n  midPriorityCost: number;\n  lowPriorityCost: number;\n  totalItems: number;\n  totalDivisions: number;\n  overallProgress: number;\n  divisionBreakdown: {\n    divisionId: string;\n    divisionName: string;\n    totalCost: number;\n    itemCount: number;\n  }[];\n  priorityBreakdown: {\n    priority: Priority;\n    cost: number;\n    itemCount: number;\n  }[];\n  statusBreakdown: {\n    status: ItemStatus;\n    itemCount: number;\n    cost: number;\n  }[];\n}\n","size_bytes":18981},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1388},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set. Did you forget to provision a database?\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":467},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PrincipleDashboard from \"@/pages/principle-dashboard\";\nimport EmployeeDashboard from \"@/pages/employee-dashboard\";\nimport ClientDashboard from \"@/pages/client-dashboard\";\nimport ProcurementDashboard from \"@/pages/procurement-dashboard\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/lib/auth\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary border-r-transparent\" data-testid=\"loader-auth\"></div>\n          <p className=\"mt-4 text-muted-foreground\" data-testid=\"text-loading\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <Component />;\n}\n\nfunction RoleDashboard() {\n  const { user } = useAuth();\n  \n  // Show principle dashboard for principle users\n  if (user?.role === \"principle\") {\n    return <PrincipleDashboard />;\n  }\n  \n  // Show employee dashboard for employee users\n  if (user?.role === \"employee\") {\n    return <EmployeeDashboard />;\n  }\n  \n  // Show client dashboard for client users\n  if (user?.role === \"client\") {\n    return <ClientDashboard />;\n  }\n  \n  // Show procurement dashboard for procurement users\n  if (user?.role === \"procurement\") {\n    return <ProcurementDashboard />;\n  }\n  \n  // Show regular dashboard for other users\n  return <Dashboard />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/budget\">\n        {() => <ProtectedRoute component={Dashboard} />}\n      </Route>\n      <Route path=\"/\">\n        {() => <ProtectedRoute component={RoleDashboard} />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    document.documentElement.classList.add(\"dark\");\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2682},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ProjectSelector.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Project } from \"@shared/schema\";\nimport { Plus, Edit2, Trash2, FolderOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProjectSelectorProps {\n  onSelectProject: (projectId: string) => void;\n}\n\nexport function ProjectSelector({ onSelectProject }: ProjectSelectorProps) {\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [newProjectName, setNewProjectName] = useState(\"\");\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [deletingProject, setDeletingProject] = useState<Project | null>(null);\n  const { toast } = useToast();\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (name: string) => {\n      return await apiRequest(\"POST\", \"/api/projects\", { name });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setCreateDialogOpen(false);\n      setNewProjectName(\"\");\n      toast({\n        title: \"Project Created\",\n        description: \"Your new project has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, name }: { id: string; name: string }) => {\n      return await apiRequest(\"PATCH\", `/api/projects/${id}`, { name });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setEditDialogOpen(false);\n      setEditingProject(null);\n      toast({\n        title: \"Project Renamed\",\n        description: \"Project name has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to rename project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/projects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setDeleteDialogOpen(false);\n      setDeletingProject(null);\n      toast({\n        title: \"Project Deleted\",\n        description: \"The project and all its data have been deleted.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (newProjectName.trim()) {\n      createMutation.mutate(newProjectName.trim());\n    }\n  };\n\n  const handleEdit = () => {\n    if (editingProject && editingProject.name.trim()) {\n      updateMutation.mutate({\n        id: editingProject.id,\n        name: editingProject.name.trim(),\n      });\n    }\n  };\n\n  const handleDelete = () => {\n    if (deletingProject) {\n      deleteMutation.mutate(deletingProject.id);\n    }\n  };\n\n  const openEditDialog = (project: Project) => {\n    setEditingProject({ ...project });\n    setEditDialogOpen(true);\n  };\n\n  const openDeleteDialog = (project: Project) => {\n    setDeletingProject(project);\n    setDeleteDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-xl text-muted-foreground\">Loading projects...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-8 overflow-auto\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold font-['Orbitron'] text-primary mb-2\">\n              ARKA PROJECTS\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Select a project to view or create a new one\n            </p>\n          </div>\n\n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"lg\" data-testid=\"button-create-project\">\n                <Plus className=\"mr-2 h-5 w-5\" />\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Project</DialogTitle>\n                <DialogDescription>\n                  Give your project a name to get started\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"py-4\">\n                <Input\n                  placeholder=\"e.g., Residential Building A\"\n                  value={newProjectName}\n                  onChange={(e) => setNewProjectName(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") handleCreate();\n                  }}\n                  data-testid=\"input-project-name\"\n                  autoFocus\n                />\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-create\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreate}\n                  disabled={!newProjectName.trim() || createMutation.isPending}\n                  data-testid=\"button-save-project\"\n                >\n                  {createMutation.isPending ? \"Creating...\" : \"Create Project\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {projects.length === 0 ? (\n          <Card className=\"p-12 text-center\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <FolderOpen className=\"h-16 w-16 text-muted-foreground\" />\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">No Projects Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Create your first project to start managing budgets\n                </p>\n                <Button\n                  onClick={() => setCreateDialogOpen(true)}\n                  data-testid=\"button-create-first-project\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Your First Project\n                </Button>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {projects.map((project) => (\n              <Card\n                key={project.id}\n                className=\"hover-elevate active-elevate-2 cursor-pointer group\"\n                data-testid={`card-project-${project.id}`}\n              >\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"truncate font-['Rajdhani'] text-xl\">\n                      {project.name}\n                    </span>\n                    <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openEditDialog(project);\n                        }}\n                        data-testid={`button-edit-${project.id}`}\n                      >\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openDeleteDialog(project);\n                        }}\n                        data-testid={`button-delete-${project.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => onSelectProject(project.id)}\n                    data-testid={`button-open-${project.id}`}\n                  >\n                    <FolderOpen className=\"mr-2 h-4 w-4\" />\n                    Open Project\n                  </Button>\n                  <p className=\"text-xs text-muted-foreground mt-3 text-center\">\n                    Created {new Date(project.createdAt).toLocaleDateString()}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Edit Dialog */}\n        <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Rename Project</DialogTitle>\n              <DialogDescription>\n                Update the name of your project\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <Input\n                placeholder=\"Project name\"\n                value={editingProject?.name || \"\"}\n                onChange={(e) =>\n                  setEditingProject(\n                    editingProject\n                      ? { ...editingProject, name: e.target.value }\n                      : null\n                  )\n                }\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") handleEdit();\n                }}\n                data-testid=\"input-edit-project-name\"\n                autoFocus\n              />\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setEditDialogOpen(false)}\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleEdit}\n                disabled={!editingProject?.name.trim() || updateMutation.isPending}\n                data-testid=\"button-save-edit\"\n              >\n                {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete Project?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This will permanently delete \"{deletingProject?.name}\" and ALL its\n                divisions, items, and data. This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction\n                onClick={handleDelete}\n                className=\"bg-destructive text-destructive-foreground hover-elevate\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {deleteMutation.isPending ? \"Deleting...\" : \"Delete Project\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12519},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProjectSchema, \n  updateProjectSchema, \n  insertDivisionSchema, \n  insertItemSchema, \n  updateDivisionSchema, \n  updateItemSchema,\n  insertUserSchema,\n  insertEmployeeSchema,\n  insertTaskSchema,\n  insertProcurementItemSchema,\n  insertSalarySchema,\n  insertAttendanceSchema,\n  insertProjectAssignmentSchema,\n  insertCommentSchema,\n  insertProjectFinancialsSchema,\n} from \"@shared/schema\";\nimport { requireAuth, requireRole, attachUser, hashPassword, verifyPassword } from \"./auth\";\nimport { z } from \"zod\";\nimport ExcelJS from \"exceljs\";\nimport { jsPDF } from \"jspdf\";\n\nexport async function registerRoutes(app: Express, server?: Server): Promise<Server> {\n  // Note: attachUser middleware is already attached in index.ts, no need to add it here\n\n  // Project routes - requireAuth for all authenticated users\n  app.get(\"/api/projects\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      let projects = await storage.getProjects();\n      \n      // Filter by role - clients and employees only see assigned projects\n      if (user.role === \"client\" || user.role === \"employee\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const assignedProjectIds = assignments.map(a => a.projectId);\n        projects = projects.filter(p => assignedProjectIds.includes(p.id));\n      }\n      // Principle and procurement see all projects\n      \n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertProjectSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid project data\", details: parsed.error });\n      }\n\n      const project = await storage.createProject(parsed.data);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = updateProjectSchema.safeParse({ ...req.body, id: req.params.id });\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid project data\", details: parsed.error });\n      }\n\n      const project = await storage.updateProject(parsed.data);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Division routes - requireAuth for all authenticated users\n  app.get(\"/api/divisions\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.query.projectId as string | undefined;\n      let divisions = await storage.getDivisions(projectId);\n      \n      // Filter by role - clients and employees only see divisions for assigned projects\n      if (user.role === \"client\" || user.role === \"employee\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const assignedProjectIds = assignments.map(a => a.projectId);\n        divisions = divisions.filter(d => assignedProjectIds.includes(d.projectId));\n      }\n      \n      res.json(divisions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch divisions\" });\n    }\n  });\n\n  app.post(\"/api/divisions\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertDivisionSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid division data\", details: parsed.error });\n      }\n\n      const division = await storage.createDivision(parsed.data);\n      res.status(201).json(division);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create division\" });\n    }\n  });\n\n  app.patch(\"/api/divisions/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = updateDivisionSchema.safeParse({ ...req.body, id: req.params.id });\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid division data\", details: parsed.error });\n      }\n\n      const division = await storage.updateDivision(parsed.data);\n      if (!division) {\n        return res.status(404).json({ error: \"Division not found\" });\n      }\n\n      res.json(division);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update division\" });\n    }\n  });\n\n  app.delete(\"/api/divisions/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteDivision(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Division not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete division\" });\n    }\n  });\n\n  // Item routes - requireAuth for all authenticated users\n  app.get(\"/api/items\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.query.projectId as string | undefined;\n      let items = await storage.getItems(projectId);\n      \n      // Filter by role - clients and employees only see items for divisions in assigned projects\n      if (user.role === \"client\" || user.role === \"employee\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const assignedProjectIds = assignments.map(a => a.projectId);\n        \n        // Get all divisions for assigned projects\n        const divisions = await storage.getDivisions();\n        const assignedDivisionIds = divisions\n          .filter(d => assignedProjectIds.includes(d.projectId))\n          .map(d => d.id);\n        \n        items = items.filter(item => assignedDivisionIds.includes(item.divisionId));\n      }\n      \n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch items\" });\n    }\n  });\n\n  app.post(\"/api/items\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertItemSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid item data\", details: parsed.error });\n      }\n\n      const item = await storage.createItem(parsed.data);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create item\" });\n    }\n  });\n\n  app.patch(\"/api/items/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = updateItemSchema.safeParse({ ...req.body, id: req.params.id });\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid item data\", details: parsed.error });\n      }\n\n      const item = await storage.updateItem(parsed.data);\n      if (!item) {\n        return res.status(404).json({ error: \"Item not found\" });\n      }\n\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update item\" });\n    }\n  });\n\n  app.delete(\"/api/items/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Item not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete item\" });\n    }\n  });\n\n  // Summary route - requireAuth for all authenticated users\n  app.get(\"/api/summary\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      let projectId = req.query.projectId as string | undefined;\n      \n      // Filter by role - clients and employees only see summary for assigned projects\n      if (user.role === \"client\" || user.role === \"employee\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const assignedProjectIds = assignments.map(a => a.projectId);\n        \n        // If a specific project is requested, verify user has access\n        if (projectId && !assignedProjectIds.includes(projectId)) {\n          return res.status(403).json({ error: \"Forbidden: You don't have access to this project\" });\n        }\n        \n        // If no project specified, calculate summary only for assigned projects\n        if (!projectId) {\n          // Get summary for all assigned projects by filtering divisions and items\n          const allDivisions = await storage.getDivisions();\n          const assignedDivisions = allDivisions.filter(d => assignedProjectIds.includes(d.projectId));\n          const assignedDivisionIds = assignedDivisions.map(d => d.id);\n          \n          const allItems = await storage.getItems();\n          const assignedItems = allItems.filter(item => assignedDivisionIds.includes(item.divisionId));\n          \n          // Calculate custom summary for assigned projects only\n          const totalCost = assignedItems.reduce((sum, item) => sum + Number(item.quantity) * Number(item.rate), 0);\n          const priorityCosts = { High: 0, Mid: 0, Low: 0 };\n          \n          assignedItems.forEach((item) => {\n            const itemTotal = Number(item.quantity) * Number(item.rate);\n            priorityCosts[item.priority as \"High\" | \"Mid\" | \"Low\"] += itemTotal;\n          });\n          \n          const divisionBreakdown = assignedDivisions.map((division) => {\n            const divisionItems = assignedItems.filter((item) => item.divisionId === division.id);\n            const totalCost = divisionItems.reduce((sum, item) => sum + Number(item.quantity) * Number(item.rate), 0);\n            return {\n              divisionId: division.id,\n              divisionName: division.name,\n              totalCost,\n              itemCount: divisionItems.length,\n            };\n          });\n          \n          return res.json({\n            totalCost,\n            highPriorityCost: priorityCosts.High,\n            midPriorityCost: priorityCosts.Mid,\n            lowPriorityCost: priorityCosts.Low,\n            totalItems: assignedItems.length,\n            totalDivisions: assignedDivisions.length,\n            divisionBreakdown,\n          });\n        }\n      }\n      \n      // Principle and procurement see all, or specific project summary if requested\n      const summary = await storage.getProjectSummary(projectId);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch summary\" });\n    }\n  });\n\n  // Export routes - requireAuth\n  app.post(\"/api/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const { divisions, items, summary } = req.body;\n\n      const workbook = new ExcelJS.Workbook();\n      workbook.creator = \"ARKA SERVICES PROJECT MANAGEMENT\";\n      workbook.created = new Date();\n\n      // Summary Sheet\n      const summarySheet = workbook.addWorksheet(\"Summary\");\n      summarySheet.columns = [\n        { header: \"Metric\", key: \"metric\", width: 30 },\n        { header: \"Value\", key: \"value\", width: 20 },\n      ];\n\n      summarySheet.addRows([\n        { metric: \"Total Project Cost (PKR)\", value: summary.totalCost },\n        { metric: \"High Priority Cost (PKR)\", value: summary.highPriorityCost },\n        { metric: \"Mid Priority Cost (PKR)\", value: summary.midPriorityCost },\n        { metric: \"Low Priority Cost (PKR)\", value: summary.lowPriorityCost },\n        { metric: \"Total Items\", value: summary.totalItems },\n        { metric: \"Total Divisions\", value: summary.totalDivisions },\n      ]);\n\n      summarySheet.getRow(1).font = { bold: true };\n\n      // Divisions Sheet\n      const divisionsSheet = workbook.addWorksheet(\"Divisions\");\n      divisionsSheet.columns = [\n        { header: \"Division Name\", key: \"name\", width: 30 },\n        { header: \"Items\", key: \"items\", width: 10 },\n        { header: \"Total Cost (PKR)\", key: \"cost\", width: 20 },\n      ];\n\n      summary.divisionBreakdown.forEach((div: any) => {\n        divisionsSheet.addRow({\n          name: div.divisionName,\n          items: div.itemCount,\n          cost: div.totalCost,\n        });\n      });\n\n      divisionsSheet.getRow(1).font = { bold: true };\n\n      // Items Sheet\n      const itemsSheet = workbook.addWorksheet(\"Items\");\n      itemsSheet.columns = [\n        { header: \"Division\", key: \"division\", width: 20 },\n        { header: \"Description\", key: \"description\", width: 35 },\n        { header: \"Unit\", key: \"unit\", width: 15 },\n        { header: \"Quantity\", key: \"quantity\", width: 12 },\n        { header: \"Rate (PKR)\", key: \"rate\", width: 15 },\n        { header: \"Total (PKR)\", key: \"total\", width: 15 },\n        { header: \"Priority\", key: \"priority\", width: 12 },\n      ];\n\n      items.forEach((item: any) => {\n        const division = divisions.find((d: any) => d.id === item.divisionId);\n        itemsSheet.addRow({\n          division: division?.name || \"\",\n          description: item.description,\n          unit: item.unit,\n          quantity: item.quantity,\n          rate: item.rate,\n          total: item.quantity * item.rate,\n          priority: item.priority,\n        });\n      });\n\n      itemsSheet.getRow(1).font = { bold: true };\n\n      res.setHeader(\n        \"Content-Type\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      );\n      res.setHeader(\n        \"Content-Disposition\",\n        \"attachment; filename=arka-project.xlsx\"\n      );\n\n      await workbook.xlsx.write(res);\n      res.end();\n    } catch (error) {\n      console.error(\"Excel export error:\", error);\n      res.status(500).json({ error: \"Failed to export to Excel\" });\n    }\n  });\n\n  app.post(\"/api/export/pdf\", requireAuth, async (req, res) => {\n    try {\n      const { divisions, items, summary } = req.body;\n\n      const doc = new jsPDF();\n      let yPos = 20;\n\n      doc.setFontSize(20);\n      doc.text(\"ARKA SERVICES PROJECT MANAGEMENT\", 105, yPos, { align: \"center\" });\n      yPos += 15;\n\n      doc.setFontSize(12);\n      doc.text(\"Master Project Summary\", 105, yPos, { align: \"center\" });\n      yPos += 15;\n\n      doc.setFontSize(10);\n      doc.text(`Total Project Cost: ${summary.totalCost.toLocaleString('en-PK')} PKR`, 20, yPos);\n      yPos += 8;\n      doc.text(`High Priority Cost: ${summary.highPriorityCost.toLocaleString('en-PK')} PKR`, 20, yPos);\n      yPos += 8;\n      doc.text(`Mid Priority Cost: ${summary.midPriorityCost.toLocaleString('en-PK')} PKR`, 20, yPos);\n      yPos += 8;\n      doc.text(`Low Priority Cost: ${summary.lowPriorityCost.toLocaleString('en-PK')} PKR`, 20, yPos);\n      yPos += 8;\n      doc.text(`Total Items: ${summary.totalItems}`, 20, yPos);\n      yPos += 8;\n      doc.text(`Total Divisions: ${summary.totalDivisions}`, 20, yPos);\n      yPos += 15;\n\n      doc.setFontSize(14);\n      doc.text(\"Division Breakdown\", 20, yPos);\n      yPos += 10;\n\n      doc.setFontSize(9);\n      summary.divisionBreakdown.forEach((div: any) => {\n        if (yPos > 270) {\n          doc.addPage();\n          yPos = 20;\n        }\n        doc.text(`${div.divisionName}: ${div.itemCount} items, ${div.totalCost.toLocaleString('en-PK')} PKR`, 20, yPos);\n        yPos += 7;\n      });\n\n      const pdfBuffer = Buffer.from(doc.output(\"arraybuffer\"));\n\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", \"attachment; filename=arka-project.pdf\");\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error(\"PDF export error:\", error);\n      res.status(500).json({ error: \"Failed to export to PDF\" });\n    }\n  });\n\n  app.post(\"/api/export/jpeg\", requireAuth, async (req, res) => {\n    try {\n      res.status(501).json({ \n        error: \"JPEG export requires client-side rendering. Please use the download button in the UI.\" \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to export to JPEG\" });\n    }\n  });\n\n  // Authentication Routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginSchema = z.object({\n        username: z.string().min(1),\n        password: z.string().min(1),\n      });\n\n      const parsed = loginSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid credentials\", details: parsed.error });\n      }\n\n      const { username, password } = parsed.data;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || !verifyPassword(password, user.password)) {\n        return res.status(401).json({ error: \"Invalid username or password\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ error: \"Account is inactive\" });\n      }\n\n      // Create session\n      req.session.userId = user.id;\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to login\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", requireAuth, async (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Failed to logout\" });\n        }\n        res.status(204).send();\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to logout\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = req.user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get current user\" });\n    }\n  });\n\n  // User Management Routes (Principle only)\n  app.get(\"/api/users\", requireAuth, requireRole(\"principle\"), async (_req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from all users\n      const usersWithoutPasswords = users.map(({ password: _, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertUserSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid user data\", details: parsed.error });\n      }\n\n      // Hash the password before storing\n      const hashedPassword = hashPassword(parsed.data.password);\n      const user = await storage.createUser({\n        ...parsed.data,\n        password: hashedPassword,\n      });\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const updateUserSchema = z.object({\n        username: z.string().min(3).optional(),\n        password: z.string().min(6).optional(),\n        role: z.enum([\"principle\", \"employee\", \"client\", \"procurement\"]).optional(),\n        fullName: z.string().min(1).optional(),\n        isActive: z.number().int().min(0).max(1).optional(),\n      });\n\n      const parsed = updateUserSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid user data\", details: parsed.error });\n      }\n\n      const updates: any = { ...parsed.data };\n      \n      // Hash password if provided\n      if (updates.password) {\n        updates.password = hashPassword(updates.password);\n      }\n\n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Employee Management Routes\n  app.get(\"/api/employees\", requireAuth, requireRole('principle'), async (_req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const employee = await storage.getEmployee(req.params.id);\n      \n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n\n      // Employees can only see their own data, principle can see all\n      if (user.role === \"employee\" && employee.userId !== user.id) {\n        return res.status(403).json({ error: \"Forbidden: You can only view your own employee data\" });\n      }\n\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertEmployeeSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: parsed.error });\n      }\n\n      const employee = await storage.createEmployee(parsed.data);\n      res.status(201).json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const updateEmployeeSchema = z.object({\n        idCard: z.string().optional(),\n        whatsapp: z.string().optional(),\n        homeAddress: z.string().optional(),\n        joiningDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n        profilePicture: z.string().optional(),\n      });\n\n      const parsed = updateEmployeeSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: parsed.error });\n      }\n\n      const employee = await storage.updateEmployee(req.params.id, parsed.data);\n      if (!employee) {\n        return res.status(404).json({ error: \"Employee not found\" });\n      }\n\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update employee\" });\n    }\n  });\n\n  // Task Management Routes with role-based filtering\n  app.get(\"/api/tasks\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.query.projectId as string | undefined;\n      const employeeId = req.query.employeeId as string | undefined;\n      \n      let tasks;\n      \n      if (user.role === \"employee\") {\n        // Employees only see tasks assigned to them\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee) {\n          return res.status(404).json({ error: \"Employee profile not found\" });\n        }\n        tasks = await storage.getTasks(projectId, employee.id);\n      } else if (user.role === \"client\") {\n        // Clients only see tasks for their assigned projects\n        const assignments = await storage.getProjectAssignments(user.id);\n        const projectIds = assignments.map(a => a.projectId);\n        \n        tasks = await storage.getTasks(projectId, employeeId);\n        tasks = tasks.filter(t => projectIds.includes(t.projectId));\n      } else {\n        // Principle and procurement see all tasks\n        tasks = await storage.getTasks(projectId, employeeId);\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertTaskSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid task data\", details: parsed.error });\n      }\n\n      const task = await storage.createTask(parsed.data);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const updateTaskSchema = z.object({\n        taskType: z.enum([\"Design CAD\", \"IFCs\", \"3D Rendering\", \"Procurement\", \"Site Visits\"]).optional(),\n        description: z.string().optional(),\n        status: z.enum([\"Done\", \"Undone\", \"In Progress\"]).optional(),\n        remarks: z.string().optional(),\n        dueDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n      });\n\n      const parsed = updateTaskSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid task data\", details: parsed.error });\n      }\n\n      const task = await storage.getTask(req.params.id);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n\n      // Allow principle to update any task OR employee to update their own task\n      if (user.role !== 'principle') {\n        if (user.role === \"employee\") {\n          const employee = await storage.getEmployeeByUserId(user.id);\n          if (!employee || task.employeeId !== employee.id) {\n            return res.status(403).json({ error: \"Forbidden: You can only update your own tasks\" });\n          }\n        } else {\n          // Other roles (client, procurement) cannot update tasks\n          return res.status(403).json({ error: \"Forbidden\" });\n        }\n      }\n\n      const updatedTask = await storage.updateTask(req.params.id, parsed.data);\n      if (!updatedTask) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n\n      res.json(updatedTask);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteTask(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Task Statistics Endpoint (monthly progress tracking)\n  app.get(\"/api/tasks/stats/monthly\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const month = req.query.month as string; // Format: YYYY-MM\n      const employeeId = req.query.employeeId as string | undefined;\n      \n      if (!month) {\n        return res.status(400).json({ error: \"month query parameter is required (format: YYYY-MM)\" });\n      }\n\n      // Get all tasks for the specified month\n      let allTasks = await storage.getTasks();\n      \n      // Filter by month (tasks created in this month)\n      const [year, monthNum] = month.split('-').map(Number);\n      allTasks = allTasks.filter(task => {\n        const taskDate = new Date(task.createdAt);\n        return taskDate.getFullYear() === year && taskDate.getMonth() + 1 === monthNum;\n      });\n\n      // Apply role-based filtering\n      if (user.role === \"employee\") {\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee) {\n          return res.status(404).json({ error: \"Employee profile not found\" });\n        }\n        allTasks = allTasks.filter(task => task.employeeId === employee.id);\n      } else if (employeeId && user.role === \"principle\") {\n        // Principle can filter by specific employee\n        allTasks = allTasks.filter(task => task.employeeId === employeeId);\n      }\n\n      // Calculate statistics\n      const total = allTasks.length;\n      const done = allTasks.filter(t => t.status === \"Done\").length;\n      const inProgress = allTasks.filter(t => t.status === \"In Progress\").length;\n      const undone = allTasks.filter(t => t.status === \"Undone\").length;\n      const completionRate = total > 0 ? Math.round((done / total) * 100) : 0;\n\n      res.json({\n        month,\n        total,\n        done,\n        inProgress,\n        undone,\n        completionRate,\n        tasks: allTasks\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch task statistics\" });\n    }\n  });\n\n  // Procurement Routes with role-based filtering\n  app.get(\"/api/procurement\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.query.projectId as string;\n      \n      if (!projectId) {\n        return res.status(400).json({ error: \"projectId query parameter is required\" });\n      }\n\n      let items = await storage.getProcurementItems(projectId);\n\n      if (user.role === \"client\") {\n        // Clients only see procurement for their assigned projects\n        const assignments = await storage.getProjectAssignments(user.id);\n        const projectIds = assignments.map(a => a.projectId);\n        \n        if (!projectIds.includes(projectId)) {\n          return res.status(403).json({ error: \"Forbidden: You can only view procurement for assigned projects\" });\n        }\n        \n        // Clients see project_cost only, hide execution_cost\n        items = items.map(item => ({\n          ...item,\n          executionCost: \"0\"\n        }));\n      }\n      \n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch procurement items\" });\n    }\n  });\n\n  app.post(\"/api/procurement\", requireAuth, requireRole(\"principle\", \"procurement\"), async (req, res) => {\n    try {\n      const parsed = insertProcurementItemSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid procurement item data\", details: parsed.error });\n      }\n\n      const item = await storage.createProcurementItem(parsed.data);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create procurement item\" });\n    }\n  });\n\n  app.patch(\"/api/procurement/:id\", requireAuth, requireRole(\"principle\", \"procurement\"), async (req, res) => {\n    try {\n      const updateProcurementSchema = z.object({\n        itemName: z.string().min(1).optional(),\n        projectCost: z.number().min(0).optional(),\n        executionCost: z.number().min(0).optional(),\n        isPurchased: z.number().int().min(0).max(1).optional(),\n        billNumber: z.string().optional(),\n        rentalDetails: z.string().optional(),\n        quantity: z.number().min(0).optional(),\n        unit: z.string().optional(),\n        notes: z.string().optional(),\n        purchasedBy: z.string().optional(),\n        purchasedDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n      });\n\n      const parsed = updateProcurementSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid procurement item data\", details: parsed.error });\n      }\n\n      // Convert numeric fields to strings for database storage\n      const updates: any = { ...parsed.data };\n      if (updates.quantity !== undefined) updates.quantity = updates.quantity.toString();\n      if (updates.projectCost !== undefined) updates.projectCost = updates.projectCost.toString();\n      if (updates.executionCost !== undefined) updates.executionCost = updates.executionCost.toString();\n\n      const item = await storage.updateProcurementItem(req.params.id, updates);\n      if (!item) {\n        return res.status(404).json({ error: \"Procurement item not found\" });\n      }\n\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update procurement item\" });\n    }\n  });\n\n  app.delete(\"/api/procurement/:id\", requireAuth, requireRole(\"principle\", \"procurement\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteProcurementItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Procurement item not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete procurement item\" });\n    }\n  });\n\n  // Salary Routes with employee-only and principle access\n  app.get(\"/api/salaries\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const employeeId = req.query.employeeId as string;\n      \n      if (!employeeId) {\n        return res.status(400).json({ error: \"employeeId query parameter is required\" });\n      }\n\n      // Employees can only see their own salaries\n      if (user.role === \"employee\") {\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee || employee.id !== employeeId) {\n          return res.status(403).json({ error: \"Forbidden: You can only view your own salary data\" });\n        }\n      } else if (user.role !== \"principle\") {\n        return res.status(403).json({ error: \"Forbidden: Only employees and principle can view salaries\" });\n      }\n\n      const salaries = await storage.getSalaries(employeeId);\n      res.json(salaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch salaries\" });\n    }\n  });\n\n  app.post(\"/api/salaries\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertSalarySchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid salary data\", details: parsed.error });\n      }\n\n      const salary = await storage.createSalary(parsed.data);\n      res.status(201).json(salary);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create salary\" });\n    }\n  });\n\n  app.patch(\"/api/salaries/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const updateSalarySchema = z.object({\n        basicSalary: z.number().min(0).optional(),\n        incentives: z.number().min(0).optional(),\n        medical: z.number().min(0).optional(),\n        tax: z.number().min(0).optional(),\n        deductions: z.number().min(0).optional(),\n        netSalary: z.number().min(0).optional(),\n        isPaid: z.number().int().min(0).max(1).optional(),\n        paidDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n      });\n\n      const parsed = updateSalarySchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid salary data\", details: parsed.error });\n      }\n\n      // Convert numeric fields to strings for database storage\n      const updates: any = { ...parsed.data };\n      if (updates.basicSalary !== undefined) updates.basicSalary = updates.basicSalary.toString();\n      if (updates.incentives !== undefined) updates.incentives = updates.incentives.toString();\n      if (updates.medical !== undefined) updates.medical = updates.medical.toString();\n      if (updates.tax !== undefined) updates.tax = updates.tax.toString();\n      if (updates.deductions !== undefined) updates.deductions = updates.deductions.toString();\n      if (updates.netSalary !== undefined) updates.netSalary = updates.netSalary.toString();\n\n      const salary = await storage.updateSalary(req.params.id, updates);\n      if (!salary) {\n        return res.status(404).json({ error: \"Salary not found\" });\n      }\n\n      res.json(salary);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update salary\" });\n    }\n  });\n\n  app.delete(\"/api/salaries/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteSalary(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Salary not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete salary\" });\n    }\n  });\n\n  // Attendance Routes with employee-only and principle access\n  app.get(\"/api/attendance\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const employeeId = req.query.employeeId as string;\n      \n      if (!employeeId) {\n        return res.status(400).json({ error: \"employeeId query parameter is required\" });\n      }\n\n      // Employees can only see their own attendance\n      if (user.role === \"employee\") {\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee || employee.id !== employeeId) {\n          return res.status(403).json({ error: \"Forbidden: You can only view your own attendance data\" });\n        }\n      } else if (user.role !== \"principle\") {\n        return res.status(403).json({ error: \"Forbidden: Only employees and principle can view attendance\" });\n      }\n\n      const month = req.query.month as string | undefined;\n      const attendance = await storage.getAttendance(employeeId, month);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch attendance\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const parsed = insertAttendanceSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid attendance data\", details: parsed.error });\n      }\n\n      // Employees can only mark their own attendance\n      if (user.role === \"employee\") {\n        // Verify employee is marking their own attendance (employeeId in attendance table references users.id)\n        if (parsed.data.employeeId !== user.id) {\n          return res.status(403).json({ error: \"Forbidden: You can only mark your own attendance\" });\n        }\n      }\n      // Principle can mark anyone's attendance (no additional check needed)\n\n      const attendance = await storage.createAttendance(parsed.data);\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create attendance record\" });\n    }\n  });\n\n  app.patch(\"/api/attendance/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const updateAttendanceSchema = z.object({\n        attendanceDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n        status: z.enum([\"Present\", \"Absent\", \"Late\", \"Half Day\"]).optional(),\n        checkInTime: z.string().optional(),\n        checkOutTime: z.string().optional(),\n        hoursWorked: z.number().min(0).optional(),\n      });\n\n      const parsed = updateAttendanceSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid attendance data\", details: parsed.error });\n      }\n\n      // Convert hoursWorked to string if provided\n      const updates: any = { ...parsed.data };\n      if (updates.hoursWorked !== undefined) {\n        updates.hoursWorked = updates.hoursWorked.toString();\n      }\n\n      const attendance = await storage.updateAttendance(req.params.id, updates);\n      if (!attendance) {\n        return res.status(404).json({ error: \"Attendance record not found\" });\n      }\n\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update attendance record\" });\n    }\n  });\n\n  app.delete(\"/api/attendance/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteAttendance(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Attendance record not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete attendance record\" });\n    }\n  });\n\n  // Project Assignment Routes with role-based filtering\n  app.get(\"/api/assignments\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const userId = req.query.userId as string | undefined;\n      const projectId = req.query.projectId as string | undefined;\n      \n      let assignments;\n      \n      if (user.role === \"client\") {\n        // Clients can only see their own assignments\n        assignments = await storage.getProjectAssignments(user.id, projectId);\n      } else {\n        // Principle and other roles can see all assignments\n        assignments = await storage.getProjectAssignments(userId, projectId);\n      }\n      \n      res.json(assignments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch project assignments\" });\n    }\n  });\n\n  app.post(\"/api/assignments\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertProjectAssignmentSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid assignment data\", details: parsed.error });\n      }\n\n      const assignment = await storage.createProjectAssignment(parsed.data);\n      res.status(201).json(assignment);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create project assignment\" });\n    }\n  });\n\n  app.delete(\"/api/assignments/:id\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteProjectAssignment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Project assignment not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete project assignment\" });\n    }\n  });\n\n  // Comment Routes with role-based filtering\n  app.get(\"/api/comments\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.query.projectId as string;\n      \n      if (!projectId) {\n        return res.status(400).json({ error: \"projectId query parameter is required\" });\n      }\n\n      // Clients can only see comments for their assigned projects\n      if (user.role === \"client\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const projectIds = assignments.map(a => a.projectId);\n        \n        if (!projectIds.includes(projectId)) {\n          return res.status(403).json({ error: \"Forbidden: You can only view comments for assigned projects\" });\n        }\n      }\n\n      const comments = await storage.getComments(projectId);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/comments\", requireAuth, async (req, res) => {\n    try {\n      const parsed = insertCommentSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid comment data\", details: parsed.error });\n      }\n\n      const comment = await storage.createComment(parsed.data);\n      res.status(201).json(comment);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n\n  app.delete(\"/api/comments/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const comment = await storage.getComment(req.params.id);\n      \n      if (!comment) {\n        return res.status(404).json({ error: \"Comment not found\" });\n      }\n\n      // Principle OR comment author can delete\n      if (user.role !== \"principle\" && comment.userId !== user.id) {\n        return res.status(403).json({ error: \"Forbidden: You can only delete your own comments\" });\n      }\n\n      const deleted = await storage.deleteComment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Comment not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete comment\" });\n    }\n  });\n\n  // Project Financials Routes with role-based access\n  app.get(\"/api/financials/:projectId\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user!;\n      const projectId = req.params.projectId;\n\n      // Clients can only view financials for their assigned projects\n      if (user.role === \"client\") {\n        const assignments = await storage.getProjectAssignments(user.id);\n        const projectIds = assignments.map(a => a.projectId);\n        \n        if (!projectIds.includes(projectId)) {\n          return res.status(403).json({ error: \"Forbidden: You can only view financials for assigned projects\" });\n        }\n      }\n\n      const financials = await storage.getProjectFinancials(projectId);\n      if (!financials) {\n        return res.status(404).json({ error: \"Project financials not found\" });\n      }\n\n      res.json(financials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch project financials\" });\n    }\n  });\n\n  app.post(\"/api/financials\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const parsed = insertProjectFinancialsSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid financials data\", details: parsed.error });\n      }\n\n      const financials = await storage.createProjectFinancials(parsed.data);\n      res.status(201).json(financials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create project financials\" });\n    }\n  });\n\n  app.patch(\"/api/financials/:projectId\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const updateFinancialsSchema = z.object({\n        contractValue: z.number().min(0).optional(),\n        amountReceived: z.number().min(0).optional(),\n        workCompleted: z.number().min(0).max(100).optional(),\n        isArchived: z.number().int().min(0).max(1).optional(),\n        archivedDate: z.union([z.string(), z.date()]).transform(val => \n          typeof val === 'string' ? new Date(val) : val\n        ).optional(),\n      });\n\n      const parsed = updateFinancialsSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid financials data\", details: parsed.error });\n      }\n\n      // Convert numeric fields to strings for database storage\n      const updates: any = { ...parsed.data };\n      if (updates.contractValue !== undefined) updates.contractValue = updates.contractValue.toString();\n      if (updates.amountReceived !== undefined) updates.amountReceived = updates.amountReceived.toString();\n      if (updates.workCompleted !== undefined) updates.workCompleted = updates.workCompleted.toString();\n\n      const financials = await storage.updateProjectFinancials(req.params.projectId, updates);\n      if (!financials) {\n        return res.status(404).json({ error: \"Project financials not found\" });\n      }\n\n      res.json(financials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update project financials\" });\n    }\n  });\n\n  app.delete(\"/api/financials/:projectId\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const deleted = await storage.deleteProjectFinancials(req.params.projectId);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Project financials not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete project financials\" });\n    }\n  });\n\n  // Create employee with user account (atomic operation)\n  app.post(\"/api/employees/create\", requireAuth, requireRole(\"principle\"), async (req, res) => {\n    try {\n      const employeeSchema = insertUserSchema.extend({\n        idCard: z.string().min(1, \"ID Card is required\"),\n        whatsapp: z.string().min(1, \"WhatsApp number is required\"),\n        homeAddress: z.string().min(1, \"Home address is required\"),\n        joiningDate: z.string().min(1, \"Joining date is required\"),\n        profilePicture: z.string().optional(),\n      });\n\n      const parsed = employeeSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: \"Invalid employee data\", details: parsed.error });\n      }\n\n      const data = parsed.data;\n\n      // Create user\n      const hashedPassword = hashPassword(data.password);\n      const user = await storage.createUser({\n        username: data.username,\n        password: hashedPassword,\n        fullName: data.fullName,\n        role: data.role,\n        isActive: data.isActive || 1,\n      });\n\n      try {\n        // Create employee profile\n        const employee = await storage.createEmployee({\n          userId: user.id,\n          idCard: data.idCard,\n          whatsapp: data.whatsapp,\n          homeAddress: data.homeAddress,\n          joiningDate: new Date(data.joiningDate),\n          profilePicture: data.profilePicture || null,\n        });\n\n        res.status(201).json({ user: { ...user, password: undefined }, employee });\n      } catch (employeeError) {\n        // Rollback: delete the created user if employee creation fails\n        await storage.deleteUser(user.id);\n        throw employeeError;\n      }\n    } catch (error) {\n      console.error(\"Employee creation error:\", error);\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  // Employee Documents routes\n  app.get(\"/api/documents\", requireAuth, async (req, res) => {\n    try {\n      const employeeId = req.query.employeeId as string | undefined;\n      const user = req.user!;\n\n      // Employees can only see their own documents\n      if (user.role === \"employee\" && employeeId && employeeId !== user.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      const documents = await storage.getEmployeeDocuments(employeeId);\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Use provided server or create a new one\n  const httpServer = server || createServer(app);\n\n  return httpServer;\n}\n","size_bytes":51016},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Division, Item, ProjectSummary, Project } from \"@shared/schema\";\nimport { ProjectSelector } from \"@/components/ProjectSelector\";\nimport { ProjectDetailsDialog } from \"@/components/ProjectDetailsDialog\";\nimport { DivisionSidebar } from \"@/components/DivisionSidebar\";\nimport { ItemManagement } from \"@/components/ItemManagement\";\nimport { Analytics } from \"@/components/Analytics\";\nimport { MasterSummary } from \"@/components/MasterSummary\";\nimport { ExportModal } from \"@/components/ExportModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, BarChart3, ArrowLeft, Info } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);\n  const [selectedDivisionId, setSelectedDivisionId] = useState<string | null>(null);\n  const [showSummary, setShowSummary] = useState(false);\n  const [showExport, setShowExport] = useState(false);\n  const [showProjectDetails, setShowProjectDetails] = useState(false);\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: divisions = [], isLoading: divisionsLoading } = useQuery<Division[]>({\n    queryKey: [`/api/divisions?projectId=${selectedProjectId}`],\n    enabled: !!selectedProjectId,\n  });\n\n  const { data: items = [], isLoading: itemsLoading } = useQuery<Item[]>({\n    queryKey: [`/api/items?projectId=${selectedProjectId}`],\n    enabled: !!selectedProjectId,\n  });\n\n  const { data: summary } = useQuery<ProjectSummary>({\n    queryKey: [`/api/summary?projectId=${selectedProjectId}`],\n    enabled: !!selectedProjectId,\n  });\n\n  const selectedProject = projects.find((p) => p.id === selectedProjectId);\n\n  const selectedDivision = divisions.find((d) => d.id === selectedDivisionId);\n  const divisionItems = items.filter((item) => item.divisionId === selectedDivisionId);\n\n  const handleBackToProjects = () => {\n    setSelectedProjectId(null);\n    setSelectedDivisionId(null);\n    setShowSummary(false);\n  };\n\n  // Show project selector if no project is selected\n  if (!selectedProjectId) {\n    return (\n      <div className=\"h-screen w-full bg-background overflow-hidden flex flex-col\">\n        <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n                <BarChart3 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                  ARKA SERVICES\n                </h1>\n                <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                  Project Management System\n                </p>\n              </div>\n            </div>\n          </div>\n        </header>\n        <ProjectSelector onSelectProject={setSelectedProjectId} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen w-full bg-background overflow-hidden flex flex-col\">\n      {/* Top Navigation Bar */}\n      <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleBackToProjects}\n              data-testid=\"button-back-to-projects\"\n              className=\"mr-2\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n              <BarChart3 className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                {selectedProject?.name || \"PROJECT\"}\n              </h1>\n              <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                Architecture & Interior Design Management\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            {summary && (\n              <div className=\"flex items-center gap-2 px-4 py-2 rounded-md bg-primary/10 border border-primary/40\">\n                <span className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                  Total Budget\n                </span>\n                <span className=\"text-2xl font-mono font-bold text-primary\">\n                  {summary.totalCost.toLocaleString('en-PK')} PKR\n                </span>\n              </div>\n            )}\n            \n            <Button\n              onClick={() => setShowProjectDetails(true)}\n              variant=\"outline\"\n              className=\"border-purple-500/50 hover:border-purple-500\"\n              data-testid=\"button-project-details\"\n            >\n              <Info className=\"w-4 h-4 mr-2\" />\n              Project Details\n            </Button>\n\n            <Button\n              onClick={() => setShowSummary(!showSummary)}\n              variant=\"outline\"\n              className=\"border-accent/50 hover:border-accent\"\n              data-testid=\"button-toggle-summary\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              {showSummary ? \"Hide\" : \"Show\"} Summary\n            </Button>\n            \n            <Button\n              onClick={() => setShowExport(true)}\n              variant=\"default\"\n              data-testid=\"button-export\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Division Sidebar */}\n        <DivisionSidebar\n          projectId={selectedProjectId}\n          divisions={divisions}\n          items={items}\n          selectedDivisionId={selectedDivisionId}\n          onSelectDivision={setSelectedDivisionId}\n          isLoading={divisionsLoading}\n        />\n\n        {/* Center Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {showSummary ? (\n            <MasterSummary summary={summary} divisions={divisions} items={items} />\n          ) : (\n            <ItemManagement\n              division={selectedDivision}\n              items={divisionItems}\n              isLoading={itemsLoading}\n            />\n          )}\n        </div>\n\n        {/* Right Analytics Panel */}\n        <Analytics\n          summary={summary}\n          divisions={divisions}\n          items={items}\n        />\n      </div>\n\n      {/* Project Details Dialog */}\n      <ProjectDetailsDialog\n        project={selectedProject || null}\n        open={showProjectDetails}\n        onOpenChange={setShowProjectDetails}\n      />\n\n      {/* Export Modal */}\n      {showExport && selectedProject && (\n        <ExportModal\n          onClose={() => setShowExport(false)}\n          project={selectedProject}\n          projectName={selectedProject.name}\n          divisions={divisions}\n          items={items}\n          summary={summary}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7488},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"design_guidelines.md":{"content":"# ARKA SERVICES PROJECT MANAGEMENT - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Sci-Fi/Cyberpunk Aesthetic\n\nDrawing inspiration from futuristic interfaces seen in Cyberpunk 2077 UI, Blade Runner aesthetics, and modern data visualization tools like Grafana's dark themes, combined with the data-dense structure of enterprise tools like Tableau.\n\n**Core Design Principles:**\n- Futuristic cyberpunk aesthetic with functional clarity\n- High-contrast dark interface with neon accent highlights\n- Information density balanced with visual breathing room\n- Real-time data visualization as primary focus\n- Landscape-optimized dashboard layout\n\n---\n\n## Color Palette\n\n**Dark Mode Foundation (Primary):**\n- Background Base: 220 25% 8% (deep blue-black)\n- Surface Elevated: 220 20% 12% (card backgrounds)\n- Border/Divider: 220 30% 20% (subtle borders with cyan tint)\n\n**Neon Accent Colors:**\n- Primary Cyan: 180 100% 50% (electric cyan for key actions, graphs)\n- Secondary Purple: 270 80% 60% (for secondary elements, hover states)\n- Warning Orange: 30 100% 60% (alerts, important metrics)\n\n**Priority Color System:**\n- High Priority: 0 85% 60% (neon red with glow)\n- Mid Priority: 45 95% 55% (bright amber)\n- Low Priority: 140 60% 50% (muted green)\n\n**Data Visualization:**\n- Graph Line 1: 180 100% 50% (cyan)\n- Graph Line 2: 270 80% 60% (purple)\n- Graph Line 3: 160 90% 50% (teal)\n- Graph Backgrounds: Semi-transparent with 15% opacity\n\n---\n\n## Typography\n\n**Font Families:**\n- Primary: 'Orbitron' (Google Fonts) - futuristic headings and labels\n- Secondary: 'Rajdhani' (Google Fonts) - data tables and body text\n- Monospace: 'Fira Code' (Google Fonts) - numeric values, PKR amounts\n\n**Type Scale:**\n- App Title: text-3xl font-bold (Orbitron)\n- Section Headers: text-xl font-semibold (Orbitron)\n- Division Names: text-lg font-medium (Rajdhani)\n- Data Labels: text-sm font-medium uppercase tracking-wider (Rajdhani)\n- Numeric Values: text-base font-mono (Fira Code)\n- PKR Currency: text-2xl font-mono with cyan glow effect\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of 2, 4, 6, and 8\n- Component padding: p-4 to p-6\n- Section margins: m-6 to m-8\n- Grid gaps: gap-4 to gap-6\n\n**Dashboard Grid Structure:**\n- Primary layout: 12-column CSS Grid\n- Left sidebar (3 columns): Division navigation, quick stats\n- Main content (6 columns): Data entry forms, item lists\n- Right panel (3 columns): Live infographics, priority summaries\n\n**Container Strategy:**\n- Full viewport utilization (100vh, 100vw) - true desktop app feel\n- No max-width constraints - use all available screen space\n- Minimum width: 1366px (standard laptop)\n- Optimal width: 1920px (Full HD)\n\n---\n\n## Component Library\n\n### Navigation & Structure\n\n**Top Navigation Bar:**\n- Fixed header with app branding \"ARKA SERVICES PROJECT MANAGEMENT\"\n- Glowing cyan underline animation\n- Icons for Export (Excel/PDF/JPEG), Settings, Save\n- Real-time PKR total display in large monospace font with pulsing glow\n\n**Division Sidebar:**\n- Vertical list of division cards with neon borders\n- Add Division button with plus icon and hover glow\n- Each division shows mini summary (item count, total PKR)\n- Active division highlighted with cyan glow border\n- Collapse/expand functionality with smooth transitions\n\n### Data Entry Components\n\n**Item Entry Form:**\n- Floating card design with elevated shadow and cyan border glow\n- Form fields with futuristic input styling:\n  - Border: thin neon cyan outline\n  - Focus state: thicker glow with box-shadow\n  - Background: semi-transparent dark\n- Custom dropdown for unit of measure with neon hover\n- Quantity/Rate inputs: large monospace numbers\n- Auto-calculated total displayed immediately with highlight animation\n\n**Division Management:**\n- Header with inline edit for division name\n- Running total display with progress bar to master total\n- Priority filter chips (High/Mid/Low) with glow effect\n- Add/Delete item buttons with icon-only design\n\n### Data Visualization Components\n\n**Circular Progress Graphs (Donut Charts):**\n- SVG-based with gradient strokes (cyan to purple)\n- Center displays PKR amount in large monospace\n- Animated on data change with smooth transitions\n- Outer glow effect for active segments\n- Breakdown by: Total Budget, Priority Allocation, Division Distribution\n\n**Bar Charts:**\n- Horizontal bars for division comparisons\n- Vertical bars for priority breakdowns\n- Neon gradient fills (cyan to purple)\n- Hover reveals exact PKR values with tooltip\n- Background grid with subtle cyan lines\n\n**Summary Cards:**\n- Bordered cards with corner accent lights\n- Large numeric displays with PKR formatting\n- Small trend indicators (up/down arrows)\n- Categories: Total Project Cost, High Priority Cost, Item Count, Division Count\n\n### Tables & Lists\n\n**Item Data Table:**\n- Dark background with subtle row hover (purple glow)\n- Column headers with uppercase tracking-wider text\n- Alternating row opacity for readability\n- Editable cells with inline edit mode\n- Priority indicator column with colored dots (glowing)\n- Actions column: Edit/Delete icons with hover effects\n\n**Master Summary Table:**\n- Division-by-division breakdown\n- Sortable columns\n- Total row at bottom with emphasized styling\n- Export preview formatting\n\n### Interactive Elements\n\n**Buttons:**\n- Primary: Solid cyan background with white text, hover glow\n- Secondary: Outline cyan border, transparent background, hover fill\n- Danger: Red neon outline for delete actions\n- Icon buttons: Circular with centered icon, hover glow ring\n\n**Modals/Dialogs:**\n- Full-screen overlay with backdrop blur\n- Centered card with thick neon border\n- Close button with X icon in corner\n- Confirm/Cancel actions at bottom\n\n---\n\n## Animations & Interactions\n\n**Minimal Animation Strategy** (use sparingly):\n- Data update: Brief highlight flash (200ms) on changed values\n- Graph transitions: Smooth 300ms ease-in-out for value changes\n- Hover states: Subtle glow expansion (150ms)\n- Page transitions: 200ms fade\n- NO: Continuous animations, pulsing effects (except PKR total), complex scroll effects\n\n**Interaction Feedback:**\n- Button clicks: Brief scale down (95%) then return\n- Form focus: Border thickness increase with glow\n- Successful save: Green checkmark with fade out\n- Error states: Red border pulse (single pulse only)\n\n---\n\n## Special Features\n\n### Dynamic Infographics Panel\n\n**Real-time Update Behavior:**\n- All graphs re-render on ANY data change\n- Smooth transitions between states\n- Highlight changed segment briefly\n- Update counters animate from old to new value\n\n**Infographic Types:**\n1. **Budget Allocation Pie** - Shows division spending distribution\n2. **Priority Funnel** - Vertical bar showing High/Mid/Low breakdown\n3. **Progress Rings** - Concentric circles for completed vs. planned\n4. **Metric Cards** - 4 key numbers in glowing boxes\n\n### Export Preview\n\n**Modal Design:**\n- Shows exactly what will be exported\n- Format selector tabs (Excel/PDF/JPEG)\n- Preview rendering of graphs as they'll appear\n- Download button with format icon\n\n---\n\n## Accessibility & Usability\n\n**Contrast Requirements:**\n- All text: minimum 7:1 contrast ratio against dark backgrounds\n- Neon accents used for emphasis only, never for body text\n- Glow effects enhance but don't replace solid borders for critical UI\n\n**Keyboard Navigation:**\n- Tab order follows logical flow: Division sidebar → Main form → Infographics\n- Enter to submit, Escape to cancel\n- Arrow keys for table navigation\n\n**Data Validation:**\n- Real-time validation with inline error messages\n- Red neon glow on invalid fields\n- Tooltip explanations for unit types\n\n---\n\n## Images\n\n**No hero images required.** This is a data-focused application dashboard.\n\n**Icon Usage:**\n- Font Awesome 6 (via CDN) for all icons\n- Monochromatic icons with cyan color\n- Icon sizes: 16px (inline), 24px (buttons), 32px (featured)","size_bytes":7898},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4092},"client/src/components/DivisionSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Division, Item, InsertDivision } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Plus, Edit2, Trash2, FolderOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface DivisionSidebarProps {\n  projectId: string;\n  divisions: Division[];\n  items: Item[];\n  selectedDivisionId: string | null;\n  onSelectDivision: (id: string | null) => void;\n  isLoading: boolean;\n}\n\nexport function DivisionSidebar({\n  projectId,\n  divisions,\n  items,\n  selectedDivisionId,\n  onSelectDivision,\n  isLoading,\n}: DivisionSidebarProps) {\n  const [isAdding, setIsAdding] = useState(false);\n  const [newDivisionName, setNewDivisionName] = useState(\"\");\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editingName, setEditingName] = useState(\"\");\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertDivision) => {\n      return await apiRequest(\"POST\", \"/api/divisions\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/divisions')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setIsAdding(false);\n      setNewDivisionName(\"\");\n      toast({\n        title: \"Division created\",\n        description: \"New division has been added successfully.\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, name }: { id: string; name: string }) => {\n      return await apiRequest(\"PATCH\", `/api/divisions/${id}`, { name });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/divisions')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setEditingId(null);\n      toast({\n        title: \"Division updated\",\n        description: \"Division name has been changed successfully.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/divisions/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/divisions')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/items')\n      });\n      queryClient.invalidateQueries({ predicate: (query) => \n        query.queryKey[0]?.toString().startsWith('/api/summary')\n      });\n      setDeletingId(null);\n      if (selectedDivisionId === deletingId) {\n        onSelectDivision(null);\n      }\n      toast({\n        title: \"Division deleted\",\n        description: \"Division and all its items have been removed.\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (newDivisionName.trim()) {\n      createMutation.mutate({\n        projectId,\n        name: newDivisionName.trim(),\n        order: divisions.length,\n      });\n    }\n  };\n\n  const handleUpdate = (id: string) => {\n    if (editingName.trim()) {\n      updateMutation.mutate({ id, name: editingName.trim() });\n    }\n  };\n\n  const getDivisionTotal = (divisionId: string) => {\n    return items\n      .filter((item) => item.divisionId === divisionId)\n      .reduce((sum, item) => sum + Number(item.quantity) * Number(item.rate), 0);\n  };\n\n  const getDivisionItemCount = (divisionId: string) => {\n    return items.filter((item) => item.divisionId === divisionId).length;\n  };\n\n  return (\n    <div className=\"w-80 border-r border-border bg-card/30 backdrop-blur-sm flex flex-col\">\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"text-sm font-display font-semibold text-foreground uppercase tracking-wider\">\n            Divisions\n          </h2>\n          <Button\n            size=\"icon\"\n            variant=\"outline\"\n            onClick={() => setIsAdding(true)}\n            className=\"h-8 w-8 border-primary/50\"\n            data-testid=\"button-add-division\"\n          >\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {isAdding && (\n          <div className=\"flex gap-2 mb-3\">\n            <Input\n              placeholder=\"Division name\"\n              value={newDivisionName}\n              onChange={(e) => setNewDivisionName(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") handleCreate();\n                if (e.key === \"Escape\") {\n                  setIsAdding(false);\n                  setNewDivisionName(\"\");\n                }\n              }}\n              autoFocus\n              className=\"h-8 text-sm border-primary/50\"\n              data-testid=\"input-division-name\"\n            />\n            <Button\n              size=\"sm\"\n              onClick={handleCreate}\n              disabled={!newDivisionName.trim() || createMutation.isPending}\n              className=\"h-8\"\n              data-testid=\"button-create-division\"\n            >\n              Add\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div\n                key={i}\n                className=\"h-24 rounded-md bg-muted/20 animate-pulse\"\n              />\n            ))}\n          </div>\n        ) : divisions.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <FolderOpen className=\"w-12 h-12 mx-auto text-muted-foreground mb-3 opacity-50\" />\n            <p className=\"text-sm text-muted-foreground\">No divisions yet</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Click the + button to create one\n            </p>\n          </div>\n        ) : (\n          divisions.map((division) => (\n            <Card\n              key={division.id}\n              className={`p-4 cursor-pointer transition-all hover-elevate ${\n                selectedDivisionId === division.id\n                  ? \"border-primary bg-primary/10\"\n                  : \"border-border bg-card/50\"\n              }`}\n              onClick={() => onSelectDivision(division.id)}\n              data-testid={`card-division-${division.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-2\">\n                {editingId === division.id ? (\n                  <Input\n                    value={editingName}\n                    onChange={(e) => setEditingName(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") handleUpdate(division.id);\n                      if (e.key === \"Escape\") setEditingId(null);\n                    }}\n                    onClick={(e) => e.stopPropagation()}\n                    autoFocus\n                    className=\"h-7 text-sm\"\n                    data-testid={`input-edit-division-${division.id}`}\n                  />\n                ) : (\n                  <h3 className=\"font-display font-medium text-foreground text-sm\">\n                    {division.name}\n                  </h3>\n                )}\n                \n                <div className=\"flex gap-1\" onClick={(e) => e.stopPropagation()}>\n                  {editingId === division.id ? (\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      className=\"h-7 w-7\"\n                      onClick={() => handleUpdate(division.id)}\n                      disabled={updateMutation.isPending}\n                      data-testid={`button-save-division-${division.id}`}\n                    >\n                      <Plus className=\"w-3 h-3\" />\n                    </Button>\n                  ) : (\n                    <>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-7 w-7\"\n                        onClick={() => {\n                          setEditingId(division.id);\n                          setEditingName(division.name);\n                        }}\n                        data-testid={`button-edit-division-${division.id}`}\n                      >\n                        <Edit2 className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-7 w-7 text-destructive\"\n                        onClick={() => setDeletingId(division.id)}\n                        data-testid={`button-delete-division-${division.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"mt-3 grid grid-cols-2 gap-2\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Items\n                  </p>\n                  <p className=\"text-sm font-mono font-semibold text-foreground\">\n                    {getDivisionItemCount(division.id)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Total PKR\n                  </p>\n                  <p className=\"text-sm font-mono font-semibold text-primary\">\n                    {getDivisionTotal(division.id).toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                  </p>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n\n      <AlertDialog open={!!deletingId} onOpenChange={() => setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Division?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete this division and all its items. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingId && deleteMutation.mutate(deletingId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":11423},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"replit.md":{"content":"# ARKA Services Project Management\n\n## Overview\n\nARKA Services Project Management is a web application for architecture and interior design professionals. It enables managing multiple project budgets, tracking costs, and visualizing financial data with a futuristic cyberpunk-inspired UI. Key capabilities include creating unlimited projects with divisions and items, priority-based fund allocation, real-time analytics, and comprehensive export options (Excel, PDF, JPEG). All monetary values are handled in PKR. The project's ambition is to provide a robust, secure, and intuitive platform for financial project oversight in the design industry.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\nThe frontend uses React 18 with TypeScript and Vite. It features a dark-mode-first cyberpunk aesthetic with custom fonts (Orbitron, Rajdhani, Fira Code) and a specific color palette. UI components are built with Radix UI primitives and shadcn/ui, styled using Tailwind CSS and Class Variance Authority. Data visualization is handled by Recharts, providing interactive charts for cost distribution and priority breakdowns. Form management utilizes React Hook Form and Zod for validation. TanStack React Query manages server state and caching.\n\n### Backend Architecture\n\nThe backend is an Express.js application written in TypeScript, following a modular RESTful API design. It uses PostgreSQL via Drizzle ORM with DatabaseStorage implementation. The API supports CRUD operations for projects, divisions, and items, with endpoints for fetching summaries and generating exports. A robust multi-role security system is implemented with bcrypt hashing, `requireAuth` middleware, and comprehensive role-based access control (RBAC) covering data isolation for Principle, Employee, Client, and Procurement roles. Username authentication is case-insensitive for better user experience.\n\n### Data Model\n\nThe core data model includes `Project` (id, name), `Division` (projectId, name, order), and `Item` (divisionId, description, unit, quantity, rate, priority). Relationships are set up for cascade deletion.\n\n### Export Functionality\n\nThe application offers three professional export templates:\n- **Standard**: A cyberpunk-themed dashboard visualization (1920x1080).\n- **BOQ (Bill of Quantities)**: A clean, professional layout with division-wise tables and totals.\n- **Progress Report**: A comprehensive report including client info, timeline, overall progress, and division-wise progress bars.\nAll templates support JPEG, PDF, and Excel formats. Progress calculation is based on item status weights.\n\n## Recent Updates (October 2025)\n\n### Employee Management System\n- **Atomic Employee Creation**: New `/api/employees/create` endpoint creates both user account and employee profile in a single transaction with rollback support. This prevents orphaned user accounts if employee creation fails.\n- **Required Employee Fields**: Enhanced employee creation form with mandatory fields:\n  - ID Card Number\n  - WhatsApp Number\n  - Home Address\n  - Joining Date\n  - Profile Picture (file upload with preview, optional)\n- **Document Management**: Employees can view and download employment documents (Appointment Letter, Joining Letter, Resignation Letter) from their dashboard.\n- **Enhanced Salary Slips**: Professional PDF generation with ARKA branding, arka.pk website reference, and proper formatting with earnings, deductions, and net salary sections.\n- **Attendance Marking Fixed**: Employees can now successfully mark their own attendance (fixed authentication check bug)\n\n### Task Assignment System\n- **Principle Dashboard**: New \"Tasks\" tab allows principle to assign tasks to employees\n- **Task Types**: Design CAD, IFCs, 3D Rendering, Procurement, Site Visits\n- **Task Assignment**: Assign tasks with project, employee, task type, description, and due date\n- **Task Tracking**: View all tasks with status, assigned employee, project, and timeline\n- **Employee Dashboard**: Employees can view assigned tasks and update status (Undone, In Progress, Done)\n- **Task Statistics**: Dashboard shows total, completed, in-progress, and pending tasks\n\n### User Management System (Principle Dashboard)\n- **New \"Users\" Tab**: Comprehensive user management interface\n- **View All Users**: List of all system users with role and status indicators\n- **Edit User Accounts**: Principle can:\n  - Change username\n  - Update full name\n  - Reset passwords\n  - Activate/deactivate user accounts\n- **Role-Based Access**: Only principle can access user management features\n\n### Security & Data Integrity\n- Role-based access control ensures employees can only view their own documents\n- Form validation enforces all required fields before submission\n- Transaction-based employee creation prevents partial data states\n- Principle has full administrative access to all user accounts and system modules\n\n## External Dependencies\n\n**Database (Configured for future use):**\n- Neon Serverless PostgreSQL driver\n- Drizzle ORM\n\n**UI Component Libraries:**\n- Radix UI\n- Recharts\n- Embla Carousel\n- Lucide React (icons)\n\n**Form & Validation:**\n- React Hook Form\n- Zod\n- @hookform/resolvers\n\n**Utilities:**\n- clsx, tailwind-merge\n- date-fns\n- nanoid\n\n**Export Libraries:**\n- ExcelJS\n- jsPDF\n- html2canvas\n\n**Session Management:**\n- connect-pg-simple with PostgreSQL (production)\n- MemoryStore fallback (development only)\n\n## Deployment Configuration\n\n**Health Checks:**\n- Root `/` endpoint responds with 200 OK immediately for requests without cookies\n- Health check middleware placed before all other middleware (including session)\n- Optimized for deployment platform health checks (no blocking operations)\n- Normal browser requests with cookies proceed to full application\n\n**Session Store (Production):**\n- Uses connect-pg-simple with PostgreSQL for Autoscale deployments\n- Sessions persisted in database (works across multiple instances)\n- Auto-creates `session` table on first deployment\n- Falls back to MemoryStore in development\n\n**Database Seeding:**\n- **REMOVED from server startup** to prevent blocking health checks\n- Must be run manually as a one-time setup: `tsx server/seed.ts`\n- **IMPORTANT**: Run in workspace BEFORE publishing (no shell access in deployed apps)\n- Since dev and prod share the same database, seeding once persists to both environments\n- Existence checks prevent duplicate user errors\n- Default users created: \n  - ZARA (principle) - password: saroshahsanto\n  - procurement (procurement) - password: procurement123\n- Safe for production (idempotent - can be run multiple times)\n\n**Process Management:**\n- Server uses Promise chain pattern instead of async IIFE to prevent early exit\n- Server.listen() keeps Node.js process alive naturally\n- Error handling for server errors without terminating process\n- Stable process lifecycle for production deployments\n\n**Port Configuration (CRITICAL for Publishing):**\n- Application requires EXACTLY ONE external port for Autoscale deployments\n- Correct configuration: localPort 5000 → externalPort 80\n- Multiple external ports cause 5xx errors during deployment\n- If deployment fails with 5xx errors, verify .replit file has only one [[ports]] entry\n- See CHANGELOG.md for detailed port configuration fix instructions\n\n**Publishing Readiness:**\n- ✅ Build process verified and working\n- ✅ Health checks optimized\n- ✅ Session store configured for production\n- ✅ Database seeding is non-blocking\n- ✅ Application tested and working\n- ⚠️ Manual fix required: Edit .replit file to remove extra ports (see CHANGELOG.md)","size_bytes":7638},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ExportModal.tsx":{"content":"import { useState } from \"react\";\nimport { Division, Item, ProjectSummary, Project } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X, Download, FileSpreadsheet, FileText, Image as ImageIcon, Table2, FileBarChart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ExportDashboard } from \"./ExportDashboard\";\nimport { jsPDF } from \"jspdf\";\n\ninterface ExportModalProps {\n  onClose: () => void;\n  project: Project;\n  projectName: string;\n  divisions: Division[];\n  items: Item[];\n  summary: ProjectSummary | undefined;\n}\n\nexport type ExportTemplateType = \"standard\" | \"boq\" | \"progress-report\";\n\nexport function ExportModal({ onClose, project, projectName, divisions, items, summary }: ExportModalProps) {\n  const [exportFormat, setExportFormat] = useState<\"excel\" | \"pdf\" | \"jpeg\">(\"excel\");\n  const [exportTemplate, setExportTemplate] = useState<ExportTemplateType>(\"standard\");\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  if (!summary) {\n    return null;\n  }\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    \n    try {\n      if (exportFormat === \"jpeg\" || exportFormat === \"pdf\") {\n        const html2canvas = (await import(\"html2canvas\")).default;\n        const exportElement = document.getElementById(\"export-dashboard\");\n        \n        if (!exportElement) {\n          throw new Error(\"Export dashboard element not found\");\n        }\n\n        // Temporarily move the element into view for capture\n        exportElement.style.left = '0';\n        exportElement.style.top = '0';\n\n        const canvas = await html2canvas(exportElement, {\n          backgroundColor: null,\n          scale: 2,\n          logging: false,\n          width: 1920,\n          height: 1080,\n        });\n\n        // Move it back off-screen\n        exportElement.style.left = '-9999px';\n\n        if (exportFormat === \"jpeg\") {\n          canvas.toBlob((blob) => {\n            if (!blob) {\n              throw new Error(\"Failed to create image\");\n            }\n\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            const templateSuffix = exportTemplate === \"boq\" ? \"-boq\" : \n                                   exportTemplate === \"progress-report\" ? \"-progress-report\" : \"\";\n            a.download = `${projectName.toLowerCase().replace(/\\s+/g, '-')}${templateSuffix}-${new Date().toISOString().split('T')[0]}.jpg`;\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n            document.body.removeChild(a);\n\n            toast({\n              title: \"Export successful\",\n              description: \"Your JPEG file has been downloaded.\",\n            });\n\n            onClose();\n            setIsExporting(false);\n          }, \"image/jpeg\", 0.95);\n\n          return;\n        }\n\n        if (exportFormat === \"pdf\") {\n          // Create PDF with the canvas image\n          const imgData = canvas.toDataURL(\"image/jpeg\", 0.95);\n          const pdf = new jsPDF({\n            orientation: \"landscape\",\n            unit: \"px\",\n            format: [1920, 1080],\n          });\n\n          pdf.addImage(imgData, \"JPEG\", 0, 0, 1920, 1080);\n          const templateSuffix = exportTemplate === \"boq\" ? \"-boq\" : \n                                 exportTemplate === \"progress-report\" ? \"-progress-report\" : \"\";\n          pdf.save(`${projectName.toLowerCase().replace(/\\s+/g, '-')}${templateSuffix}-${new Date().toISOString().split('T')[0]}.pdf`);\n\n          toast({\n            title: \"Export successful\",\n            description: \"Your PDF file has been downloaded.\",\n          });\n\n          onClose();\n          setIsExporting(false);\n          return;\n        }\n      }\n\n      // Excel export - use API\n      const response = await fetch(`/api/export/${exportFormat}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ divisions, items, summary }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Export failed\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      \n      a.download = `${projectName.toLowerCase().replace(/\\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.xlsx`;\n      \n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Export successful\",\n        description: `Your ${exportFormat.toUpperCase()} file has been downloaded.`,\n      });\n\n      onClose();\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export failed\",\n        description: \"There was an error exporting your data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <>\n      {/* Hidden export dashboard for rendering */}\n      <ExportDashboard\n        project={project}\n        projectName={projectName}\n        divisions={divisions}\n        items={items}\n        summary={summary}\n        templateType={exportTemplate}\n      />\n      \n      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n        <Card className=\"w-full max-w-4xl max-h-[90vh] overflow-y-auto border-primary/30 bg-card\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border sticky top-0 bg-card z-10\">\n            <div>\n              <h2 className=\"text-2xl font-display font-bold text-foreground\">\n                Export Project Data\n              </h2>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Download your project in various formats\n              </p>\n            </div>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onClose}\n              data-testid=\"button-close-export\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {/* Export Template Selector */}\n            <div className=\"mb-6\">\n              <label className=\"text-sm font-semibold text-foreground mb-2 block\">\n                Export Template\n              </label>\n              <Select value={exportTemplate} onValueChange={(v) => setExportTemplate(v as ExportTemplateType)}>\n                <SelectTrigger className=\"w-full\" data-testid=\"select-template\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"standard\" data-testid=\"template-standard\">\n                    <div className=\"flex items-center gap-2\">\n                      <FileBarChart className=\"w-4 h-4\" />\n                      <span>Standard Dashboard - Charts & Summary</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"boq\" data-testid=\"template-boq\">\n                    <div className=\"flex items-center gap-2\">\n                      <Table2 className=\"w-4 h-4\" />\n                      <span>BOQ - Bill of Quantities</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"progress-report\" data-testid=\"template-progress\">\n                    <div className=\"flex items-center gap-2\">\n                      <FileText className=\"w-4 h-4\" />\n                      <span>Progress Report - Full Details</span>\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {exportTemplate === \"standard\" && \"Dashboard view with charts and metrics\"}\n                {exportTemplate === \"boq\" && \"Professional table showing all divisions, items, quantities, and costs\"}\n                {exportTemplate === \"progress-report\" && \"Comprehensive report with client info, progress tracking, and timeline\"}\n              </p>\n            </div>\n\n            <Tabs value={exportFormat} onValueChange={(v) => setExportFormat(v as any)}>\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"excel\" className=\"gap-2\" data-testid=\"tab-excel\">\n                  <FileSpreadsheet className=\"w-4 h-4\" />\n                  Excel\n                </TabsTrigger>\n                <TabsTrigger value=\"pdf\" className=\"gap-2\" data-testid=\"tab-pdf\">\n                  <FileText className=\"w-4 h-4\" />\n                  PDF\n                </TabsTrigger>\n                <TabsTrigger value=\"jpeg\" className=\"gap-2\" data-testid=\"tab-jpeg\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  JPEG\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"excel\" className=\"mt-6\">\n                <Card className=\"p-6 border-border bg-muted/30\">\n                  <div className=\"flex gap-4\">\n                    <div className=\"w-16 h-16 rounded-md bg-chart-5/20 border border-chart-5/50 flex items-center justify-center flex-shrink-0\">\n                      <FileSpreadsheet className=\"w-8 h-8 text-chart-5\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-display font-semibold text-foreground mb-2\">\n                        Excel Spreadsheet (.xlsx)\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Export all divisions, items, and summaries to an Excel file with multiple sheets. \n                        Includes all data fields, calculations, and priority information.\n                      </p>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>✓ Complete division and item data</li>\n                        <li>✓ Master summary with breakdowns</li>\n                        <li>✓ Priority-based funds allocation</li>\n                        <li>✓ Formatted for easy editing and sharing</li>\n                      </ul>\n                    </div>\n                  </div>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"pdf\" className=\"mt-6\">\n                <Card className=\"p-6 border-border bg-muted/30\">\n                  <div className=\"flex gap-4\">\n                    <div className=\"w-16 h-16 rounded-md bg-destructive/20 border border-destructive/50 flex items-center justify-center flex-shrink-0\">\n                      <FileText className=\"w-8 h-8 text-destructive\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-display font-semibold text-foreground mb-2\">\n                        PDF Document (.pdf)\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Generate a professional PDF report with {exportTemplate === \"progress-report\" ? \"client information, progress tracking, and\" : \"\"} \n                        {exportTemplate === \"boq\" ? \"complete bill of quantities\" : \"charts and visual summaries\"}.\n                        Perfect for presentations and client reports.\n                      </p>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>✓ Professional formatting</li>\n                        <li>✓ {exportTemplate === \"boq\" ? \"Detailed BOQ table\" : \"Includes all charts and graphs\"}</li>\n                        <li>✓ {exportTemplate === \"progress-report\" ? \"Client info and timeline\" : \"Priority breakdown visuals\"}</li>\n                        <li>✓ Ready for printing and sharing</li>\n                      </ul>\n                    </div>\n                  </div>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"jpeg\" className=\"mt-6\">\n                <Card className=\"p-6 border-border bg-muted/30\">\n                  <div className=\"flex gap-4\">\n                    <div className=\"w-16 h-16 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center flex-shrink-0\">\n                      <ImageIcon className=\"w-8 h-8 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-display font-semibold text-foreground mb-2\">\n                        Image Export (.jpg)\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Export the {exportTemplate === \"boq\" ? \"BOQ table\" : exportTemplate === \"progress-report\" ? \"progress report\" : \"dashboard view\"} as a high-quality JPEG image.\n                        Great for quick sharing via email or messaging apps.\n                      </p>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>✓ {exportTemplate === \"boq\" ? \"Professional BOQ table\" : exportTemplate === \"progress-report\" ? \"Full progress report\" : \"Dashboard snapshot with charts\"}</li>\n                        <li>✓ High resolution output (1920x1080)</li>\n                        <li>✓ Easy to share digitally</li>\n                        <li>✓ {exportTemplate === \"progress-report\" ? \"Includes client information\" : \"Includes visual summaries\"}</li>\n                      </ul>\n                    </div>\n                  </div>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n            {/* Summary Info */}\n            {summary && (\n              <Card className=\"mt-6 p-4 border-primary/30 bg-primary/5\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">\n                      Your export will include:\n                    </p>\n                    <p className=\"text-sm font-mono font-semibold text-foreground\">\n                      {summary.totalDivisions} divisions • {summary.totalItems} items • \n                      Total: {summary.totalCost.toLocaleString('en-PK')} PKR\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-end gap-3 p-6 border-t border-border sticky bottom-0 bg-card\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-export\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleExport}\n              disabled={isExporting}\n              data-testid=\"button-download\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isExporting ? \"Exporting...\" : `Download ${exportFormat.toUpperCase()}`}\n            </Button>\n          </div>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":15465},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&family=Rajdhani:wght@300;400;500;600;700&family=Fira+Code:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 15% 12%;\n\n  --card-border: 220 8% 90%;\n\n  --sidebar: 220 6% 94%;\n\n  --sidebar-foreground: 220 15% 12%;\n\n  --sidebar-border: 220 8% 88%;\n\n  --sidebar-primary: 180 100% 35%;\n\n  --sidebar-primary-foreground: 180 100% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 180 100% 50%;\n\n  --popover: 220 8% 92%;\n\n  --popover-foreground: 220 15% 12%;\n\n  --popover-border: 220 10% 86%;\n\n  --primary: 180 100% 35%;\n\n  --primary-foreground: 180 100% 98%;\n\n  --secondary: 220 12% 86%;\n\n  --secondary-foreground: 220 15% 18%;\n\n  --muted: 220 15% 90%;\n\n  --muted-foreground: 220 12% 35%;\n\n  --accent: 270 60% 88%;\n\n  --accent-foreground: 270 50% 25%;\n\n  --destructive: 0 85% 45%;\n\n  --destructive-foreground: 0 85% 98%;\n\n  --input: 220 15% 75%;\n  --ring: 180 100% 50%;\n  --chart-1: 180 100% 35%;\n  --chart-2: 270 80% 45%;\n  --chart-3: 160 90% 35%;\n  --chart-4: 30 100% 45%;\n  --chart-5: 140 60% 40%;\n\n  --font-sans: 'Rajdhani', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', 'Courier New', monospace;\n  --font-display: 'Orbitron', sans-serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 2px 4px -1px hsl(220 25% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 4px 6px -1px hsl(220 25% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 8px 10px -1px hsl(220 25% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 8%;\n\n  --foreground: 220 15% 92%;\n\n  --border: 220 30% 20%;\n\n  --card: 220 20% 12%;\n\n  --card-foreground: 220 15% 92%;\n\n  --card-border: 220 25% 16%;\n\n  --sidebar: 220 18% 10%;\n\n  --sidebar-foreground: 220 15% 92%;\n\n  --sidebar-border: 220 25% 14%;\n\n  --sidebar-primary: 180 100% 35%;\n\n  --sidebar-primary-foreground: 180 100% 98%;\n\n  --sidebar-accent: 220 15% 16%;\n\n  --sidebar-accent-foreground: 220 10% 85%;\n\n  --sidebar-ring: 180 100% 50%;\n\n  --popover: 220 22% 14%;\n\n  --popover-foreground: 220 15% 92%;\n\n  --popover-border: 220 28% 18%;\n\n  --primary: 180 100% 35%;\n\n  --primary-foreground: 180 100% 98%;\n\n  --secondary: 220 15% 18%;\n\n  --secondary-foreground: 220 10% 88%;\n\n  --muted: 220 18% 16%;\n\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 270 50% 20%;\n\n  --accent-foreground: 270 40% 85%;\n\n  --destructive: 0 85% 35%;\n\n  --destructive-foreground: 0 85% 98%;\n\n  --input: 220 30% 28%;\n  --ring: 180 100% 50%;\n  --chart-1: 180 100% 50%;\n  --chart-2: 270 80% 60%;\n  --chart-3: 160 90% 50%;\n  --chart-4: 30 100% 60%;\n  --chart-5: 140 60% 50%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 1px 2px -1px hsl(220 25% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 2px 4px -1px hsl(220 25% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 4px 6px -1px hsl(220 25% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00), 0px 8px 10px -1px hsl(220 25% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 25% 8% / 0.00);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-display);\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  .font-display {\n    font-family: var(--font-display);\n  }\n\n  .font-mono {\n    font-family: var(--font-mono);\n  }\n}","size_bytes":10073},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/MasterSummary.tsx":{"content":"import { Division, Item, ProjectSummary } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { FileText, TrendingUp, CheckCircle, Package, Layers, DollarSign } from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip, BarChart, Bar, XAxis, YAxis, CartesianGrid } from \"recharts\";\n\ninterface MasterSummaryProps {\n  summary: ProjectSummary | undefined;\n  divisions: Division[];\n  items: Item[];\n}\n\nconst STATUS_COLORS = {\n  \"Not Started\": \"#ef4444\",\n  \"Purchased\": \"#f59e0b\",\n  \"In Installation Phase\": \"#3b82f6\",\n  \"Installed\": \"#8b5cf6\",\n  \"Delivered\": \"#10b981\",\n};\n\nconst PRIORITY_COLORS = {\n  High: \"#ef4444\",\n  Mid: \"#f59e0b\",\n  Low: \"#10b981\",\n};\n\nexport function MasterSummary({ summary, divisions, items }: MasterSummaryProps) {\n  if (!summary) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <FileText className=\"w-16 h-16 mx-auto text-muted-foreground mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-display font-semibold text-foreground mb-2\">\n            Loading Summary\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Please wait while we calculate the project summary\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Prepare status distribution data\n  const statusData = summary.statusBreakdown.map(status => ({\n    name: status.status,\n    value: status.itemCount,\n    cost: status.cost,\n  }));\n\n  // Prepare priority distribution data for bar chart\n  const priorityData = summary.priorityBreakdown.map(priority => ({\n    name: priority.priority,\n    cost: priority.cost,\n    items: priority.itemCount,\n  }));\n\n  // Prepare division data for chart\n  const divisionChartData = summary.divisionBreakdown.slice(0, 8).map(div => ({\n    name: div.divisionName.length > 15 ? div.divisionName.substring(0, 15) + '...' : div.divisionName,\n    cost: div.totalCost,\n  }));\n\n  return (\n    <div className=\"flex-1 overflow-y-auto bg-background\">\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-4\">\n          <h1 className=\"text-3xl font-display font-bold text-foreground mb-1\">\n            Master Project Dashboard\n          </h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Complete overview with analytics and progress tracking\n          </p>\n        </div>\n\n        {/* Top Row - Key Metrics Grid */}\n        <div className=\"grid grid-cols-6 gap-4\">\n          {/* Overall Progress - Takes 2 columns */}\n          <Card className=\"col-span-2 p-6 border-primary/50 bg-gradient-to-br from-primary/20 to-transparent\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/30 flex items-center justify-center\">\n                <CheckCircle className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"text-sm font-display font-bold text-foreground uppercase tracking-wide\">\n                  Overall Progress\n                </h3>\n                <p className=\"text-xs text-muted-foreground\">\n                  Status-based completion\n                </p>\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <p className=\"text-5xl font-mono font-bold text-primary\" data-testid=\"text-overall-progress\">\n                {Math.round(summary.overallProgress)}%\n              </p>\n            </div>\n            <Progress value={summary.overallProgress} className=\"h-3\" />\n          </Card>\n\n          {/* Total Cost */}\n          <Card className=\"p-6 border-primary/30 bg-gradient-to-br from-primary/10 to-transparent\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <DollarSign className=\"w-5 h-5 text-primary\" />\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Total Cost\n              </p>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-primary mb-1\" data-testid=\"text-summary-total\">\n              {summary.totalCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">PKR</p>\n          </Card>\n\n          {/* Total Items */}\n          <Card className=\"p-6 border-accent/30 bg-gradient-to-br from-accent/10 to-transparent\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Package className=\"w-5 h-5 text-accent\" />\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Total Items\n              </p>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-accent mb-1\">\n              {summary.totalItems}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Items</p>\n          </Card>\n\n          {/* Total Divisions */}\n          <Card className=\"p-6 border-chart-3/30 bg-gradient-to-br from-chart-3/10 to-transparent\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Layers className=\"w-5 h-5 text-chart-3\" />\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Divisions\n              </p>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-chart-3 mb-1\">\n              {summary.totalDivisions}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Categories</p>\n          </Card>\n\n          {/* Average Cost */}\n          <Card className=\"p-6 border-purple-500/30 bg-gradient-to-br from-purple-500/10 to-transparent\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <TrendingUp className=\"w-5 h-5 text-purple-500\" />\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Avg Cost\n              </p>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-purple-500 mb-1\">\n              {summary.totalItems > 0 \n                ? Math.round(summary.totalCost / summary.totalItems).toLocaleString('en-PK', { maximumFractionDigits: 0 })\n                : '0'\n              }\n            </p>\n            <p className=\"text-xs text-muted-foreground\">PKR/Item</p>\n          </Card>\n        </div>\n\n        {/* Priority Breakdown Cards */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <Card className=\"p-5 border-destructive/30 bg-gradient-to-br from-destructive/10 to-transparent\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                High Priority\n              </p>\n              <div className=\"w-3 h-3 rounded-full bg-destructive\"></div>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-destructive mb-1\">\n              {summary.highPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {summary.totalCost > 0 ? Math.round((summary.highPriorityCost / summary.totalCost) * 100) : 0}% of total • {\n                summary.priorityBreakdown.find(p => p.priority === 'High')?.itemCount || 0\n              } items\n            </p>\n          </Card>\n\n          <Card className=\"p-5 border-chart-4/30 bg-gradient-to-br from-chart-4/10 to-transparent\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Mid Priority\n              </p>\n              <div className=\"w-3 h-3 rounded-full bg-chart-4\"></div>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-chart-4 mb-1\">\n              {summary.midPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {summary.totalCost > 0 ? Math.round((summary.midPriorityCost / summary.totalCost) * 100) : 0}% of total • {\n                summary.priorityBreakdown.find(p => p.priority === 'Mid')?.itemCount || 0\n              } items\n            </p>\n          </Card>\n\n          <Card className=\"p-5 border-chart-5/30 bg-gradient-to-br from-chart-5/10 to-transparent\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-xs text-muted-foreground uppercase tracking-wider font-semibold\">\n                Low Priority\n              </p>\n              <div className=\"w-3 h-3 rounded-full bg-chart-5\"></div>\n            </div>\n            <p className=\"text-3xl font-mono font-bold text-chart-5 mb-1\">\n              {summary.lowPriorityCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {summary.totalCost > 0 ? Math.round((summary.lowPriorityCost / summary.totalCost) * 100) : 0}% of total • {\n                summary.priorityBreakdown.find(p => p.priority === 'Low')?.itemCount || 0\n              } items\n            </p>\n          </Card>\n        </div>\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Status Distribution Pie Chart */}\n          <Card className=\"p-6 border-border\">\n            <h3 className=\"text-lg font-display font-bold text-foreground mb-1\">\n              Status Distribution\n            </h3>\n            <p className=\"text-xs text-muted-foreground mb-4\">\n              Items breakdown by completion status\n            </p>\n            <div className=\"h-[280px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={statusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => {\n                      const percentValue = Number.isFinite(percent) ? (percent * 100).toFixed(0) : '0';\n                      return `${name}: ${percentValue}%`;\n                    }}\n                    outerRadius={90}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {statusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={STATUS_COLORS[entry.name as keyof typeof STATUS_COLORS]} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    content={({ active, payload }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0].payload;\n                        return (\n                          <div className=\"bg-card border border-border p-3 rounded-md shadow-lg\">\n                            <p className=\"font-semibold text-foreground\">{data.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">Items: {data.value}</p>\n                            <p className=\"text-sm text-primary font-mono\">\n                              {data.cost.toLocaleString('en-PK')} PKR\n                            </p>\n                          </div>\n                        );\n                      }\n                      return null;\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Priority Cost Bar Chart */}\n          <Card className=\"p-6 border-border\">\n            <h3 className=\"text-lg font-display font-bold text-foreground mb-1\">\n              Priority Cost Analysis\n            </h3>\n            <p className=\"text-xs text-muted-foreground mb-4\">\n              Budget allocation by priority level\n            </p>\n            <div className=\"h-[280px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={priorityData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" opacity={0.2} />\n                  <XAxis \n                    dataKey=\"name\" \n                    stroke=\"#888\"\n                    style={{ fontSize: '12px' }}\n                  />\n                  <YAxis \n                    stroke=\"#888\"\n                    style={{ fontSize: '12px' }}\n                    tickFormatter={(value) => `${(value / 1000).toFixed(0)}K`}\n                  />\n                  <Tooltip\n                    content={({ active, payload }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0].payload;\n                        return (\n                          <div className=\"bg-card border border-border p-3 rounded-md shadow-lg\">\n                            <p className=\"font-semibold text-foreground\">{data.name} Priority</p>\n                            <p className=\"text-sm text-primary font-mono\">\n                              {data.cost.toLocaleString('en-PK')} PKR\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">{data.items} items</p>\n                          </div>\n                        );\n                      }\n                      return null;\n                    }}\n                  />\n                  <Bar dataKey=\"cost\" radius={[8, 8, 0, 0]}>\n                    {priorityData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={PRIORITY_COLORS[entry.name as keyof typeof PRIORITY_COLORS]} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </div>\n\n        {/* Division Cost Chart */}\n        {divisionChartData.length > 0 && (\n          <Card className=\"p-6 border-border\">\n            <h3 className=\"text-lg font-display font-bold text-foreground mb-1\">\n              Division Cost Breakdown\n            </h3>\n            <p className=\"text-xs text-muted-foreground mb-4\">\n              Cost distribution across divisions\n            </p>\n            <div className=\"h-[280px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={divisionChartData} layout=\"horizontal\">\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" opacity={0.2} />\n                  <XAxis \n                    type=\"number\"\n                    stroke=\"#888\"\n                    style={{ fontSize: '12px' }}\n                    tickFormatter={(value) => `${(value / 1000).toFixed(0)}K`}\n                  />\n                  <YAxis \n                    type=\"category\"\n                    dataKey=\"name\" \n                    stroke=\"#888\"\n                    style={{ fontSize: '11px' }}\n                    width={120}\n                  />\n                  <Tooltip\n                    content={({ active, payload }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0].payload;\n                        return (\n                          <div className=\"bg-card border border-border p-3 rounded-md shadow-lg\">\n                            <p className=\"font-semibold text-foreground\">{data.name}</p>\n                            <p className=\"text-sm text-primary font-mono\">\n                              {data.cost.toLocaleString('en-PK')} PKR\n                            </p>\n                          </div>\n                        );\n                      }\n                      return null;\n                    }}\n                  />\n                  <Bar dataKey=\"cost\" fill=\"#06b6d4\" radius={[0, 8, 8, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        )}\n\n        {/* Status Breakdown Table */}\n        <Card className=\"border-border\">\n          <div className=\"p-6 border-b border-border\">\n            <h2 className=\"text-xl font-display font-bold text-foreground\">\n              Status Breakdown\n            </h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Detailed view of items by completion status\n            </p>\n          </div>\n          \n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-border hover:bg-transparent\">\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                  Status\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  Items\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  Total Cost (PKR)\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  % of Total\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {summary.statusBreakdown.map((status) => (\n                <TableRow \n                  key={status.status} \n                  className=\"border-border hover-elevate\"\n                >\n                  <TableCell className=\"font-display font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: STATUS_COLORS[status.status as keyof typeof STATUS_COLORS] }}\n                      ></div>\n                      {status.status}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono\">\n                    {status.itemCount}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono font-semibold text-primary\">\n                    {status.cost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono text-muted-foreground\">\n                    {summary.totalCost > 0 ? Math.round((status.cost / summary.totalCost) * 100) : 0}%\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Card>\n\n        {/* Division Breakdown Table */}\n        <Card className=\"border-border\">\n          <div className=\"p-6 border-b border-border\">\n            <h2 className=\"text-xl font-display font-bold text-foreground\">\n              Division Breakdown\n            </h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Detailed cost analysis for each division\n            </p>\n          </div>\n          \n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-border hover:bg-transparent\">\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider\">\n                  Division Name\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  Items\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  Total Cost (PKR)\n                </TableHead>\n                <TableHead className=\"font-display font-semibold uppercase text-xs tracking-wider text-right\">\n                  % of Total\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {summary.divisionBreakdown.map((division, idx) => (\n                <TableRow \n                  key={division.divisionId} \n                  className=\"border-border hover-elevate\"\n                  data-testid={`row-summary-division-${idx}`}\n                >\n                  <TableCell className=\"font-display font-medium\">\n                    {division.divisionName}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono\">\n                    {division.itemCount}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono font-semibold text-primary\">\n                    {division.totalCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono text-muted-foreground\">\n                    {summary.totalCost > 0 ? Math.round((division.totalCost / summary.totalCost) * 100) : 0}%\n                  </TableCell>\n                </TableRow>\n              ))}\n              <TableRow className=\"border-t-2 border-primary/30 bg-primary/5 hover:bg-primary/5\">\n                <TableCell className=\"font-display font-bold\">\n                  TOTAL\n                </TableCell>\n                <TableCell className=\"text-right font-mono font-bold\">\n                  {summary.totalItems}\n                </TableCell>\n                <TableCell className=\"text-right font-mono font-bold text-primary text-lg\">\n                  {summary.totalCost.toLocaleString('en-PK', { maximumFractionDigits: 0 })}\n                </TableCell>\n                <TableCell className=\"text-right font-mono font-bold\">\n                  {summary.totalCost > 0 ? '100%' : '0%'}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21831},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/storage.ts":{"content":"import {\n  Project,\n  InsertProject,\n  UpdateProject,\n  Division,\n  InsertDivision,\n  UpdateDivision,\n  Item,\n  InsertItem,\n  UpdateItem,\n  ProjectSummary,\n  Priority,\n  ItemStatus,\n  User,\n  InsertUser,\n  Employee,\n  InsertEmployee,\n  Client,\n  InsertClient,\n  Task,\n  InsertTask,\n  ProcurementItem,\n  InsertProcurementItem,\n  Salary,\n  InsertSalary,\n  Attendance,\n  InsertAttendance,\n  EmployeeDocument,\n  ProjectAssignment,\n  InsertProjectAssignment,\n  Comment,\n  InsertComment,\n  ProjectFinancials,\n  InsertProjectFinancials,\n  projects,\n  divisions,\n  items,\n  users,\n  employees,\n  clients,\n  tasks,\n  procurementItems,\n  salaries,\n  attendance,\n  employeeDocuments,\n  projectAssignments,\n  comments,\n  projectFinancials,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, asc, inArray, and, gte, sql as sqlFunc } from \"drizzle-orm\";\n\nconst STATUS_WEIGHTS: Record<ItemStatus, number> = {\n  \"Not Started\": 0,\n  \"Purchased\": 25,\n  \"In Installation Phase\": 50,\n  \"Installed\": 75,\n  \"Delivered\": 100,\n};\n\nexport interface IStorage {\n  // Projects\n  getProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(project: UpdateProject): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Divisions\n  getDivisions(projectId?: string): Promise<Division[]>;\n  getDivision(id: string): Promise<Division | undefined>;\n  createDivision(division: InsertDivision): Promise<Division>;\n  updateDivision(division: UpdateDivision): Promise<Division | undefined>;\n  deleteDivision(id: string): Promise<boolean>;\n\n  // Items\n  getItems(projectId?: string): Promise<Item[]>;\n  getItem(id: string): Promise<Item | undefined>;\n  getItemsByDivision(divisionId: string): Promise<Item[]>;\n  createItem(item: InsertItem): Promise<Item>;\n  updateItem(item: UpdateItem): Promise<Item | undefined>;\n  deleteItem(id: string): Promise<boolean>;\n\n  // Summary\n  getProjectSummary(projectId?: string): Promise<ProjectSummary>;\n\n  // User Management\n  getUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Employee Management\n  getEmployees(): Promise<Employee[]>;\n  getEmployee(id: string): Promise<Employee | undefined>;\n  getEmployeeByUserId(userId: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined>;\n\n  // Client Management\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByUserId(userId: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: Partial<Client>): Promise<Client | undefined>;\n\n  // Task Management\n  getTasks(projectId?: string, employeeId?: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n\n  // Procurement\n  getProcurementItems(projectId: string): Promise<ProcurementItem[]>;\n  createProcurementItem(item: InsertProcurementItem): Promise<ProcurementItem>;\n  updateProcurementItem(id: string, updates: Partial<ProcurementItem>): Promise<ProcurementItem | undefined>;\n  deleteProcurementItem(id: string): Promise<boolean>;\n\n  // Salaries & Attendance\n  getSalaries(employeeId: string): Promise<Salary[]>;\n  createSalary(salary: InsertSalary): Promise<Salary>;\n  updateSalary(id: string, updates: Partial<Salary>): Promise<Salary | undefined>;\n  deleteSalary(id: string): Promise<boolean>;\n  getAttendance(employeeId: string, month?: string): Promise<Attendance[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined>;\n  deleteAttendance(id: string): Promise<boolean>;\n\n  // Employee Documents\n  getEmployeeDocuments(employeeId?: string): Promise<EmployeeDocument[]>;\n\n  // Project Assignments\n  getProjectAssignments(userId?: string, projectId?: string): Promise<ProjectAssignment[]>;\n  createProjectAssignment(assignment: InsertProjectAssignment): Promise<ProjectAssignment>;\n  deleteProjectAssignment(id: string): Promise<boolean>;\n\n  // Comments & Financials\n  getComments(projectId: string): Promise<Comment[]>;\n  getComment(id: string): Promise<Comment | undefined>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  deleteComment(id: string): Promise<boolean>;\n  getProjectFinancials(projectId: string): Promise<ProjectFinancials | undefined>;\n  createProjectFinancials(financials: InsertProjectFinancials): Promise<ProjectFinancials>;\n  updateProjectFinancials(projectId: string, updates: Partial<ProjectFinancials>): Promise<ProjectFinancials | undefined>;\n  deleteProjectFinancials(projectId: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Helper function to convert numeric values to strings for Drizzle numeric columns\n  private toNumericString(value: number | undefined): string | undefined {\n    if (value === undefined) return undefined;\n    return value.toString();\n  }\n\n  // Projects\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(asc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const result = await db.select().from(projects).where(eq(projects.id, id));\n    return result[0];\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const result = await db.insert(projects).values(insertProject).returning();\n    return result[0];\n  }\n\n  async updateProject(updateProject: UpdateProject): Promise<Project | undefined> {\n    const { id, ...updates } = updateProject;\n    const result = await db\n      .update(projects)\n      .set(updates)\n      .where(eq(projects.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Divisions\n  async getDivisions(projectId?: string): Promise<Division[]> {\n    if (projectId) {\n      return await db\n        .select()\n        .from(divisions)\n        .where(eq(divisions.projectId, projectId))\n        .orderBy(asc(divisions.order));\n    }\n    return await db.select().from(divisions).orderBy(asc(divisions.order));\n  }\n\n  async getDivision(id: string): Promise<Division | undefined> {\n    const result = await db.select().from(divisions).where(eq(divisions.id, id));\n    return result[0];\n  }\n\n  async createDivision(insertDivision: InsertDivision): Promise<Division> {\n    const result = await db.insert(divisions).values(insertDivision).returning();\n    return result[0];\n  }\n\n  async updateDivision(updateDivision: UpdateDivision): Promise<Division | undefined> {\n    const { id, ...updates } = updateDivision;\n    const result = await db\n      .update(divisions)\n      .set(updates)\n      .where(eq(divisions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteDivision(id: string): Promise<boolean> {\n    const result = await db.delete(divisions).where(eq(divisions.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Items\n  async getItems(projectId?: string): Promise<Item[]> {\n    if (projectId) {\n      const projectDivisions = await this.getDivisions(projectId);\n      const divisionIds = projectDivisions.map(d => d.id);\n      if (divisionIds.length === 0) return [];\n      return await db.select().from(items).where(inArray(items.divisionId, divisionIds));\n    }\n    return await db.select().from(items);\n  }\n\n  async getItem(id: string): Promise<Item | undefined> {\n    const result = await db.select().from(items).where(eq(items.id, id));\n    return result[0];\n  }\n\n  async getItemsByDivision(divisionId: string): Promise<Item[]> {\n    return await db.select().from(items).where(eq(items.divisionId, divisionId));\n  }\n\n  async createItem(insertItem: InsertItem): Promise<Item> {\n    const itemData: any = {\n      divisionId: insertItem.divisionId,\n      description: insertItem.description,\n      unit: insertItem.unit,\n      quantity: insertItem.quantity.toString(),\n      rate: insertItem.rate.toString(),\n      priority: insertItem.priority,\n      status: insertItem.status || \"Not Started\",\n    };\n    const result = await db.insert(items).values(itemData).returning();\n    return result[0];\n  }\n\n  async updateItem(updateItem: UpdateItem): Promise<Item | undefined> {\n    const { id, ...updates } = updateItem;\n    const convertedUpdates: any = { ...updates };\n    if (updates.quantity !== undefined) {\n      convertedUpdates.quantity = this.toNumericString(updates.quantity);\n    }\n    if (updates.rate !== undefined) {\n      convertedUpdates.rate = this.toNumericString(updates.rate);\n    }\n    const result = await db\n      .update(items)\n      .set(convertedUpdates)\n      .where(eq(items.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteItem(id: string): Promise<boolean> {\n    const result = await db.delete(items).where(eq(items.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Summary\n  async getProjectSummary(projectId?: string): Promise<ProjectSummary> {\n    const allDivisions = await this.getDivisions(projectId);\n    const allItems = await this.getItems(projectId);\n\n    const totalCost = allItems.reduce((sum, item) => sum + Number(item.quantity) * Number(item.rate), 0);\n    \n    const priorityCosts = {\n      High: 0,\n      Mid: 0,\n      Low: 0,\n    };\n\n    const priorityCounts = {\n      High: 0,\n      Mid: 0,\n      Low: 0,\n    };\n\n    const statusCosts: Record<ItemStatus, number> = {\n      \"Not Started\": 0,\n      \"Purchased\": 0,\n      \"In Installation Phase\": 0,\n      \"Installed\": 0,\n      \"Delivered\": 0,\n    };\n\n    const statusCounts: Record<ItemStatus, number> = {\n      \"Not Started\": 0,\n      \"Purchased\": 0,\n      \"In Installation Phase\": 0,\n      \"Installed\": 0,\n      \"Delivered\": 0,\n    };\n\n    let totalProgress = 0;\n\n    allItems.forEach((item) => {\n      const itemTotal = Number(item.quantity) * Number(item.rate);\n      priorityCosts[item.priority as Priority] += itemTotal;\n      priorityCounts[item.priority as Priority]++;\n\n      const itemStatus = item.status as ItemStatus;\n      statusCosts[itemStatus] += itemTotal;\n      statusCounts[itemStatus]++;\n      totalProgress += STATUS_WEIGHTS[itemStatus];\n    });\n\n    const overallProgress = allItems.length > 0 ? totalProgress / allItems.length : 0;\n\n    const divisionBreakdown = allDivisions.map((division) => {\n      const divisionItems = allItems.filter((item) => item.divisionId === division.id);\n      const totalCost = divisionItems.reduce(\n        (sum, item) => sum + Number(item.quantity) * Number(item.rate),\n        0\n      );\n\n      return {\n        divisionId: division.id,\n        divisionName: division.name,\n        totalCost,\n        itemCount: divisionItems.length,\n      };\n    });\n\n    const priorityBreakdown: { priority: Priority; cost: number; itemCount: number }[] = [\n      { priority: \"High\", cost: priorityCosts.High, itemCount: priorityCounts.High },\n      { priority: \"Mid\", cost: priorityCosts.Mid, itemCount: priorityCounts.Mid },\n      { priority: \"Low\", cost: priorityCosts.Low, itemCount: priorityCounts.Low },\n    ];\n\n    const statusBreakdown: { status: ItemStatus; itemCount: number; cost: number }[] = [\n      { status: \"Not Started\", itemCount: statusCounts[\"Not Started\"], cost: statusCosts[\"Not Started\"] },\n      { status: \"Purchased\", itemCount: statusCounts[\"Purchased\"], cost: statusCosts[\"Purchased\"] },\n      { status: \"In Installation Phase\", itemCount: statusCounts[\"In Installation Phase\"], cost: statusCosts[\"In Installation Phase\"] },\n      { status: \"Installed\", itemCount: statusCounts[\"Installed\"], cost: statusCosts[\"Installed\"] },\n      { status: \"Delivered\", itemCount: statusCounts[\"Delivered\"], cost: statusCosts[\"Delivered\"] },\n    ];\n\n    return {\n      totalCost,\n      highPriorityCost: priorityCosts.High,\n      midPriorityCost: priorityCosts.Mid,\n      lowPriorityCost: priorityCosts.Low,\n      totalItems: allItems.length,\n      totalDivisions: allDivisions.length,\n      overallProgress,\n      divisionBreakdown,\n      priorityBreakdown,\n      statusBreakdown,\n    };\n  }\n\n  // User Management\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.createdAt));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(sqlFunc`LOWER(${users.username}) = LOWER(${username})`);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Employee Management\n  async getEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees).orderBy(asc(employees.createdAt));\n  }\n\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const result = await db.select().from(employees).where(eq(employees.id, id));\n    return result[0];\n  }\n\n  async getEmployeeByUserId(userId: string): Promise<Employee | undefined> {\n    const result = await db.select().from(employees).where(eq(employees.userId, userId));\n    return result[0];\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const result = await db.insert(employees).values(insertEmployee).returning();\n    return result[0];\n  }\n\n  async updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined> {\n    const result = await db\n      .update(employees)\n      .set(updates)\n      .where(eq(employees.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Client Management\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(asc(clients.createdAt));\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const result = await db.select().from(clients).where(eq(clients.id, id));\n    return result[0];\n  }\n\n  async getClientByUserId(userId: string): Promise<Client | undefined> {\n    const result = await db.select().from(clients).where(eq(clients.userId, userId));\n    return result[0];\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const result = await db.insert(clients).values(insertClient).returning();\n    return result[0];\n  }\n\n  async updateClient(id: string, updates: Partial<Client>): Promise<Client | undefined> {\n    const result = await db\n      .update(clients)\n      .set(updates)\n      .where(eq(clients.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Task Management\n  async getTasks(projectId?: string, employeeId?: string): Promise<Task[]> {\n    if (projectId && employeeId) {\n      return await db\n        .select()\n        .from(tasks)\n        .where(and(eq(tasks.projectId, projectId), eq(tasks.employeeId, employeeId)))\n        .orderBy(asc(tasks.createdAt));\n    } else if (projectId) {\n      return await db\n        .select()\n        .from(tasks)\n        .where(eq(tasks.projectId, projectId))\n        .orderBy(asc(tasks.createdAt));\n    } else if (employeeId) {\n      return await db\n        .select()\n        .from(tasks)\n        .where(eq(tasks.employeeId, employeeId))\n        .orderBy(asc(tasks.createdAt));\n    }\n    return await db.select().from(tasks).orderBy(asc(tasks.createdAt));\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const result = await db.select().from(tasks).where(eq(tasks.id, id));\n    return result[0];\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const result = await db.insert(tasks).values(insertTask).returning();\n    return result[0];\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined> {\n    const result = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const result = await db.delete(tasks).where(eq(tasks.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Procurement\n  async getProcurementItems(projectId: string): Promise<ProcurementItem[]> {\n    return await db\n      .select()\n      .from(procurementItems)\n      .where(eq(procurementItems.projectId, projectId))\n      .orderBy(asc(procurementItems.createdAt));\n  }\n\n  async createProcurementItem(insertItem: InsertProcurementItem): Promise<ProcurementItem> {\n    const procurementData: any = {\n      projectId: insertItem.projectId,\n      itemName: insertItem.itemName,\n      projectCost: insertItem.projectCost.toString(),\n      executionCost: insertItem.executionCost !== undefined ? insertItem.executionCost.toString() : undefined,\n      isPurchased: insertItem.isPurchased,\n      billNumber: insertItem.billNumber,\n      rentalDetails: insertItem.rentalDetails,\n      quantity: insertItem.quantity.toString(),\n      unit: insertItem.unit,\n      notes: insertItem.notes,\n      purchasedBy: insertItem.purchasedBy,\n      purchasedDate: insertItem.purchasedDate,\n    };\n    const result = await db.insert(procurementItems).values(procurementData).returning();\n    return result[0];\n  }\n\n  async updateProcurementItem(id: string, updates: Partial<ProcurementItem>): Promise<ProcurementItem | undefined> {\n    const convertedUpdates: any = { ...updates };\n    if (updates.quantity !== undefined) {\n      convertedUpdates.quantity = this.toNumericString(Number(updates.quantity));\n    }\n    if (updates.projectCost !== undefined) {\n      convertedUpdates.projectCost = this.toNumericString(Number(updates.projectCost));\n    }\n    if (updates.executionCost !== undefined) {\n      convertedUpdates.executionCost = this.toNumericString(Number(updates.executionCost));\n    }\n    const result = await db\n      .update(procurementItems)\n      .set(convertedUpdates)\n      .where(eq(procurementItems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProcurementItem(id: string): Promise<boolean> {\n    const result = await db.delete(procurementItems).where(eq(procurementItems.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Salaries & Attendance\n  async getSalaries(employeeId: string): Promise<Salary[]> {\n    return await db\n      .select()\n      .from(salaries)\n      .where(eq(salaries.employeeId, employeeId))\n      .orderBy(asc(salaries.month));\n  }\n\n  async createSalary(insertSalary: InsertSalary): Promise<Salary> {\n    const salaryData: any = {\n      employeeId: insertSalary.employeeId,\n      month: insertSalary.month,\n      basicSalary: insertSalary.basicSalary.toString(),\n      incentives: insertSalary.incentives !== undefined ? insertSalary.incentives.toString() : \"0\",\n      medical: insertSalary.medical !== undefined ? insertSalary.medical.toString() : \"0\",\n      tax: insertSalary.tax !== undefined ? insertSalary.tax.toString() : \"0\",\n      deductions: insertSalary.deductions !== undefined ? insertSalary.deductions.toString() : \"0\",\n      netSalary: insertSalary.netSalary.toString(),\n      isPaid: insertSalary.isPaid,\n      paidDate: insertSalary.paidDate,\n    };\n    const result = await db.insert(salaries).values(salaryData).returning();\n    return result[0];\n  }\n\n  async updateSalary(id: string, updates: Partial<Salary>): Promise<Salary | undefined> {\n    const convertedUpdates: any = { ...updates };\n    if (updates.basicSalary !== undefined) {\n      convertedUpdates.basicSalary = this.toNumericString(Number(updates.basicSalary));\n    }\n    if (updates.incentives !== undefined) {\n      convertedUpdates.incentives = this.toNumericString(Number(updates.incentives));\n    }\n    if (updates.medical !== undefined) {\n      convertedUpdates.medical = this.toNumericString(Number(updates.medical));\n    }\n    if (updates.tax !== undefined) {\n      convertedUpdates.tax = this.toNumericString(Number(updates.tax));\n    }\n    if (updates.deductions !== undefined) {\n      convertedUpdates.deductions = this.toNumericString(Number(updates.deductions));\n    }\n    if (updates.netSalary !== undefined) {\n      convertedUpdates.netSalary = this.toNumericString(Number(updates.netSalary));\n    }\n    const result = await db\n      .update(salaries)\n      .set(convertedUpdates)\n      .where(eq(salaries.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSalary(id: string): Promise<boolean> {\n    const result = await db.delete(salaries).where(eq(salaries.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async getAttendance(employeeId: string, month?: string): Promise<Attendance[]> {\n    if (month) {\n      // Filter attendance records for a specific month (YYYY-MM format)\n      const startDate = new Date(`${month}-01`);\n      const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);\n      \n      return await db\n        .select()\n        .from(attendance)\n        .where(\n          and(\n            eq(attendance.employeeId, employeeId),\n            gte(attendance.attendanceDate, startDate)\n          )\n        )\n        .orderBy(asc(attendance.attendanceDate));\n    }\n    return await db\n      .select()\n      .from(attendance)\n      .where(eq(attendance.employeeId, employeeId))\n      .orderBy(asc(attendance.attendanceDate));\n  }\n\n  async createAttendance(insertAttendance: InsertAttendance): Promise<Attendance> {\n    const result = await db.insert(attendance).values(insertAttendance).returning();\n    return result[0];\n  }\n\n  async updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined> {\n    const result = await db\n      .update(attendance)\n      .set(updates)\n      .where(eq(attendance.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAttendance(id: string): Promise<boolean> {\n    const result = await db.delete(attendance).where(eq(attendance.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Employee Documents\n  async getEmployeeDocuments(employeeId?: string): Promise<EmployeeDocument[]> {\n    if (employeeId) {\n      return await db\n        .select()\n        .from(employeeDocuments)\n        .where(eq(employeeDocuments.employeeId, employeeId))\n        .orderBy(asc(employeeDocuments.createdAt));\n    }\n    return await db\n      .select()\n      .from(employeeDocuments)\n      .orderBy(asc(employeeDocuments.createdAt));\n  }\n\n  // Project Assignments\n  async getProjectAssignments(userId?: string, projectId?: string): Promise<ProjectAssignment[]> {\n    if (userId && projectId) {\n      return await db\n        .select()\n        .from(projectAssignments)\n        .where(and(eq(projectAssignments.userId, userId), eq(projectAssignments.projectId, projectId)))\n        .orderBy(asc(projectAssignments.createdAt));\n    } else if (userId) {\n      return await db\n        .select()\n        .from(projectAssignments)\n        .where(eq(projectAssignments.userId, userId))\n        .orderBy(asc(projectAssignments.createdAt));\n    } else if (projectId) {\n      return await db\n        .select()\n        .from(projectAssignments)\n        .where(eq(projectAssignments.projectId, projectId))\n        .orderBy(asc(projectAssignments.createdAt));\n    }\n    return await db.select().from(projectAssignments).orderBy(asc(projectAssignments.createdAt));\n  }\n\n  async createProjectAssignment(insertAssignment: InsertProjectAssignment): Promise<ProjectAssignment> {\n    const result = await db.insert(projectAssignments).values(insertAssignment).returning();\n    return result[0];\n  }\n\n  async deleteProjectAssignment(id: string): Promise<boolean> {\n    const result = await db.delete(projectAssignments).where(eq(projectAssignments.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Comments & Financials\n  async getComments(projectId: string): Promise<Comment[]> {\n    return await db\n      .select()\n      .from(comments)\n      .where(eq(comments.projectId, projectId))\n      .orderBy(asc(comments.createdAt));\n  }\n\n  async createComment(insertComment: InsertComment): Promise<Comment> {\n    const result = await db.insert(comments).values(insertComment).returning();\n    return result[0];\n  }\n\n  async getComment(id: string): Promise<Comment | undefined> {\n    const result = await db.select().from(comments).where(eq(comments.id, id));\n    return result[0];\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    const result = await db.delete(comments).where(eq(comments.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async getProjectFinancials(projectId: string): Promise<ProjectFinancials | undefined> {\n    const result = await db\n      .select()\n      .from(projectFinancials)\n      .where(eq(projectFinancials.projectId, projectId));\n    return result[0];\n  }\n\n  async createProjectFinancials(insertFinancials: InsertProjectFinancials): Promise<ProjectFinancials> {\n    const financialsData: any = {\n      projectId: insertFinancials.projectId,\n      contractValue: insertFinancials.contractValue.toString(),\n      amountReceived: insertFinancials.amountReceived !== undefined ? insertFinancials.amountReceived.toString() : \"0\",\n      workCompleted: insertFinancials.workCompleted !== undefined ? insertFinancials.workCompleted.toString() : \"0\",\n      isArchived: insertFinancials.isArchived,\n      archivedDate: insertFinancials.archivedDate,\n    };\n    const result = await db.insert(projectFinancials).values(financialsData).returning();\n    return result[0];\n  }\n\n  async updateProjectFinancials(projectId: string, updates: Partial<ProjectFinancials>): Promise<ProjectFinancials | undefined> {\n    const convertedUpdates: any = { ...updates, updatedAt: new Date() };\n    if (updates.contractValue !== undefined) {\n      convertedUpdates.contractValue = this.toNumericString(Number(updates.contractValue));\n    }\n    if (updates.amountReceived !== undefined) {\n      convertedUpdates.amountReceived = this.toNumericString(Number(updates.amountReceived));\n    }\n    if (updates.workCompleted !== undefined) {\n      convertedUpdates.workCompleted = this.toNumericString(Number(updates.workCompleted));\n    }\n    const result = await db\n      .update(projectFinancials)\n      .set(convertedUpdates)\n      .where(eq(projectFinancials.projectId, projectId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProjectFinancials(projectId: string): Promise<boolean> {\n    const result = await db.delete(projectFinancials).where(eq(projectFinancials.projectId, projectId)).returning();\n    return result.length > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":27534},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { login } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: login,\n    onSuccess: (user) => {\n      setLocation(\"/\");\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-display font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent mb-2\" data-testid=\"text-branding-title\">\n            ARKA SERVICES\n          </h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-branding-domain\">\n            arka.pk\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-login-title\">Login</CardTitle>\n            <CardDescription data-testid=\"text-login-description\">\n              Enter your credentials to access the system\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {loginMutation.isError && (\n                <Alert variant=\"destructive\" data-testid=\"alert-login-error\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription data-testid=\"text-error-message\">\n                    {loginMutation.error instanceof Error\n                      ? loginMutation.error.message\n                      : \"Invalid username or password\"}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" data-testid=\"label-username\">\n                  Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  required\n                  autoComplete=\"username\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"input-username\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" data-testid=\"label-password\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  autoComplete=\"current-password\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground mt-6\" data-testid=\"text-footer\">\n          Project Management System\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4111},"client/src/components/ExportDashboard.tsx":{"content":"import { Division, Item, ProjectSummary, Project } from \"@shared/schema\";\nimport { BarChart3, Building2, TrendingUp, CheckCircle, Calendar } from \"lucide-react\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport type { ExportTemplateType } from \"./ExportModal\";\n\ninterface ExportDashboardProps {\n  project: Project;\n  projectName: string;\n  divisions: Division[];\n  items: Item[];\n  summary: ProjectSummary;\n  templateType: ExportTemplateType;\n}\n\nexport function ExportDashboard({ project, projectName, divisions, items, summary, templateType }: ExportDashboardProps) {\n  const priorityData = [\n    { name: \"High Priority\", value: Number(summary.highPriorityCost), color: \"#ff3366\" },\n    { name: \"Mid Priority\", value: Number(summary.midPriorityCost), color: \"#ffaa00\" },\n    { name: \"Low Priority\", value: Number(summary.lowPriorityCost), color: \"#00ff88\" },\n  ].filter(item => item.value > 0);\n\n  const divisionData = summary.divisionBreakdown.map(div => ({\n    name: div.divisionName.length > 15 ? div.divisionName.substring(0, 15) + '...' : div.divisionName,\n    cost: Number(div.totalCost),\n  }));\n\n  const formatCurrency = (value: number) => {\n    return `${value.toLocaleString('en-PK')} PKR`;\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });\n  };\n\n  const calculateProgress = () => {\n    if (items.length === 0) return 0;\n    const statusWeights = {\n      'Not Started': 0,\n      'Purchased': 25,\n      'In Installation Phase': 50,\n      'Installed': 75,\n      'Delivered': 100\n    };\n    const totalProgress = items.reduce((sum, item) => {\n      return sum + (statusWeights[item.status as keyof typeof statusWeights] || 0);\n    }, 0);\n    return Math.round(totalProgress / items.length);\n  };\n\n  // BOQ Template (Bill of Quantities)\n  if (templateType === 'boq') {\n    return (\n      <div \n        id=\"export-dashboard\" \n        style={{\n          width: '1920px',\n          minHeight: '1080px',\n          background: '#ffffff',\n          padding: '60px',\n          fontFamily: 'Arial, sans-serif',\n          color: '#000000',\n          position: 'absolute',\n          left: '-9999px',\n          top: '0',\n        }}\n      >\n        {/* Header */}\n        <div style={{ borderBottom: '4px solid #2c3e50', paddingBottom: '20px', marginBottom: '40px' }}>\n          <h1 style={{ fontSize: '42px', fontWeight: 'bold', margin: 0, marginBottom: '10px', color: '#2c3e50' }}>\n            BILL OF QUANTITIES\n          </h1>\n          <div style={{ fontSize: '24px', color: '#555', marginBottom: '10px' }}>{projectName}</div>\n          {project.clientName && (\n            <div style={{ fontSize: '18px', color: '#777' }}>Client: {project.clientName}</div>\n          )}\n          <div style={{ fontSize: '16px', color: '#999', marginTop: '10px' }}>\n            Generated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n          </div>\n        </div>\n\n        {/* Summary Section */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '1fr 1fr 1fr 1fr', \n          gap: '20px', \n          marginBottom: '40px',\n          padding: '30px',\n          background: '#f8f9fa',\n          borderRadius: '8px'\n        }}>\n          <div>\n            <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Total Cost</div>\n            <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#2c3e50' }}>\n              {formatCurrency(Number(summary.totalCost))}\n            </div>\n          </div>\n          <div>\n            <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>High Priority</div>\n            <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#e74c3c' }}>\n              {formatCurrency(Number(summary.highPriorityCost))}\n            </div>\n          </div>\n          <div>\n            <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Mid Priority</div>\n            <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#f39c12' }}>\n              {formatCurrency(Number(summary.midPriorityCost))}\n            </div>\n          </div>\n          <div>\n            <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Low Priority</div>\n            <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#27ae60' }}>\n              {formatCurrency(Number(summary.lowPriorityCost))}\n            </div>\n          </div>\n        </div>\n\n        {/* BOQ Table */}\n        {divisions.map(division => {\n          const divisionItems = items.filter(item => item.divisionId === division.id);\n          if (divisionItems.length === 0) return null;\n\n          return (\n            <div key={division.id} style={{ marginBottom: '50px' }}>\n              <h2 style={{ \n                fontSize: '28px', \n                fontWeight: 'bold', \n                marginBottom: '20px',\n                color: '#2c3e50',\n                borderBottom: '2px solid #3498db',\n                paddingBottom: '10px'\n              }}>\n                {division.name}\n              </h2>\n              <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '20px' }}>\n                <thead>\n                  <tr style={{ background: '#34495e', color: '#fff' }}>\n                    <th style={{ padding: '15px', textAlign: 'left', fontSize: '16px', width: '5%' }}>#</th>\n                    <th style={{ padding: '15px', textAlign: 'left', fontSize: '16px', width: '35%' }}>Description</th>\n                    <th style={{ padding: '15px', textAlign: 'center', fontSize: '16px', width: '10%' }}>Unit</th>\n                    <th style={{ padding: '15px', textAlign: 'right', fontSize: '16px', width: '12%' }}>Quantity</th>\n                    <th style={{ padding: '15px', textAlign: 'right', fontSize: '16px', width: '15%' }}>Rate (PKR)</th>\n                    <th style={{ padding: '15px', textAlign: 'center', fontSize: '16px', width: '10%' }}>Priority</th>\n                    <th style={{ padding: '15px', textAlign: 'right', fontSize: '16px', width: '18%' }}>Amount (PKR)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {divisionItems.map((item, index) => (\n                    <tr key={item.id} style={{ borderBottom: '1px solid #ddd' }}>\n                      <td style={{ padding: '12px', fontSize: '14px' }}>{index + 1}</td>\n                      <td style={{ padding: '12px', fontSize: '14px' }}>{item.description}</td>\n                      <td style={{ padding: '12px', fontSize: '14px', textAlign: 'center' }}>{item.unit}</td>\n                      <td style={{ padding: '12px', fontSize: '14px', textAlign: 'right' }}>{Number(item.quantity).toLocaleString('en-PK')}</td>\n                      <td style={{ padding: '12px', fontSize: '14px', textAlign: 'right' }}>{Number(item.rate).toLocaleString('en-PK')}</td>\n                      <td style={{ padding: '12px', fontSize: '14px', textAlign: 'center' }}>\n                        <span style={{\n                          padding: '4px 12px',\n                          borderRadius: '4px',\n                          fontSize: '12px',\n                          fontWeight: 'bold',\n                          background: item.priority === 'High' ? '#e74c3c' : item.priority === 'Mid' ? '#f39c12' : '#27ae60',\n                          color: '#fff'\n                        }}>\n                          {item.priority}\n                        </span>\n                      </td>\n                      <td style={{ padding: '12px', fontSize: '14px', textAlign: 'right', fontWeight: 'bold' }}>\n                        {(Number(item.quantity) * Number(item.rate)).toLocaleString('en-PK')}\n                      </td>\n                    </tr>\n                  ))}\n                  <tr style={{ background: '#ecf0f1', fontWeight: 'bold' }}>\n                    <td colSpan={6} style={{ padding: '15px', fontSize: '16px', textAlign: 'right' }}>\n                      {division.name} Subtotal:\n                    </td>\n                    <td style={{ padding: '15px', fontSize: '16px', textAlign: 'right' }}>\n                      {divisionItems.reduce((sum, item) => sum + (Number(item.quantity) * Number(item.rate)), 0).toLocaleString('en-PK')}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          );\n        })}\n\n        {/* Grand Total */}\n        <div style={{\n          marginTop: '40px',\n          padding: '25px',\n          background: '#2c3e50',\n          color: '#fff',\n          borderRadius: '8px',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        }}>\n          <div style={{ fontSize: '28px', fontWeight: 'bold' }}>GRAND TOTAL</div>\n          <div style={{ fontSize: '36px', fontWeight: 'bold' }}>{formatCurrency(Number(summary.totalCost))}</div>\n        </div>\n\n        {/* Footer */}\n        <div style={{ \n          marginTop: '60px', \n          paddingTop: '20px', \n          borderTop: '2px solid #ddd', \n          textAlign: 'center',\n          fontSize: '12px',\n          color: '#999'\n        }}>\n          <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>ARKA SERVICES</div>\n          <div>Professional Architecture & Interior Design Budget Management</div>\n          <div style={{ marginTop: '8px' }}>\n            <a href=\"https://arka.pk\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#2c3e50', fontWeight: 'bold', textDecoration: 'none', fontSize: '14px' }}>arka.pk</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Progress Report Template\n  if (templateType === 'progress-report') {\n    const progress = calculateProgress();\n    const statusCounts = items.reduce((acc, item) => {\n      acc[item.status] = (acc[item.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return (\n      <div \n        id=\"export-dashboard\" \n        style={{\n          width: '1920px',\n          minHeight: '1080px',\n          background: '#ffffff',\n          padding: '60px',\n          fontFamily: 'Arial, sans-serif',\n          color: '#000000',\n          position: 'absolute',\n          left: '-9999px',\n          top: '0',\n        }}\n      >\n        {/* Header */}\n        <div style={{ borderBottom: '4px solid #3498db', paddingBottom: '20px', marginBottom: '40px' }}>\n          <h1 style={{ fontSize: '42px', fontWeight: 'bold', margin: 0, marginBottom: '10px', color: '#2c3e50' }}>\n            PROJECT PROGRESS REPORT\n          </h1>\n          <div style={{ fontSize: '24px', color: '#555', marginBottom: '10px' }}>{projectName}</div>\n          {project.projectTitle && (\n            <div style={{ fontSize: '18px', color: '#777', marginBottom: '5px' }}>Title: {project.projectTitle}</div>\n          )}\n          {project.clientName && (\n            <div style={{ fontSize: '18px', color: '#777' }}>Client: {project.clientName}</div>\n          )}\n          <div style={{ fontSize: '16px', color: '#999', marginTop: '10px' }}>\n            Report Generated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n          </div>\n        </div>\n\n        {/* Timeline Section */}\n        {(project.startDate || project.deliveryDate) && (\n          <div style={{ marginBottom: '40px', padding: '30px', background: '#f8f9fa', borderRadius: '8px' }}>\n            <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px', color: '#2c3e50' }}>\n              Project Timeline\n            </h2>\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>\n              {project.startDate && (\n                <div>\n                  <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Start Date</div>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#2c3e50' }}>\n                    {formatDate(project.startDate)}\n                  </div>\n                </div>\n              )}\n              {project.deliveryDate && (\n                <div>\n                  <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Expected Delivery</div>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#2c3e50' }}>\n                    {formatDate(project.deliveryDate)}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Overall Progress */}\n        <div style={{ marginBottom: '40px', padding: '30px', background: '#ecf0f1', borderRadius: '8px' }}>\n          <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px', color: '#2c3e50' }}>\n            Overall Progress\n          </h2>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '30px' }}>\n            <div style={{\n              width: '200px',\n              height: '200px',\n              borderRadius: '50%',\n              background: `conic-gradient(#3498db ${progress * 3.6}deg, #ddd ${progress * 3.6}deg)`,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              position: 'relative'\n            }}>\n              <div style={{\n                width: '160px',\n                height: '160px',\n                borderRadius: '50%',\n                background: '#fff',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '48px',\n                fontWeight: 'bold',\n                color: '#2c3e50'\n              }}>\n                {progress}%\n              </div>\n            </div>\n            <div style={{ flex: 1 }}>\n              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n                {Object.entries(statusCounts).map(([status, count]) => (\n                  <div key={status} style={{ padding: '15px', background: '#fff', borderRadius: '8px' }}>\n                    <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>{status}</div>\n                    <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#2c3e50' }}>{count} items</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Financial Summary */}\n        <div style={{ marginBottom: '40px', padding: '30px', background: '#f8f9fa', borderRadius: '8px' }}>\n          <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px', color: '#2c3e50' }}>\n            Financial Summary\n          </h2>\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: '20px' }}>\n            <div>\n              <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Total Budget</div>\n              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#2c3e50' }}>\n                {formatCurrency(Number(summary.totalCost))}\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>High Priority</div>\n              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#e74c3c' }}>\n                {formatCurrency(Number(summary.highPriorityCost))}\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Mid Priority</div>\n              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#f39c12' }}>\n                {formatCurrency(Number(summary.midPriorityCost))}\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '14px', color: '#666', marginBottom: '5px' }}>Low Priority</div>\n              <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#27ae60' }}>\n                {formatCurrency(Number(summary.lowPriorityCost))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Division Breakdown */}\n        <div style={{ marginBottom: '40px' }}>\n          <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px', color: '#2c3e50' }}>\n            Division-wise Progress\n          </h2>\n          {divisions.map(division => {\n            const divisionItems = items.filter(item => item.divisionId === division.id);\n            if (divisionItems.length === 0) return null;\n\n            const divisionProgress = divisionItems.length > 0 \n              ? Math.round(divisionItems.reduce((sum, item) => {\n                  const statusWeights = {\n                    'Not Started': 0, 'Purchased': 25, 'In Installation Phase': 50, 'Installed': 75, 'Delivered': 100\n                  };\n                  return sum + (statusWeights[item.status as keyof typeof statusWeights] || 0);\n                }, 0) / divisionItems.length)\n              : 0;\n\n            return (\n              <div key={division.id} style={{ \n                marginBottom: '25px', \n                padding: '20px', \n                background: '#f8f9fa', \n                borderRadius: '8px',\n                borderLeft: '5px solid #3498db'\n              }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>\n                  <h3 style={{ fontSize: '20px', fontWeight: 'bold', margin: 0, color: '#2c3e50' }}>\n                    {division.name}\n                  </h3>\n                  <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#3498db' }}>\n                    {divisionProgress}%\n                  </div>\n                </div>\n                <div style={{ \n                  height: '30px', \n                  background: '#ddd', \n                  borderRadius: '15px', \n                  overflow: 'hidden',\n                  marginBottom: '10px'\n                }}>\n                  <div style={{\n                    height: '100%',\n                    width: `${divisionProgress}%`,\n                    background: 'linear-gradient(90deg, #3498db 0%, #2ecc71 100%)',\n                    transition: 'width 0.3s ease'\n                  }} />\n                </div>\n                <div style={{ fontSize: '14px', color: '#666' }}>\n                  {divisionItems.length} items • Total: {formatCurrency(divisionItems.reduce((sum, item) => \n                    sum + (Number(item.quantity) * Number(item.rate)), 0))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Footer */}\n        <div style={{ \n          marginTop: '60px', \n          paddingTop: '20px', \n          borderTop: '2px solid #ddd', \n          textAlign: 'center',\n          fontSize: '12px',\n          color: '#999'\n        }}>\n          <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>ARKA SERVICES</div>\n          <div>Professional Architecture & Interior Design Budget Management</div>\n          <div style={{ marginTop: '8px' }}>\n            <a href=\"https://arka.pk\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#2c3e50', fontWeight: 'bold', textDecoration: 'none', fontSize: '14px' }}>arka.pk</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Standard Template (default)\n  return (\n    <div \n      id=\"export-dashboard\" \n      style={{\n        width: '1920px',\n        minHeight: '1080px',\n        background: 'linear-gradient(135deg, #0a0e27 0%, #1a1f3a 50%, #0a0e27 100%)',\n        padding: '60px',\n        fontFamily: 'Rajdhani, sans-serif',\n        color: '#e0e6ed',\n        position: 'absolute',\n        left: '-9999px',\n        top: '0',\n      }}\n    >\n      {/* Header Section */}\n      <div style={{ \n        borderBottom: '3px solid #00d9ff',\n        paddingBottom: '30px',\n        marginBottom: '50px',\n        background: 'linear-gradient(90deg, rgba(0,217,255,0.1) 0%, transparent 100%)',\n        padding: '30px',\n        borderRadius: '8px',\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\n          <div style={{\n            width: '80px',\n            height: '80px',\n            background: 'linear-gradient(135deg, #00d9ff 0%, #7b2ff7 100%)',\n            borderRadius: '12px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '40px',\n            fontWeight: 'bold',\n            color: '#fff',\n            fontFamily: 'Orbitron, sans-serif',\n            boxShadow: '0 0 30px rgba(0,217,255,0.5)',\n          }}>\n            <Building2 size={48} />\n          </div>\n          <div>\n            <div style={{\n              fontSize: '48px',\n              fontWeight: 'bold',\n              fontFamily: 'Orbitron, sans-serif',\n              background: 'linear-gradient(90deg, #00d9ff 0%, #7b2ff7 100%)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              marginBottom: '8px',\n            }}>\n              {projectName}\n            </div>\n            <div style={{ \n              fontSize: '24px', \n              color: '#8892b0',\n              fontFamily: 'Rajdhani, sans-serif',\n            }}>\n              ARCHITECTURE & INTERIOR DESIGN MANAGEMENT\n            </div>\n          </div>\n        </div>\n        <div style={{\n          marginTop: '20px',\n          fontSize: '16px',\n          color: '#8892b0',\n          fontFamily: 'Fira Code, monospace',\n        }}>\n          Report Generated: {new Date().toLocaleString('en-PK', { dateStyle: 'full', timeStyle: 'short' })}\n        </div>\n      </div>\n\n      {/* Summary Stats Grid */}\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(3, 1fr)',\n        gap: '30px',\n        marginBottom: '50px',\n      }}>\n        {/* Total Cost */}\n        <div style={{\n          background: 'linear-gradient(135deg, rgba(0,217,255,0.1) 0%, rgba(123,47,247,0.1) 100%)',\n          border: '2px solid #00d9ff',\n          borderRadius: '12px',\n          padding: '30px',\n          boxShadow: '0 0 20px rgba(0,217,255,0.2)',\n        }}>\n          <div style={{ fontSize: '18px', color: '#8892b0', marginBottom: '10px' }}>TOTAL PROJECT COST</div>\n          <div style={{ \n            fontSize: '42px', \n            fontWeight: 'bold',\n            fontFamily: 'Fira Code, monospace',\n            color: '#00d9ff',\n          }}>\n            {formatCurrency(Number(summary.totalCost))}\n          </div>\n        </div>\n\n        {/* Total Items */}\n        <div style={{\n          background: 'linear-gradient(135deg, rgba(255,51,102,0.1) 0%, rgba(255,170,0,0.1) 100%)',\n          border: '2px solid #ff3366',\n          borderRadius: '12px',\n          padding: '30px',\n          boxShadow: '0 0 20px rgba(255,51,102,0.2)',\n        }}>\n          <div style={{ fontSize: '18px', color: '#8892b0', marginBottom: '10px' }}>TOTAL ITEMS</div>\n          <div style={{ \n            fontSize: '42px', \n            fontWeight: 'bold',\n            fontFamily: 'Fira Code, monospace',\n            color: '#ff3366',\n          }}>\n            {summary.totalItems}\n          </div>\n        </div>\n\n        {/* Total Divisions */}\n        <div style={{\n          background: 'linear-gradient(135deg, rgba(0,255,136,0.1) 0%, rgba(0,217,255,0.1) 100%)',\n          border: '2px solid #00ff88',\n          borderRadius: '12px',\n          padding: '30px',\n          boxShadow: '0 0 20px rgba(0,255,136,0.2)',\n        }}>\n          <div style={{ fontSize: '18px', color: '#8892b0', marginBottom: '10px' }}>TOTAL DIVISIONS</div>\n          <div style={{ \n            fontSize: '42px', \n            fontWeight: 'bold',\n            fontFamily: 'Fira Code, monospace',\n            color: '#00ff88',\n          }}>\n            {summary.totalDivisions}\n          </div>\n        </div>\n      </div>\n\n      {/* Priority Breakdown */}\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr',\n        gap: '30px',\n        marginBottom: '50px',\n      }}>\n        {/* Priority Pie Chart */}\n        <div style={{\n          background: 'rgba(13,17,23,0.6)',\n          border: '1px solid rgba(0,217,255,0.3)',\n          borderRadius: '12px',\n          padding: '30px',\n        }}>\n          <div style={{\n            fontSize: '24px',\n            fontWeight: 'bold',\n            marginBottom: '20px',\n            color: '#00d9ff',\n            fontFamily: 'Orbitron, sans-serif',\n          }}>\n            PRIORITY BREAKDOWN\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <PieChart width={400} height={300}>\n              <Pie\n                data={priorityData}\n                cx={200}\n                cy={150}\n                innerRadius={60}\n                outerRadius={120}\n                paddingAngle={5}\n                dataKey=\"value\"\n              >\n                {priorityData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value: number) => formatCurrency(value)}\n                contentStyle={{\n                  backgroundColor: '#1a1f3a',\n                  border: '1px solid #00d9ff',\n                  borderRadius: '8px',\n                  color: '#e0e6ed',\n                }}\n              />\n              <Legend \n                wrapperStyle={{\n                  color: '#e0e6ed',\n                  fontSize: '14px',\n                }}\n              />\n            </PieChart>\n          </div>\n          <div style={{ marginTop: '20px', fontSize: '16px', color: '#8892b0' }}>\n            <div style={{ marginBottom: '8px' }}>\n              <span style={{ color: '#ff3366' }}>●</span> High Priority: {formatCurrency(Number(summary.highPriorityCost))}\n            </div>\n            <div style={{ marginBottom: '8px' }}>\n              <span style={{ color: '#ffaa00' }}>●</span> Mid Priority: {formatCurrency(Number(summary.midPriorityCost))}\n            </div>\n            <div>\n              <span style={{ color: '#00ff88' }}>●</span> Low Priority: {formatCurrency(Number(summary.lowPriorityCost))}\n            </div>\n          </div>\n        </div>\n\n        {/* Division Bar Chart */}\n        <div style={{\n          background: 'rgba(13,17,23,0.6)',\n          border: '1px solid rgba(123,47,247,0.3)',\n          borderRadius: '12px',\n          padding: '30px',\n        }}>\n          <div style={{\n            fontSize: '24px',\n            fontWeight: 'bold',\n            marginBottom: '20px',\n            color: '#7b2ff7',\n            fontFamily: 'Orbitron, sans-serif',\n          }}>\n            DIVISION COSTS\n          </div>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={divisionData}>\n              <XAxis \n                dataKey=\"name\" \n                stroke=\"#8892b0\"\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis \n                stroke=\"#8892b0\"\n                style={{ fontSize: '12px' }}\n                tickFormatter={(value) => `${(value / 1000).toFixed(0)}K`}\n              />\n              <Tooltip \n                formatter={(value: number) => formatCurrency(value)}\n                contentStyle={{\n                  backgroundColor: '#1a1f3a',\n                  border: '1px solid #7b2ff7',\n                  borderRadius: '8px',\n                  color: '#e0e6ed',\n                }}\n              />\n              <Bar dataKey=\"cost\" fill=\"#7b2ff7\" radius={[8, 8, 0, 0]} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Items Table */}\n      <div style={{\n        background: 'rgba(13,17,23,0.6)',\n        border: '1px solid rgba(0,217,255,0.3)',\n        borderRadius: '12px',\n        padding: '30px',\n      }}>\n        <div style={{\n          fontSize: '24px',\n          fontWeight: 'bold',\n          marginBottom: '20px',\n          color: '#00d9ff',\n          fontFamily: 'Orbitron, sans-serif',\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px',\n        }}>\n          <TrendingUp size={28} />\n          DETAILED COST BREAKDOWN\n        </div>\n        <table style={{\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontSize: '14px',\n        }}>\n          <thead>\n            <tr style={{\n              background: 'linear-gradient(90deg, rgba(0,217,255,0.2) 0%, rgba(123,47,247,0.2) 100%)',\n              borderBottom: '2px solid #00d9ff',\n            }}>\n              <th style={{ padding: '15px', textAlign: 'left', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>DIVISION</th>\n              <th style={{ padding: '15px', textAlign: 'left', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>DESCRIPTION</th>\n              <th style={{ padding: '15px', textAlign: 'center', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>UNIT</th>\n              <th style={{ padding: '15px', textAlign: 'right', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>QTY</th>\n              <th style={{ padding: '15px', textAlign: 'right', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>RATE</th>\n              <th style={{ padding: '15px', textAlign: 'right', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>TOTAL</th>\n              <th style={{ padding: '15px', textAlign: 'center', color: '#00d9ff', fontFamily: 'Orbitron, sans-serif' }}>PRIORITY</th>\n            </tr>\n          </thead>\n          <tbody>\n            {items.map((item, index) => {\n              const division = divisions.find(d => d.id === item.divisionId);\n              const totalCost = Number(item.quantity) * Number(item.rate);\n              const priorityColor = \n                item.priority === 'High' ? '#ff3366' :\n                item.priority === 'Mid' ? '#ffaa00' : '#00ff88';\n              \n              return (\n                <tr \n                  key={item.id}\n                  style={{\n                    background: index % 2 === 0 ? 'rgba(0,217,255,0.05)' : 'transparent',\n                    borderBottom: '1px solid rgba(136,146,176,0.2)',\n                  }}\n                >\n                  <td style={{ padding: '12px', color: '#8892b0' }}>{division?.name || 'N/A'}</td>\n                  <td style={{ padding: '12px', color: '#e0e6ed' }}>{item.description}</td>\n                  <td style={{ padding: '12px', textAlign: 'center', color: '#8892b0', fontFamily: 'Fira Code, monospace' }}>{item.unit}</td>\n                  <td style={{ padding: '12px', textAlign: 'right', color: '#e0e6ed', fontFamily: 'Fira Code, monospace' }}>{Number(item.quantity).toLocaleString('en-PK')}</td>\n                  <td style={{ padding: '12px', textAlign: 'right', color: '#e0e6ed', fontFamily: 'Fira Code, monospace' }}>{Number(item.rate).toLocaleString('en-PK')}</td>\n                  <td style={{ padding: '12px', textAlign: 'right', color: '#00d9ff', fontWeight: 'bold', fontFamily: 'Fira Code, monospace' }}>\n                    {totalCost.toLocaleString('en-PK')}\n                  </td>\n                  <td style={{ padding: '12px', textAlign: 'center' }}>\n                    <span style={{\n                      padding: '4px 12px',\n                      borderRadius: '4px',\n                      background: `${priorityColor}22`,\n                      color: priorityColor,\n                      border: `1px solid ${priorityColor}`,\n                      fontSize: '12px',\n                      fontWeight: 'bold',\n                      fontFamily: 'Orbitron, sans-serif',\n                    }}>\n                      {item.priority.toUpperCase()}\n                    </span>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Footer */}\n      <div style={{\n        marginTop: '50px',\n        paddingTop: '30px',\n        borderTop: '2px solid rgba(0,217,255,0.3)',\n        textAlign: 'center',\n        fontSize: '14px',\n        color: '#8892b0',\n      }}>\n        <div style={{\n          fontFamily: 'Orbitron, sans-serif',\n          fontSize: '18px',\n          marginBottom: '10px',\n          background: 'linear-gradient(90deg, #00d9ff 0%, #7b2ff7 100%)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n        }}>\n          ARKA SERVICES PROJECT MANAGEMENT\n        </div>\n        <div>Professional Architecture & Interior Design Budget Management System</div>\n        <div style={{ marginTop: '5px', fontSize: '16px', color: '#00d9ff', fontWeight: 'bold' }}>\n          <a href=\"https://arka.pk\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#00d9ff', textDecoration: 'none' }}>arka.pk</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32931},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { User } from '@shared/schema';\nimport { storage } from './storage';\nimport bcrypt from 'bcrypt';\n\n// Extend Express Request to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\n// Middleware to check if user is authenticated\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n  next();\n}\n\n// Middleware to check specific role\nexport function requireRole(...roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    next();\n  };\n}\n\n// Middleware to attach user to request\nexport async function attachUser(req: Request, res: Response, next: NextFunction) {\n  if (req.session?.userId) {\n    const user = await storage.getUser(req.session.userId);\n    if (user) {\n      req.user = user;\n    }\n  }\n  next();\n}\n\n// Secure password hashing using bcrypt\nexport function hashPassword(password: string): string {\n  return bcrypt.hashSync(password, 10);\n}\n\nexport function verifyPassword(password: string, hash: string): boolean {\n  return bcrypt.compareSync(password, hash);\n}\n","size_bytes":1363},"client/src/components/ProjectDetailsDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Project } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CalendarIcon, Building2, FileText, Save } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst projectDetailsSchema = z.object({\n  clientName: z.string().optional(),\n  projectTitle: z.string().optional(),\n  startDate: z.date().optional(),\n  deliveryDate: z.date().optional(),\n});\n\ntype ProjectDetailsFormValues = z.infer<typeof projectDetailsSchema>;\n\ninterface ProjectDetailsDialogProps {\n  project: Project | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ProjectDetailsDialog({\n  project,\n  open,\n  onOpenChange,\n}: ProjectDetailsDialogProps) {\n  const { toast } = useToast();\n\n  const form = useForm<ProjectDetailsFormValues>({\n    resolver: zodResolver(projectDetailsSchema),\n    defaultValues: {\n      clientName: \"\",\n      projectTitle: \"\",\n      startDate: undefined,\n      deliveryDate: undefined,\n    },\n  });\n\n  useEffect(() => {\n    if (project) {\n      form.reset({\n        clientName: project.clientName || \"\",\n        projectTitle: project.projectTitle || \"\",\n        startDate: project.startDate ? new Date(project.startDate) : undefined,\n        deliveryDate: project.deliveryDate ? new Date(project.deliveryDate) : undefined,\n      });\n    }\n  }, [project, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: ProjectDetailsFormValues) => {\n      if (!project) return;\n      return await apiRequest(\"PATCH\", `/api/projects/${project.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project Details Updated\",\n        description: \"Your project information has been saved successfully.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project details. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProjectDetailsFormValues) => {\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"font-display text-2xl\">\n            Project Details\n          </DialogTitle>\n          <DialogDescription>\n            Add client information and project timeline details\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"clientName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <Building2 className=\"w-4 h-4\" />\n                    Client Name\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter client name\"\n                      {...field}\n                      data-testid=\"input-client-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"projectTitle\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4\" />\n                    Project Title\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter project title\"\n                      {...field}\n                      data-testid=\"input-project-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Start Date</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"justify-start text-left font-normal\"\n                            data-testid=\"button-start-date\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? format(field.value, \"PPP\") : \"Pick date\"}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"deliveryDate\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Delivery Date</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"justify-start text-left font-normal\"\n                            data-testid=\"button-delivery-date\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? format(field.value, \"PPP\") : \"Pick date\"}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter className=\"gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-details\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save-details\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {updateMutation.isPending ? \"Saving...\" : \"Save Details\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8305},"server/seed.ts":{"content":"import { db } from './db';\nimport { users, employees, projects, projectFinancials } from '@shared/schema';\nimport { hashPassword } from './auth';\nimport { eq } from 'drizzle-orm';\n\nexport async function seedDatabase() {\n  console.log('Seeding database...');\n  \n  // Check if principle user already exists\n  const existingPrinciple = await db.select().from(users).where(eq(users.username, 'ZARA'));\n  \n  if (existingPrinciple.length === 0) {\n    // Create default principle user\n    await db.insert(users).values({\n      username: 'ZARA',\n      password: hashPassword('saroshahsanto'),\n      role: 'principle',\n      fullName: 'ZARA (Principle)',\n      isActive: 1,\n    }).returning();\n    \n    console.log('✅ Created default principle user: ZARA / saroshahsanto');\n  } else {\n    console.log('✅ Principle user already exists');\n  }\n\n  // Check if procurement user already exists\n  const existingProcurement = await db.select().from(users).where(eq(users.username, 'procurement'));\n  \n  if (existingProcurement.length === 0) {\n    // Create default procurement user\n    await db.insert(users).values({\n      username: 'procurement',\n      password: hashPassword('procurement123'),\n      role: 'procurement',\n      fullName: 'Procurement Manager',\n      isActive: 1,\n    }).returning();\n    \n    console.log('✅ Created default procurement user: procurement / procurement123');\n  } else {\n    console.log('✅ Procurement user already exists');\n  }\n}\n\n// Run seed if called directly (only in development/manual execution)\n// Note: Never call process.exit() when imported as a module to prevent server termination\nif (typeof process !== 'undefined' && process.argv && process.argv[1]) {\n  const isMainModule = import.meta.url === `file://${process.argv[1]}`;\n  if (isMainModule) {\n    seedDatabase()\n      .then(() => {\n        console.log('✅ Seeding complete');\n        // Only exit if run directly as a script, not when imported\n        if (typeof process !== 'undefined' && process.exit) {\n          process.exit(0);\n        }\n      })\n      .catch((error) => {\n        console.error('❌ Seeding failed:', error);\n        if (typeof process !== 'undefined' && process.exit) {\n          process.exit(1);\n        }\n      });\n  }\n}\n","size_bytes":2237},"client/src/lib/auth.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient, getQueryFn } from \"./queryClient\";\nimport { User } from \"@shared/schema\";\n\nexport type { User } from \"@shared/schema\";\n\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n\nexport async function login(credentials: LoginCredentials): Promise<User> {\n  const res = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n  const user = await res.json();\n  \n  queryClient.setQueryData([\"/api/auth/me\"], user);\n  \n  return user;\n}\n\nexport async function logout(): Promise<void> {\n  await apiRequest(\"POST\", \"/api/auth/logout\");\n  \n  queryClient.setQueryData([\"/api/auth/me\"], null);\n  queryClient.clear();\n}\n","size_bytes":979},"client/src/pages/principle-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth, logout } from \"@/lib/auth\";\nimport { Project, User, Task, ProcurementItem, Comment, insertProjectSchema, insertUserSchema, InsertProject, InsertUser } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { AssignTaskDialog, EditUserDialog } from \"./principle-dashboard-dialogs\";\nimport {\n  Briefcase,\n  Users,\n  UserCheck,\n  ShoppingCart,\n  DollarSign,\n  Calculator,\n  Plus,\n  UserPlus,\n  ClipboardList,\n  FileText,\n  Activity,\n  AlertCircle,\n  CheckCircle2,\n  Clock,\n  MessageSquare,\n  LogOut,\n  ExternalLink,\n  TrendingUp,\n  CalendarIcon,\n  Upload,\n} from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DashboardStats {\n  totalProjects: number;\n  activeProjects: number;\n  activeEmployees: number;\n  totalClients: number;\n  pendingProcurement: number;\n  totalTasks: number;\n  completedTasks: number;\n}\n\ninterface ProjectHealth {\n  project: Project;\n  health: \"excellent\" | \"good\" | \"warning\" | \"critical\";\n  score: number;\n  issues: string[];\n}\n\ntype ActiveTab = \"projects\" | \"employees\" | \"clients\" | \"procurement\" | \"accounts\" | \"tasks\" | \"users\";\n\nexport default function PrincipleDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<ActiveTab>(\"projects\");\n  const [createProjectOpen, setCreateProjectOpen] = useState(false);\n  const [addEmployeeOpen, setAddEmployeeOpen] = useState(false);\n  const [assignProjectOpen, setAssignProjectOpen] = useState(false);\n  const [assignTaskOpen, setAssignTaskOpen] = useState(false);\n  const [editUserOpen, setEditUserOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  // Fetch all data\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: allTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: allProcurement = [] } = useQuery<ProcurementItem[]>({\n    queryKey: [\"/api/procurement/all\"],\n    queryFn: async () => {\n      // Fetch procurement for all projects\n      const procurementData: ProcurementItem[] = [];\n      for (const project of projects) {\n        try {\n          const res = await fetch(`/api/procurement?projectId=${project.id}`, {\n            credentials: \"include\",\n          });\n          if (res.ok) {\n            const data = await res.json();\n            procurementData.push(...data);\n          }\n        } catch (error) {\n          console.error(`Failed to fetch procurement for project ${project.id}`, error);\n        }\n      }\n      return procurementData;\n    },\n    enabled: projects.length > 0,\n  });\n\n  const { data: allComments = [] } = useQuery<Comment[]>({\n    queryKey: [\"/api/comments/all\"],\n    queryFn: async () => {\n      // Fetch comments for all projects\n      const commentsData: Comment[] = [];\n      for (const project of projects) {\n        try {\n          const res = await fetch(`/api/comments?projectId=${project.id}`, {\n            credentials: \"include\",\n          });\n          if (res.ok) {\n            const data = await res.json();\n            commentsData.push(...data);\n          }\n        } catch (error) {\n          console.error(`Failed to fetch comments for project ${project.id}`, error);\n        }\n      }\n      return commentsData;\n    },\n    enabled: projects.length > 0,\n  });\n\n  // Calculate statistics\n  const stats: DashboardStats = {\n    totalProjects: projects.length,\n    activeProjects: projects.length,\n    activeEmployees: users.filter((u) => u.role === \"employee\" && u.isActive === 1).length,\n    totalClients: users.filter((u) => u.role === \"client\").length,\n    pendingProcurement: allProcurement.filter((p) => p.isPurchased === 0).length,\n    totalTasks: allTasks.length,\n    completedTasks: allTasks.filter((t) => t.status === \"Done\").length,\n  };\n\n  // Calculate project health\n  const projectHealthScores: ProjectHealth[] = projects.map((project) => {\n    const projectTasks = allTasks.filter((t) => t.projectId === project.id);\n    const completedTasks = projectTasks.filter((t) => t.status === \"Done\").length;\n    const totalTasks = projectTasks.length;\n    const taskCompletion = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 100;\n\n    const projectProcurement = allProcurement.filter((p) => p.projectId === project.id);\n    const purchasedItems = projectProcurement.filter((p) => p.isPurchased === 1).length;\n    const totalProcurement = projectProcurement.length;\n    const procurementCompletion = totalProcurement > 0 ? (purchasedItems / totalProcurement) * 100 : 100;\n\n    const score = (taskCompletion + procurementCompletion) / 2;\n    const issues: string[] = [];\n\n    if (taskCompletion < 50) issues.push(\"Low task completion\");\n    if (procurementCompletion < 50) issues.push(\"Pending procurement items\");\n    if (totalTasks === 0) issues.push(\"No tasks assigned\");\n\n    let health: ProjectHealth[\"health\"] = \"excellent\";\n    if (score < 40) health = \"critical\";\n    else if (score < 60) health = \"warning\";\n    else if (score < 80) health = \"good\";\n\n    return { project, health, score, issues };\n  });\n\n  // Recent activity\n  const recentActivity = [\n    ...allTasks.map((t) => ({\n      type: \"task\" as const,\n      timestamp: new Date(t.updatedAt),\n      data: t,\n    })),\n    ...allComments.map((c) => ({\n      type: \"comment\" as const,\n      timestamp: new Date(c.createdAt),\n      data: c,\n    })),\n  ]\n    .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n    .slice(0, 10);\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  const getHealthColor = (health: ProjectHealth[\"health\"]) => {\n    switch (health) {\n      case \"excellent\":\n        return \"text-green-500 border-green-500/50 bg-green-500/10\";\n      case \"good\":\n        return \"text-blue-500 border-blue-500/50 bg-blue-500/10\";\n      case \"warning\":\n        return \"text-yellow-500 border-yellow-500/50 bg-yellow-500/10\";\n      case \"critical\":\n        return \"text-red-500 border-red-500/50 bg-red-500/10\";\n    }\n  };\n\n  const getHealthIcon = (health: ProjectHealth[\"health\"]) => {\n    switch (health) {\n      case \"excellent\":\n        return <CheckCircle2 className=\"w-4 h-4\" />;\n      case \"good\":\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case \"warning\":\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case \"critical\":\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n              <Activity className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <a\n                href=\"https://arka.pk\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 group\"\n                data-testid=\"link-arka-website\"\n              >\n                <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                  ARKA SERVICES\n                </h1>\n                <ExternalLink className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n              </a>\n              <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                Principle Control Center\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-3 px-4 py-2 rounded-md bg-primary/10 border border-primary/40\">\n              <Avatar data-testid=\"avatar-user\">\n                <AvatarFallback className=\"bg-primary/20 text-primary font-display\">\n                  {user?.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase() || \"ZA\"}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-user-name\">\n                  {user?.fullName || \"ZARA\"}\n                </p>\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wide\" data-testid=\"text-user-role\">\n                  Principle\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"border-destructive/50 text-destructive hover:bg-destructive/10\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"flex items-center gap-2 px-6 pb-3\">\n          <Button\n            variant={activeTab === \"projects\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"projects\")}\n            data-testid=\"button-nav-projects\"\n          >\n            <Briefcase className=\"w-4 h-4\" />\n            Projects\n          </Button>\n          <Button\n            variant={activeTab === \"employees\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"employees\")}\n            data-testid=\"button-nav-employees\"\n          >\n            <Users className=\"w-4 h-4\" />\n            Employees\n          </Button>\n          <Button\n            variant={activeTab === \"clients\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"clients\")}\n            data-testid=\"button-nav-clients\"\n          >\n            <UserCheck className=\"w-4 h-4\" />\n            Clients\n          </Button>\n          <Button\n            variant={activeTab === \"procurement\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"procurement\")}\n            data-testid=\"button-nav-procurement\"\n          >\n            <ShoppingCart className=\"w-4 h-4\" />\n            Procurement\n          </Button>\n          <Button\n            variant={activeTab === \"accounts\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"accounts\")}\n            data-testid=\"button-nav-accounts\"\n          >\n            <DollarSign className=\"w-4 h-4\" />\n            Accounts\n          </Button>\n          <Button\n            variant={activeTab === \"tasks\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"tasks\")}\n            data-testid=\"button-nav-tasks\"\n          >\n            <ClipboardList className=\"w-4 h-4\" />\n            Tasks\n          </Button>\n          <Button\n            variant={activeTab === \"users\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n            onClick={() => setActiveTab(\"users\")}\n            data-testid=\"button-nav-users\"\n          >\n            <UserPlus className=\"w-4 h-4\" />\n            Users\n          </Button>\n          <Link href=\"/budget\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"gap-2\"\n              data-testid=\"button-nav-budget-tool\"\n            >\n              <Calculator className=\"w-4 h-4\" />\n              Budget Tool\n            </Button>\n          </Link>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"max-w-[1600px] mx-auto space-y-6\">\n          {activeTab === \"projects\" && (\n            <>\n              {/* Overview Statistics Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"p-6 hover-elevate\" data-testid=\"card-total-projects\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                      <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                        Total Projects\n                      </p>\n                      <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-total-projects\">\n                        {stats.totalProjects}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n                      <Briefcase className=\"w-6 h-6 text-primary\" />\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 hover-elevate\" data-testid=\"card-active-employees\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                        Active Employees\n                      </p>\n                      <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-active-employees\">\n                        {stats.activeEmployees}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 rounded-md bg-blue-500/20 border border-blue-500/50 flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-blue-500\" />\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 hover-elevate\" data-testid=\"card-total-clients\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                        Total Clients\n                      </p>\n                      <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-total-clients\">\n                        {stats.totalClients}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 rounded-md bg-purple-500/20 border border-purple-500/50 flex items-center justify-center\">\n                      <UserCheck className=\"w-6 h-6 text-purple-500\" />\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 hover-elevate\" data-testid=\"card-pending-procurement\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                        Pending Procurement\n                      </p>\n                      <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-pending-procurement\">\n                        {stats.pendingProcurement}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 rounded-md bg-orange-500/20 border border-orange-500/50 flex items-center justify-center\">\n                      <ShoppingCart className=\"w-6 h-6 text-orange-500\" />\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              {/* Quick Actions & Recent Activity */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Quick Actions */}\n                <Card className=\"p-6\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Activity className=\"w-5 h-5 text-primary\" />\n                    <h2 className=\"text-lg font-display font-bold text-foreground\">\n                      Quick Actions\n                    </h2>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start gap-3 border-primary/50 hover:border-primary\"\n                      onClick={() => setCreateProjectOpen(true)}\n                      data-testid=\"button-create-project\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      Create Project\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start gap-3 border-blue-500/50 hover:border-blue-500\"\n                      onClick={() => setAddEmployeeOpen(true)}\n                      data-testid=\"button-add-employee\"\n                    >\n                      <UserPlus className=\"w-4 h-4\" />\n                      Add Employee\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start gap-3 border-purple-500/50 hover:border-purple-500\"\n                      onClick={() => setAssignProjectOpen(true)}\n                      data-testid=\"button-assign-project\"\n                    >\n                      <ClipboardList className=\"w-4 h-4\" />\n                      Assign Project\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start gap-3 border-orange-500/50 hover:border-orange-500\"\n                      onClick={() => toast({ title: \"Reports\", description: \"Reports feature coming soon!\" })}\n                      data-testid=\"button-view-reports\"\n                    >\n                      <FileText className=\"w-4 h-4\" />\n                      View Reports\n                    </Button>\n                  </div>\n                </Card>\n\n                {/* Recent Activity Feed */}\n                <Card className=\"p-6 lg:col-span-2\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Clock className=\"w-5 h-5 text-primary\" />\n                    <h2 className=\"text-lg font-display font-bold text-foreground\">\n                      Recent Activity\n                    </h2>\n                  </div>\n                  <ScrollArea className=\"h-[300px]\">\n                    <div className=\"space-y-4\">\n                      {recentActivity.length === 0 ? (\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-no-activity\">\n                          No recent activity\n                        </p>\n                      ) : (\n                        recentActivity.map((activity, index) => (\n                          <div key={index} className=\"flex items-start gap-3\">\n                            <div\n                              className={`w-8 h-8 rounded-md flex items-center justify-center ${\n                                activity.type === \"task\"\n                                  ? \"bg-blue-500/20 border border-blue-500/50\"\n                                  : \"bg-purple-500/20 border border-purple-500/50\"\n                              }`}\n                            >\n                              {activity.type === \"task\" ? (\n                                <ClipboardList className=\"w-4 h-4 text-blue-500\" />\n                              ) : (\n                                <MessageSquare className=\"w-4 h-4 text-purple-500\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm text-foreground\" data-testid={`text-activity-${index}`}>\n                                {activity.type === \"task\" ? (\n                                  <>\n                                    Task <span className=\"font-semibold\">{activity.data.taskType}</span>{\" \"}\n                                    updated to{\" \"}\n                                    <Badge variant=\"outline\" className=\"ml-1\">\n                                      {activity.data.status}\n                                    </Badge>\n                                  </>\n                                ) : (\n                                  <>New comment added</>\n                                )}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-time-${index}`}>\n                                {formatDistanceToNow(activity.timestamp, { addSuffix: true })}\n                              </p>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </ScrollArea>\n                </Card>\n              </div>\n\n              {/* Project Health Dashboard */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  <h2 className=\"text-lg font-display font-bold text-foreground\">\n                    System-Wide Project Health\n                  </h2>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {projectHealthScores.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground col-span-full\" data-testid=\"text-no-projects\">\n                      No projects available\n                    </p>\n                  ) : (\n                    projectHealthScores.map((ph) => (\n                      <Card\n                        key={ph.project.id}\n                        className={`p-4 border ${getHealthColor(ph.health)} hover-elevate`}\n                        data-testid={`card-project-health-${ph.project.id}`}\n                      >\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h3 className=\"font-semibold text-foreground truncate\" data-testid={`text-project-name-${ph.project.id}`}>\n                            {ph.project.name}\n                          </h3>\n                          <div className=\"flex items-center gap-2\">\n                            {getHealthIcon(ph.health)}\n                            <span className=\"text-xs font-mono font-bold\" data-testid={`text-health-score-${ph.project.id}`}>\n                              {ph.score.toFixed(0)}%\n                            </span>\n                          </div>\n                        </div>\n                        <Separator className=\"mb-3\" />\n                        <div className=\"space-y-1\">\n                          <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                            {ph.health}\n                          </Badge>\n                          {ph.issues.length > 0 && (\n                            <div className=\"mt-2 space-y-1\">\n                              {ph.issues.map((issue, i) => (\n                                <p\n                                  key={i}\n                                  className=\"text-xs text-muted-foreground\"\n                                  data-testid={`text-issue-${ph.project.id}-${i}`}\n                                >\n                                  • {issue}\n                                </p>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </Card>\n                </>\n              )}\n\n          {activeTab === \"employees\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Users className=\"w-5 h-5 text-primary\" />\n                <h2 className=\"text-lg font-display font-bold text-foreground\">\n                  Employee Management\n                </h2>\n              </div>\n              <div className=\"space-y-4\">\n                {users.filter((u) => u.role === \"employee\").map((employee) => (\n                  <Card key={employee.id} className=\"p-4 hover-elevate\" data-testid={`card-employee-${employee.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback className=\"bg-blue-500/20 text-blue-500\">\n                            {employee.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold text-foreground\">{employee.fullName}</p>\n                          <p className=\"text-xs text-muted-foreground\">{employee.username}</p>\n                        </div>\n                      </div>\n                      <Badge variant={employee.isActive === 1 ? \"default\" : \"outline\"}>\n                        {employee.isActive === 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </Card>\n                ))}\n                {users.filter((u) => u.role === \"employee\").length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">No employees found</p>\n                )}\n              </div>\n            </Card>\n          )}\n\n          {activeTab === \"clients\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <UserCheck className=\"w-5 h-5 text-primary\" />\n                <h2 className=\"text-lg font-display font-bold text-foreground\">\n                  Client Management\n                </h2>\n              </div>\n              <div className=\"space-y-4\">\n                {users.filter((u) => u.role === \"client\").map((client) => (\n                  <Card key={client.id} className=\"p-4 hover-elevate\" data-testid={`card-client-${client.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback className=\"bg-purple-500/20 text-purple-500\">\n                            {client.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold text-foreground\">{client.fullName}</p>\n                          <p className=\"text-xs text-muted-foreground\">{client.username}</p>\n                        </div>\n                      </div>\n                      <Badge variant={client.isActive === 1 ? \"default\" : \"outline\"}>\n                        {client.isActive === 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </Card>\n                ))}\n                {users.filter((u) => u.role === \"client\").length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-8\">No clients found</p>\n                )}\n              </div>\n            </Card>\n          )}\n\n          {activeTab === \"procurement\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <ShoppingCart className=\"w-5 h-5 text-primary\" />\n                <h2 className=\"text-lg font-display font-bold text-foreground\">\n                  Procurement Overview\n                </h2>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <Card className=\"p-4\">\n                  <p className=\"text-xs text-muted-foreground uppercase\">Total Items</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{allProcurement.length}</p>\n                </Card>\n                <Card className=\"p-4\">\n                  <p className=\"text-xs text-muted-foreground uppercase\">Pending Purchase</p>\n                  <p className=\"text-2xl font-bold text-orange-500\">\n                    {allProcurement.filter((p) => p.isPurchased === 0).length}\n                  </p>\n                </Card>\n                <Card className=\"p-4\">\n                  <p className=\"text-xs text-muted-foreground uppercase\">Purchased</p>\n                  <p className=\"text-2xl font-bold text-green-500\">\n                    {allProcurement.filter((p) => p.isPurchased === 1).length}\n                  </p>\n                </Card>\n              </div>\n              <ScrollArea className=\"h-[400px]\">\n                <div className=\"space-y-2\">\n                  {allProcurement.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex items-center justify-between p-3 rounded-md border hover-elevate\"\n                      data-testid={`procurement-item-${item.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-foreground\">{item.itemName}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Qty: {item.quantity} × {Number(item.projectCost).toLocaleString('en-PK')} PKR\n                        </p>\n                      </div>\n                      <Badge variant={item.isPurchased === 1 ? \"default\" : \"outline\"}>\n                        {item.isPurchased === 1 ? \"Purchased\" : \"Pending\"}\n                      </Badge>\n                    </div>\n                  ))}\n                  {allProcurement.length === 0 && (\n                    <p className=\"text-sm text-muted-foreground text-center py-8\">No procurement items found</p>\n                  )}\n                </div>\n              </ScrollArea>\n            </Card>\n          )}\n\n          {activeTab === \"accounts\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <DollarSign className=\"w-5 h-5 text-primary\" />\n                <h2 className=\"text-lg font-display font-bold text-foreground\">\n                  Accounts & Financial Overview\n                </h2>\n              </div>\n              <div className=\"text-center py-12\">\n                <DollarSign className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-semibold text-foreground mb-2\">Accounts Management</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Financial overview and account management features coming soon\n                </p>\n              </div>\n            </Card>\n          )}\n\n          {activeTab === \"tasks\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center gap-2\">\n                  <ClipboardList className=\"w-5 h-5 text-primary\" />\n                  <h2 className=\"text-lg font-display font-bold text-foreground\">\n                    Task Management\n                  </h2>\n                </div>\n                <Button onClick={() => setAssignTaskOpen(true)} data-testid=\"button-assign-task\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Assign Task\n                </Button>\n              </div>\n              <div className=\"space-y-4\">\n                {allTasks.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <ClipboardList className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-lg font-semibold text-foreground mb-2\">No Tasks Yet</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Start by assigning tasks to your employees\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {allTasks.map((task: any) => {\n                      const employee = users.find(u => u.id === task.employeeId);\n                      const project = projects.find(p => p.id === task.projectId);\n                      return (\n                        <Card key={task.id} className=\"p-4 hover-elevate\" data-testid={`card-task-${task.id}`}>\n                          <div className=\"flex items-start justify-between gap-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Badge variant={\n                                  task.status === \"Done\" ? \"default\" : \n                                  task.status === \"In Progress\" ? \"secondary\" : \"outline\"\n                                }>\n                                  {task.status}\n                                </Badge>\n                                <Badge variant=\"outline\">{task.taskType}</Badge>\n                              </div>\n                              <p className=\"font-semibold text-foreground\">{task.description || task.taskType}</p>\n                              <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                                <span>Assigned to: {employee?.fullName || \"Unknown\"}</span>\n                                <span>Project: {project?.name || \"Unknown\"}</span>\n                                {task.dueDate && (\n                                  <span className=\"flex items-center gap-1\">\n                                    <Clock className=\"w-3 h-3\" />\n                                    {format(new Date(task.dueDate), \"MMM dd, yyyy\")}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </Card>\n          )}\n\n          {activeTab === \"users\" && (\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center gap-2\">\n                  <UserPlus className=\"w-5 h-5 text-primary\" />\n                  <h2 className=\"text-lg font-display font-bold text-foreground\">\n                    User Management\n                  </h2>\n                </div>\n              </div>\n              <div className=\"space-y-3\">\n                {users.map((u: User) => (\n                  <Card key={u.id} className=\"p-4 hover-elevate\" data-testid={`card-user-${u.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback className=\"bg-primary/20 text-primary font-semibold\">\n                            {u.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase() || \"U\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold text-foreground\">{u.fullName}</p>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <span>{u.username}</span>\n                            <span>•</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {u.role}\n                            </Badge>\n                            <span>•</span>\n                            {u.isActive === 1 ? (\n                              <span className=\"text-green-500 flex items-center gap-1\">\n                                <CheckCircle2 className=\"w-3 h-3\" />\n                                Active\n                              </span>\n                            ) : (\n                              <span className=\"text-red-500 flex items-center gap-1\">\n                                <AlertCircle className=\"w-3 h-3\" />\n                                Inactive\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedUser(u);\n                          setEditUserOpen(true);\n                        }}\n                        data-testid={`button-edit-user-${u.id}`}\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Create Project Dialog */}\n      <CreateProjectDialog \n        open={createProjectOpen} \n        onOpenChange={setCreateProjectOpen}\n      />\n\n      {/* Add Employee Dialog */}\n      <AddEmployeeDialog \n        open={addEmployeeOpen} \n        onOpenChange={setAddEmployeeOpen}\n      />\n\n      {/* Assign Project Dialog */}\n      <AssignProjectDialog \n        open={assignProjectOpen} \n        onOpenChange={setAssignProjectOpen}\n        projects={projects}\n        employees={users.filter(u => u.role === \"employee\")}\n      />\n\n      {/* Assign Task Dialog */}\n      <AssignTaskDialog \n        open={assignTaskOpen} \n        onOpenChange={setAssignTaskOpen}\n        projects={projects}\n      />\n\n      {/* Edit User Dialog */}\n      <EditUserDialog \n        open={editUserOpen} \n        onOpenChange={setEditUserOpen}\n        user={selectedUser}\n      />\n    </div>\n  );\n}\n\n// Create Project Dialog Component\nfunction CreateProjectDialog({ open, onOpenChange }: { open: boolean; onOpenChange: (open: boolean) => void }) {\n  const { toast } = useToast();\n  const form = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      name: \"\",\n      clientName: \"\",\n      projectTitle: \"\",\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: InsertProject) => {\n      const res = await apiRequest(\"POST\", \"/api/projects\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Success\",\n        description: \"Project created successfully!\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertProject) => {\n    createProjectMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Create New Project</DialogTitle>\n          <DialogDescription>\n            Add a new project to the system\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter project name\" {...field} data-testid=\"input-project-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"clientName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Client Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter client name\" \n                      {...field} \n                      value={field.value || \"\"}\n                      data-testid=\"input-client-name\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"projectTitle\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Title</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter project title\" \n                      {...field} \n                      value={field.value || \"\"}\n                      data-testid=\"input-project-title\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex justify-end gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-create-project\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createProjectMutation.isPending}\n                data-testid=\"button-submit-create-project\"\n              >\n                {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Add Employee Dialog Component\nfunction AddEmployeeDialog({ open, onOpenChange }: { open: boolean; onOpenChange: (open: boolean) => void }) {\n  const { toast } = useToast();\n  const [profilePictureFile, setProfilePictureFile] = useState<File | null>(null);\n  const [profilePicturePreview, setProfilePicturePreview] = useState<string>(\"\");\n  \n  const form = useForm({\n    resolver: zodResolver(insertUserSchema.extend({\n      idCard: z.string().min(1, \"ID Card is required\"),\n      whatsapp: z.string().min(1, \"WhatsApp number is required\"),\n      homeAddress: z.string().min(1, \"Home address is required\"),\n      joiningDate: z.date({ required_error: \"Joining date is required\" }),\n    })),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      fullName: \"\",\n      role: \"employee\" as const,\n      isActive: 1,\n      idCard: \"\",\n      whatsapp: \"\",\n      homeAddress: \"\",\n      joiningDate: new Date(),\n    },\n  });\n\n  const addEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Convert profile picture to base64 if exists\n      let profilePictureBase64 = \"\";\n      if (profilePictureFile) {\n        const reader = new FileReader();\n        profilePictureBase64 = await new Promise((resolve) => {\n          reader.onloadend = () => resolve(reader.result as string);\n          reader.readAsDataURL(profilePictureFile);\n        });\n      }\n\n      // Create employee with user account in a single atomic operation\n      const res = await apiRequest(\"POST\", \"/api/employees/create\", {\n        username: data.username,\n        password: data.password,\n        fullName: data.fullName,\n        role: data.role,\n        isActive: data.isActive,\n        idCard: data.idCard,\n        whatsapp: data.whatsapp,\n        homeAddress: data.homeAddress,\n        joiningDate: data.joiningDate.toISOString(),\n        profilePicture: profilePictureBase64 || undefined,\n      });\n      \n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({\n        title: \"Success\",\n        description: \"Employee added successfully!\",\n      });\n      form.reset();\n      setProfilePictureFile(null);\n      setProfilePicturePreview(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfilePictureChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setProfilePictureFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setProfilePicturePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onSubmit = (data: any) => {\n    addEmployeeMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New Employee</DialogTitle>\n          <DialogDescription>\n            Create a new employee account with profile details\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter full name\" {...field} data-testid=\"input-employee-fullname\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter username\" {...field} data-testid=\"input-employee-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Enter password\" \n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-employee-password\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"idCard\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID Card Number *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter ID card number\" {...field} data-testid=\"input-employee-idcard\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"whatsapp\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>WhatsApp Number *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+92 xxx xxxxxxx\" {...field} data-testid=\"input-employee-whatsapp\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"joiningDate\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Joining Date *</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full pl-3 text-left font-normal\"\n                            data-testid=\"button-joining-date\"\n                          >\n                            {field.value ? (\n                              format(field.value, \"PPP\")\n                            ) : (\n                              <span>Pick a date</span>\n                            )}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value}\n                          onSelect={field.onChange}\n                          disabled={(date) =>\n                            date > new Date() || date < new Date(\"1900-01-01\")\n                          }\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"homeAddress\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Home Address *</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter complete home address\" \n                      className=\"resize-none\"\n                      {...field} \n                      data-testid=\"input-employee-address\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div>\n              <FormLabel>Profile Picture</FormLabel>\n              <div className=\"mt-2 flex items-center gap-4\">\n                {profilePicturePreview && (\n                  <div className=\"w-24 h-24 rounded-md border-2 border-primary/50 overflow-hidden\">\n                    <img src={profilePicturePreview} alt=\"Profile preview\" className=\"w-full h-full object-cover\" />\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleProfilePictureChange}\n                    className=\"cursor-pointer\"\n                    data-testid=\"input-employee-photo\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Upload a profile picture (JPG, PNG, max 5MB)\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  form.reset();\n                  setProfilePictureFile(null);\n                  setProfilePicturePreview(\"\");\n                  onOpenChange(false);\n                }}\n                data-testid=\"button-cancel-add-employee\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={addEmployeeMutation.isPending}\n                data-testid=\"button-submit-add-employee\"\n              >\n                {addEmployeeMutation.isPending ? \"Adding...\" : \"Add Employee\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Assign Project Dialog Component\nfunction AssignProjectDialog({ \n  open, \n  onOpenChange,\n  projects,\n  employees \n}: { \n  open: boolean; \n  onOpenChange: (open: boolean) => void;\n  projects: Project[];\n  employees: User[];\n}) {\n  const { toast } = useToast();\n  const [selectedProject, setSelectedProject] = useState<string>(\"\");\n  const [selectedEmployee, setSelectedEmployee] = useState<string>(\"\");\n\n  const assignProjectMutation = useMutation({\n    mutationFn: async ({ projectId, employeeId }: { projectId: string; employeeId: string }) => {\n      const res = await apiRequest(\"POST\", `/api/projects/${projectId}/assign`, { employeeId });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Success\",\n        description: \"Project assigned successfully!\",\n      });\n      setSelectedProject(\"\");\n      setSelectedEmployee(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAssign = () => {\n    if (!selectedProject || !selectedEmployee) {\n      toast({\n        title: \"Error\",\n        description: \"Please select both a project and an employee\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    assignProjectMutation.mutate({\n      projectId: selectedProject,\n      employeeId: selectedEmployee,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Assign Project to Employee</DialogTitle>\n          <DialogDescription>\n            Select a project and an employee to assign\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Project</label>\n            <Select value={selectedProject} onValueChange={setSelectedProject}>\n              <SelectTrigger data-testid=\"select-assign-project\">\n                <SelectValue placeholder=\"Select a project\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projects.map(project => (\n                  <SelectItem key={project.id} value={project.id}>\n                    {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Employee</label>\n            <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>\n              <SelectTrigger data-testid=\"select-assign-employee\">\n                <SelectValue placeholder=\"Select an employee\" />\n              </SelectTrigger>\n              <SelectContent>\n                {employees.map(employee => (\n                  <SelectItem key={employee.id} value={employee.id.toString()}>\n                    {employee.fullName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-assign\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleAssign}\n              disabled={assignProjectMutation.isPending}\n              data-testid=\"button-submit-assign\"\n            >\n              {assignProjectMutation.isPending ? \"Assigning...\" : \"Assign Project\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":57316},"client/src/pages/employee-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from \"date-fns\";\nimport { useAuth, logout } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Task, Attendance, Salary, Project, Employee, EmployeeDocument } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  LogOut,\n  CheckCircle2,\n  Circle,\n  Clock,\n  Calendar,\n  DollarSign,\n  FileText,\n  Download,\n  User,\n  BarChart3,\n  CheckCheck,\n} from \"lucide-react\";\n\nexport default function EmployeeDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"all\");\n  const [selectedMonth, setSelectedMonth] = useState(() => format(new Date(), \"yyyy-MM\"));\n  const [updateTaskOpen, setUpdateTaskOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n\n  // Fetch employee details\n  const { data: employee } = useQuery<Employee>({\n    queryKey: [\"/api/employees\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/employees/${user?.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch employee\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch projects\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch tasks\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/tasks?employeeId=${user?.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch tasks\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch attendance for selected month\n  const { data: attendance = [] } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance\", user?.id, selectedMonth],\n    queryFn: async () => {\n      const res = await fetch(`/api/attendance?employeeId=${user?.id}&month=${selectedMonth}`);\n      if (!res.ok) throw new Error(\"Failed to fetch attendance\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch salaries\n  const { data: salaries = [] } = useQuery<Salary[]>({\n    queryKey: [\"/api/salaries\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/salaries?employeeId=${user?.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch salaries\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch employee documents\n  const { data: documents = [] } = useQuery<EmployeeDocument[]>({\n    queryKey: [\"/api/documents\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/documents?employeeId=${user?.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch documents\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Update task status mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, status, remarks }: { id: string; status: string; remarks?: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/tasks/${id}`, { status, remarks });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", user?.id] });\n      toast({\n        title: \"Task updated\",\n        description: \"Task status has been updated successfully.\",\n      });\n      setUpdateTaskOpen(false);\n      setSelectedTask(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark attendance mutation\n  const markAttendanceMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/attendance\", {\n        employeeId: user?.id,\n        attendanceDate: new Date().toISOString(),\n        isPresent: 1,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\", user?.id, selectedMonth] });\n      toast({\n        title: \"Attendance marked\",\n        description: \"Your attendance has been marked for today.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark attendance.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      window.location.href = \"/login\";\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Filter tasks by project\n  const filteredTasks = selectedProjectId === \"all\" \n    ? tasks \n    : tasks.filter(task => task.projectId === selectedProjectId);\n\n  // Get current month salary\n  const currentMonth = format(new Date(), \"yyyy-MM\");\n  const currentSalary = salaries.find(s => s.month === currentMonth);\n\n  // Check if attendance is already marked today\n  const today = new Date();\n  const isAttendanceMarkedToday = attendance.some(a => \n    isSameDay(parseISO(a.attendanceDate as any), today) && a.isPresent === 1\n  );\n\n  // Generate calendar days for selected month\n  const monthStart = startOfMonth(parseISO(`${selectedMonth}-01`));\n  const monthEnd = endOfMonth(parseISO(`${selectedMonth}-01`));\n  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  // Task status statistics\n  const taskStats = {\n    total: filteredTasks.length,\n    done: filteredTasks.filter(t => t.status === \"Done\").length,\n    inProgress: filteredTasks.filter(t => t.status === \"In Progress\").length,\n    undone: filteredTasks.filter(t => t.status === \"Undone\").length,\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"Done\":\n        return <CheckCircle2 className=\"w-4 h-4 text-green-500\" data-testid=\"icon-status-done\" />;\n      case \"In Progress\":\n        return <Clock className=\"w-4 h-4 text-yellow-500\" data-testid=\"icon-status-inprogress\" />;\n      default:\n        return <Circle className=\"w-4 h-4 text-muted-foreground\" data-testid=\"icon-status-undone\" />;\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"Done\":\n        return \"default\";\n      case \"In Progress\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const downloadSalarySlip = async () => {\n    if (!currentSalary) {\n      toast({\n        title: \"No salary data\",\n        description: \"No salary data available for the current month.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const { jsPDF } = await import(\"jspdf\");\n      const doc = new jsPDF();\n      \n      // Set colors\n      const primaryColor = [0, 188, 212]; // Cyan\n      const darkBg = [18, 24, 38];\n      const textColor = [255, 255, 255];\n      \n      // Header - ARKA Services branding\n      doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);\n      doc.rect(0, 0, 210, 40, 'F');\n      \n      doc.setTextColor(255, 255, 255);\n      doc.setFontSize(24);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"ARKA SERVICES\", 105, 20, { align: \"center\" });\n      \n      doc.setFontSize(10);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(\"arka.pk\", 105, 28, { align: \"center\" });\n      doc.text(\"Architecture & Interior Design\", 105, 34, { align: \"center\" });\n      \n      // Salary Slip Title\n      doc.setTextColor(0, 0, 0);\n      doc.setFontSize(18);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"SALARY SLIP\", 105, 55, { align: \"center\" });\n      \n      // Employee Details\n      doc.setFontSize(11);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(`Employee Name: ${user?.fullName}`, 20, 70);\n      doc.text(`Month: ${format(parseISO(`${currentSalary.month}-01`), \"MMMM yyyy\")}`, 20, 78);\n      \n      // Earnings Section\n      let yPos = 95;\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setFontSize(13);\n      doc.text(\"EARNINGS\", 20, yPos);\n      \n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(11);\n      yPos += 10;\n      doc.text(\"Basic Salary\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.basicSalary).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      yPos += 8;\n      doc.text(\"Incentives\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.incentives).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      yPos += 8;\n      doc.text(\"Medical Allowances\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.medical).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      // Total Earnings\n      const totalEarnings = Number(currentSalary.basicSalary) + Number(currentSalary.incentives) + Number(currentSalary.medical);\n      yPos += 12;\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"Total Earnings\", 25, yPos);\n      doc.text(`PKR ${totalEarnings.toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      // Deductions Section\n      yPos += 20;\n      doc.setFontSize(13);\n      doc.text(\"DEDUCTIONS\", 20, yPos);\n      \n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(11);\n      yPos += 10;\n      doc.text(\"Tax\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.tax).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      yPos += 8;\n      doc.text(\"Other Deductions\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.deductions).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      // Total Deductions\n      const totalDeductions = Number(currentSalary.tax) + Number(currentSalary.deductions);\n      yPos += 12;\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(\"Total Deductions\", 25, yPos);\n      doc.text(`PKR ${totalDeductions.toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      // Net Salary (highlighted)\n      yPos += 20;\n      doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);\n      doc.rect(15, yPos - 8, 180, 15, 'F');\n      \n      doc.setTextColor(255, 255, 255);\n      doc.setFontSize(14);\n      doc.text(\"NET SALARY\", 25, yPos);\n      doc.text(`PKR ${Number(currentSalary.netSalary).toLocaleString()}`, 160, yPos, { align: \"right\" });\n      \n      // Payment Status\n      doc.setTextColor(0, 0, 0);\n      doc.setFontSize(11);\n      doc.setFont(\"helvetica\", \"normal\");\n      yPos += 20;\n      doc.text(`Payment Status: ${currentSalary.isPaid ? 'PAID' : 'NOT PAID'}`, 20, yPos);\n      \n      if (currentSalary.paidDate) {\n        yPos += 8;\n        doc.text(`Payment Date: ${format(parseISO(currentSalary.paidDate as any), 'dd MMM yyyy')}`, 20, yPos);\n      }\n      \n      // Footer\n      doc.setFontSize(9);\n      doc.setTextColor(128, 128, 128);\n      doc.text(\"This is a computer-generated salary slip and does not require a signature.\", 105, 270, { align: \"center\" });\n      doc.text(\"For queries, please contact ARKA Services at arka.pk\", 105, 277, { align: \"center\" });\n      \n      // Save PDF\n      doc.save(`ARKA-Salary-Slip-${currentSalary.month}.pdf`);\n      \n      toast({\n        title: \"Downloaded\",\n        description: \"Salary slip PDF has been downloaded.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n              <BarChart3 className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                ARKA SERVICES\n              </h1>\n              <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                Employee Dashboard\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-3 px-4 py-2 rounded-md bg-card border border-border\">\n              <Avatar className=\"w-10 h-10\" data-testid=\"avatar-employee\">\n                <AvatarImage src={employee?.profilePicture || undefined} />\n                <AvatarFallback className=\"bg-primary/20 text-primary font-semibold\">\n                  {user?.fullName?.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-employee-name\">\n                  {user?.fullName}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">Employee</p>\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n              className=\"border-destructive/50 hover:border-destructive text-destructive\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto p-6 max-w-7xl\">\n        <Tabs defaultValue=\"tasks\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 max-w-2xl\" data-testid=\"tabs-dashboard\">\n            <TabsTrigger value=\"tasks\" data-testid=\"tab-tasks\">\n              <CheckCheck className=\"w-4 h-4 mr-2\" />\n              My Tasks\n            </TabsTrigger>\n            <TabsTrigger value=\"attendance\" data-testid=\"tab-attendance\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Attendance\n            </TabsTrigger>\n            <TabsTrigger value=\"salary\" data-testid=\"tab-salary\">\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Salary\n            </TabsTrigger>\n            <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Documents\n            </TabsTrigger>\n          </TabsList>\n\n          {/* My Tasks Tab */}\n          <TabsContent value=\"tasks\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm text-muted-foreground\">Total Tasks</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-tasks\">\n                    {taskStats.total}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm text-muted-foreground\">Completed</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-green-500\" data-testid=\"text-done-tasks\">\n                    {taskStats.done}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm text-muted-foreground\">In Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-yellow-500\" data-testid=\"text-inprogress-tasks\">\n                    {taskStats.inProgress}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm text-muted-foreground\">Pending</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-muted-foreground\" data-testid=\"text-undone-tasks\">\n                    {taskStats.undone}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <CardTitle>Task List</CardTitle>\n                  <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n                    <SelectTrigger className=\"w-64\" data-testid=\"select-project-filter\">\n                      <SelectValue placeholder=\"Filter by project\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Projects</SelectItem>\n                      {projects.map(project => (\n                        <SelectItem key={project.id} value={project.id}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-[500px]\">\n                  <div className=\"space-y-4\">\n                    {filteredTasks.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-tasks\">\n                        No tasks assigned yet.\n                      </p>\n                    ) : (\n                      filteredTasks.map(task => {\n                        const project = projects.find(p => p.id === task.projectId);\n                        return (\n                          <Card key={task.id} className=\"p-4\" data-testid={`card-task-${task.id}`}>\n                            <div className=\"flex items-start justify-between gap-4\">\n                              <div className=\"flex-1 space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  {getStatusIcon(task.status)}\n                                  <h4 className=\"font-semibold text-foreground\" data-testid={`text-task-type-${task.id}`}>\n                                    {task.taskType}\n                                  </h4>\n                                </div>\n                                {task.description && (\n                                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-task-description-${task.id}`}>\n                                    {task.description}\n                                  </p>\n                                )}\n                                {task.remarks && (\n                                  <p className=\"text-sm text-blue-500 italic\" data-testid={`text-task-remarks-${task.id}`}>\n                                    Remarks: {task.remarks}\n                                  </p>\n                                )}\n                                <div className=\"flex items-center gap-2 flex-wrap\">\n                                  <Badge variant=\"outline\" data-testid={`badge-project-${task.id}`}>\n                                    {project?.name || \"Unknown Project\"}\n                                  </Badge>\n                                  {task.dueDate && (\n                                    <Badge variant=\"secondary\" data-testid={`badge-duedate-${task.id}`}>\n                                      Due: {format(parseISO(task.dueDate as any), \"dd MMM yyyy\")}\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"flex flex-col gap-2\">\n                                <Badge \n                                  variant={task.status === \"Done\" ? \"default\" : task.status === \"In Progress\" ? \"secondary\" : \"outline\"}\n                                  data-testid={`badge-status-${task.id}`}\n                                >\n                                  {task.status}\n                                </Badge>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setSelectedTask(task);\n                                    setUpdateTaskOpen(true);\n                                  }}\n                                  data-testid={`button-update-task-${task.id}`}\n                                >\n                                  Update\n                                </Button>\n                              </div>\n                            </div>\n                          </Card>\n                        );\n                      })\n                    )}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Attendance Tab */}\n          <TabsContent value=\"attendance\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <CardTitle>Mark Attendance</CardTitle>\n                  <Button\n                    onClick={() => markAttendanceMutation.mutate()}\n                    disabled={isAttendanceMarkedToday || markAttendanceMutation.isPending}\n                    data-testid=\"button-mark-attendance\"\n                  >\n                    <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                    {isAttendanceMarkedToday ? \"Already Marked\" : \"Mark Today's Attendance\"}\n                  </Button>\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <CardTitle>Attendance Calendar</CardTitle>\n                  <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-month\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.from({ length: 12 }, (_, i) => {\n                        const date = new Date();\n                        date.setMonth(date.getMonth() - i);\n                        const monthValue = format(date, \"yyyy-MM\");\n                        return (\n                          <SelectItem key={monthValue} value={monthValue}>\n                            {format(date, \"MMMM yyyy\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-7 gap-2\">\n                  {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map(day => (\n                    <div key={day} className=\"text-center text-sm font-semibold text-muted-foreground p-2\">\n                      {day}\n                    </div>\n                  ))}\n                  {daysInMonth.map(day => {\n                    const attendanceRecord = attendance.find(a => \n                      isSameDay(parseISO(a.attendanceDate as any), day)\n                    );\n                    const isPresent = attendanceRecord?.isPresent === 1;\n                    const isToday = isSameDay(day, today);\n\n                    return (\n                      <div\n                        key={day.toISOString()}\n                        className={`\n                          aspect-square flex items-center justify-center rounded-md text-sm\n                          ${isToday ? \"border-2 border-primary\" : \"border border-border\"}\n                          ${isPresent ? \"bg-green-500/20 text-green-500 font-semibold\" : \"bg-card\"}\n                          ${!attendanceRecord && !isToday ? \"text-muted-foreground\" : \"\"}\n                        `}\n                        data-testid={`calendar-day-${format(day, \"yyyy-MM-dd\")}`}\n                      >\n                        {format(day, \"d\")}\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"mt-6 flex items-center gap-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded bg-green-500/20 border border-green-500\" />\n                    <span className=\"text-sm text-muted-foreground\">Present</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded bg-card border border-border\" />\n                    <span className=\"text-sm text-muted-foreground\">Absent</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded border-2 border-primary\" />\n                    <span className=\"text-sm text-muted-foreground\">Today</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Attendance Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 rounded-md bg-card border border-border\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Total Days</p>\n                    <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-days\">\n                      {daysInMonth.length}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-4 rounded-md bg-green-500/10 border border-green-500/30\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Present</p>\n                    <p className=\"text-3xl font-bold text-green-500\" data-testid=\"text-present-days\">\n                      {attendance.filter(a => a.isPresent === 1).length}\n                    </p>\n                  </div>\n                  <div className=\"text-center p-4 rounded-md bg-red-500/10 border border-red-500/30\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Absent</p>\n                    <p className=\"text-3xl font-bold text-red-500\" data-testid=\"text-absent-days\">\n                      {daysInMonth.length - attendance.filter(a => a.isPresent === 1).length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Salary Tab */}\n          <TabsContent value=\"salary\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <CardTitle>Current Month Salary</CardTitle>\n                  {currentSalary && (\n                    <Badge variant={currentSalary.isPaid ? \"default\" : \"secondary\"} data-testid=\"badge-payment-status\">\n                      {currentSalary.isPaid ? \"PAID\" : \"NOT PAID\"}\n                    </Badge>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {!currentSalary ? (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-salary\">\n                    No salary data available for the current month.\n                  </p>\n                ) : (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-semibold text-muted-foreground uppercase\">Earnings</h4>\n                        <Separator />\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-sm text-muted-foreground\">Basic Salary</span>\n                          <span className=\"text-sm font-semibold text-foreground\" data-testid=\"text-basic-salary\">\n                            PKR {Number(currentSalary.basicSalary).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-sm text-muted-foreground\">Incentives</span>\n                          <span className=\"text-sm font-semibold text-foreground\" data-testid=\"text-incentives\">\n                            PKR {Number(currentSalary.incentives).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-sm text-muted-foreground\">Medical</span>\n                          <span className=\"text-sm font-semibold text-foreground\" data-testid=\"text-medical\">\n                            PKR {Number(currentSalary.medical).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-semibold text-muted-foreground uppercase\">Deductions</h4>\n                        <Separator />\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-sm text-muted-foreground\">Tax</span>\n                          <span className=\"text-sm font-semibold text-destructive\" data-testid=\"text-tax\">\n                            PKR {Number(currentSalary.tax).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center py-2\">\n                          <span className=\"text-sm text-muted-foreground\">Other Deductions</span>\n                          <span className=\"text-sm font-semibold text-destructive\" data-testid=\"text-deductions\">\n                            PKR {Number(currentSalary.deductions).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"flex justify-between items-center p-4 rounded-md bg-primary/10 border border-primary/40\">\n                      <span className=\"text-lg font-semibold text-foreground\">Net Salary</span>\n                      <span className=\"text-2xl font-bold text-primary\" data-testid=\"text-net-salary\">\n                        PKR {Number(currentSalary.netSalary).toLocaleString()}\n                      </span>\n                    </div>\n\n                    <div className=\"flex justify-center\">\n                      <Button onClick={downloadSalarySlip} data-testid=\"button-download-slip\">\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download Salary Slip\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {salaries.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Salary History</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[300px]\">\n                    <div className=\"space-y-2\">\n                      {salaries.map(salary => (\n                        <div\n                          key={salary.id}\n                          className=\"flex items-center justify-between p-3 rounded-md bg-card border border-border hover-elevate\"\n                          data-testid={`card-salary-${salary.id}`}\n                        >\n                          <div>\n                            <p className=\"font-semibold text-foreground\" data-testid={`text-salary-month-${salary.id}`}>\n                              {format(parseISO(`${salary.month}-01`), \"MMMM yyyy\")}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Net: PKR {Number(salary.netSalary).toLocaleString()}\n                            </p>\n                          </div>\n                          <Badge variant={salary.isPaid ? \"default\" : \"secondary\"}>\n                            {salary.isPaid ? \"PAID\" : \"NOT PAID\"}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Documents Tab */}\n          <TabsContent value=\"documents\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"w-20 h-20\" data-testid=\"avatar-profile\">\n                      <AvatarImage src={employee?.profilePicture || undefined} />\n                      <AvatarFallback className=\"bg-primary/20 text-primary font-semibold text-2xl\">\n                        {user?.fullName?.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-foreground\" data-testid=\"text-profile-name\">\n                        {user?.fullName}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">Employee ID: {user?.username}</p>\n                    </div>\n                  </div>\n                  <Separator />\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {employee?.idCard && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">ID Card</p>\n                        <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-id-card\">\n                          {employee.idCard}\n                        </p>\n                      </div>\n                    )}\n                    {employee?.whatsapp && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">WhatsApp</p>\n                        <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-whatsapp\">\n                          {employee.whatsapp}\n                        </p>\n                      </div>\n                    )}\n                    {employee?.homeAddress && (\n                      <div className=\"md:col-span-2\">\n                        <p className=\"text-sm text-muted-foreground\">Home Address</p>\n                        <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-address\">\n                          {employee.homeAddress}\n                        </p>\n                      </div>\n                    )}\n                    {employee?.joiningDate && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Joining Date</p>\n                        <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-joining-date\">\n                          {format(parseISO(employee.joiningDate as any), \"dd MMM yyyy\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>My Documents</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {documents.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-documents\">\n                    No documents available yet. Contact HR to generate your documents.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {documents.map(doc => {\n                      const downloadDocument = () => {\n                        if (doc.generatedDocument) {\n                          const blob = new Blob([doc.generatedDocument], { type: \"text/plain\" });\n                          const url = URL.createObjectURL(blob);\n                          const a = document.createElement(\"a\");\n                          a.href = url;\n                          a.download = `${doc.documentType.replace(/ /g, \"-\")}-${user?.fullName}.txt`;\n                          document.body.appendChild(a);\n                          a.click();\n                          document.body.removeChild(a);\n                          URL.revokeObjectURL(url);\n\n                          toast({\n                            title: \"Downloaded\",\n                            description: `${doc.documentType} has been downloaded.`,\n                          });\n                        }\n                      };\n\n                      return (\n                        <div key={doc.id} className=\"flex items-center justify-between p-4 rounded-md bg-card border border-border\" data-testid={`card-document-${doc.id}`}>\n                          <div className=\"flex items-center gap-3\">\n                            <FileText className=\"w-5 h-5 text-primary\" />\n                            <div>\n                              <p className=\"font-semibold text-foreground\" data-testid={`text-document-type-${doc.id}`}>\n                                {doc.documentType}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Generated on {format(parseISO(doc.createdAt as any), \"dd MMM yyyy\")}\n                              </p>\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={downloadDocument}\n                            disabled={!doc.generatedDocument}\n                            data-testid={`button-download-${doc.documentType.replace(/ /g, \"-\").toLowerCase()}`}\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Update Task Dialog */}\n      <UpdateTaskDialog \n        open={updateTaskOpen}\n        onOpenChange={setUpdateTaskOpen}\n        task={selectedTask}\n        onUpdate={(status, remarks) => {\n          if (selectedTask) {\n            updateTaskMutation.mutate({ id: selectedTask.id, status, remarks });\n          }\n        }}\n        isUpdating={updateTaskMutation.isPending}\n      />\n    </div>\n  );\n}\n\n// Update Task Dialog Component\nfunction UpdateTaskDialog({\n  open,\n  onOpenChange,\n  task,\n  onUpdate,\n  isUpdating\n}: {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task: Task | null;\n  onUpdate: (status: string, remarks?: string) => void;\n  isUpdating: boolean;\n}) {\n  const [status, setStatus] = useState(task?.status || \"Undone\");\n  const [remarks, setRemarks] = useState(task?.remarks || \"\");\n\n  // Update local state when task changes\n  useEffect(() => {\n    if (task) {\n      setStatus(task.status);\n      setRemarks(task.remarks || \"\");\n    }\n  }, [task]);\n\n  const handleUpdate = () => {\n    onUpdate(status, remarks);\n  };\n\n  if (!task) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Update Task</DialogTitle>\n          <DialogDescription>\n            Update the status and add remarks for {task.taskType}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Status *</label>\n            <Select value={status} onValueChange={setStatus}>\n              <SelectTrigger data-testid=\"select-update-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Undone\">Undone</SelectItem>\n                <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Done\">Done</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Remarks / Comments</label>\n            <Textarea\n              value={remarks}\n              onChange={(e) => setRemarks(e.target.value)}\n              placeholder=\"Add remarks or comments about the task progress...\"\n              className=\"resize-none h-32\"\n              data-testid=\"input-task-remarks\"\n            />\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isUpdating}\n              data-testid=\"button-cancel-update\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpdate}\n              disabled={isUpdating}\n              data-testid=\"button-confirm-update\"\n            >\n              {isUpdating ? \"Updating...\" : \"Update Task\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":42634},"client/src/pages/procurement-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth, logout } from \"@/lib/auth\";\nimport { Project, ProcurementItem, InsertProcurementItem } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  ShoppingCart,\n  Package,\n  CheckCircle2,\n  DollarSign,\n  Plus,\n  LogOut,\n  ExternalLink,\n  Edit2,\n  Save,\n  X,\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Switch } from \"@/components/ui/switch\";\n\ninterface EditFormData {\n  executionCost?: number;\n  billNumber?: string;\n  rentalDetails?: string;\n  notes?: string;\n}\n\nexport default function ProcurementDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingItemId, setEditingItemId] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<EditFormData>({});\n\n  // Fetch projects\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch procurement items for all projects\n  const { data: allProcurement = [], isLoading } = useQuery<ProcurementItem[]>({\n    queryKey: [\"/api/procurement/all\"],\n    queryFn: async () => {\n      const procurementData: ProcurementItem[] = [];\n      for (const project of projects) {\n        try {\n          const res = await fetch(`/api/procurement?projectId=${project.id}`, {\n            credentials: \"include\",\n          });\n          if (res.ok) {\n            const data = await res.json();\n            procurementData.push(...data);\n          }\n        } catch (error) {\n          console.error(`Failed to fetch procurement for project ${project.id}`, error);\n        }\n      }\n      return procurementData;\n    },\n    enabled: projects.length > 0,\n  });\n\n  // Filter procurement items by selected project\n  const filteredProcurement =\n    selectedProject === \"all\"\n      ? allProcurement\n      : allProcurement.filter((item) => item.projectId === selectedProject);\n\n  // Calculate statistics\n  const stats = {\n    totalItems: filteredProcurement.length,\n    pendingPurchase: filteredProcurement.filter((item) => item.isPurchased === 0).length,\n    purchasedItems: filteredProcurement.filter((item) => item.isPurchased === 1).length,\n    totalCost: filteredProcurement.reduce(\n      (sum, item) => sum + Number(item.projectCost) * Number(item.quantity),\n      0\n    ),\n  };\n\n  // Update procurement item mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({\n      id,\n      updates,\n    }: {\n      id: string;\n      updates: Partial<ProcurementItem>;\n    }) => {\n      const res = await apiRequest(\"PATCH\", `/api/procurement/${id}`, updates);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/procurement/all\"] });\n      toast({\n        title: \"Success\",\n        description: \"Procurement item updated successfully\",\n      });\n      setEditingItemId(null);\n      setEditFormData({});\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update procurement item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add procurement item mutation\n  const addMutation = useMutation({\n    mutationFn: async (data: InsertProcurementItem) => {\n      const res = await apiRequest(\"POST\", \"/api/procurement\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/procurement/all\"] });\n      toast({\n        title: \"Success\",\n        description: \"Procurement item added successfully\",\n      });\n      setIsAddDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add procurement item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  const handleTogglePurchased = async (item: ProcurementItem) => {\n    const newStatus = item.isPurchased === 1 ? 0 : 1;\n    const updates: Partial<ProcurementItem> = {\n      isPurchased: newStatus,\n    };\n\n    if (newStatus === 1 && user) {\n      updates.purchasedBy = user.id;\n      updates.purchasedDate = new Date();\n    }\n\n    await updateMutation.mutateAsync({ id: item.id, updates });\n  };\n\n  const handleStartEdit = (item: ProcurementItem) => {\n    setEditingItemId(item.id);\n    setEditFormData({\n      executionCost: item.executionCost ? Number(item.executionCost) : undefined,\n      billNumber: item.billNumber || \"\",\n      rentalDetails: item.rentalDetails || \"\",\n      notes: item.notes || \"\",\n    });\n  };\n\n  const handleSaveEdit = async (itemId: string) => {\n    const updates: Partial<ProcurementItem> = {\n      billNumber: editFormData.billNumber,\n      rentalDetails: editFormData.rentalDetails,\n      notes: editFormData.notes,\n    };\n    \n    if (editFormData.executionCost !== undefined) {\n      updates.executionCost = String(editFormData.executionCost) as any;\n    }\n    \n    await updateMutation.mutateAsync({ id: itemId, updates });\n  };\n\n  const handleCancelEdit = () => {\n    setEditingItemId(null);\n    setEditFormData({});\n  };\n\n  const getProjectName = (projectId: string) => {\n    const project = projects.find((p) => p.id === projectId);\n    return project?.name || \"Unknown Project\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n              <ShoppingCart className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <a\n                href=\"https://arka.pk\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 group\"\n                data-testid=\"link-arka-website\"\n              >\n                <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                  ARKA SERVICES\n                </h1>\n                <ExternalLink className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n              </a>\n              <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                Procurement Dashboard\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-3 px-4 py-2 rounded-md bg-primary/10 border border-primary/40\">\n              <Avatar data-testid=\"avatar-user\">\n                <AvatarFallback className=\"bg-primary/20 text-primary font-display\">\n                  {user?.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase() || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-user-name\">\n                  {user?.fullName || \"User\"}\n                </p>\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wide\" data-testid=\"text-user-role\">\n                  Procurement\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"border-destructive/50 text-destructive hover:bg-destructive/10\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"max-w-[1800px] mx-auto space-y-6\">\n          {/* Overview Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"p-6 hover-elevate\" data-testid=\"card-total-items\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Total Items\n                  </p>\n                  <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-total-items\">\n                    {stats.totalItems}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n                  <Package className=\"w-6 h-6 text-primary\" />\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 hover-elevate\" data-testid=\"card-pending-purchase\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Pending Purchase\n                  </p>\n                  <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-pending-purchase\">\n                    {stats.pendingPurchase}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 rounded-md bg-orange-500/20 border border-orange-500/50 flex items-center justify-center\">\n                  <ShoppingCart className=\"w-6 h-6 text-orange-500\" />\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 hover-elevate\" data-testid=\"card-purchased-items\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Purchased Items\n                  </p>\n                  <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-purchased-items\">\n                    {stats.purchasedItems}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 rounded-md bg-green-500/20 border border-green-500/50 flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-6 h-6 text-green-500\" />\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 hover-elevate\" data-testid=\"card-total-cost\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                    Total Cost\n                  </p>\n                  <p className=\"text-3xl font-display font-bold text-foreground mt-1\" data-testid=\"text-total-cost\">\n                    {stats.totalCost.toLocaleString(\"en-PK\")}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">PKR</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-md bg-blue-500/20 border border-blue-500/50 flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-blue-500\" />\n                </div>\n              </div>\n            </Card>\n          </div>\n\n          {/* Procurement Items Table */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-lg font-display font-bold text-foreground\">\n                Procurement Items\n              </h2>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Label htmlFor=\"project-filter\" className=\"text-sm text-muted-foreground\">\n                    Filter by Project:\n                  </Label>\n                  <Select value={selectedProject} onValueChange={setSelectedProject}>\n                    <SelectTrigger className=\"w-[250px]\" data-testid=\"select-project-filter\">\n                      <SelectValue placeholder=\"Select project\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Projects</SelectItem>\n                      {projects.map((project) => (\n                        <SelectItem key={project.id} value={project.id}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"default\" size=\"sm\" data-testid=\"button-add-item\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Item\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Add Procurement Item</DialogTitle>\n                      <DialogDescription>\n                        Add a new procurement item to track purchases\n                      </DialogDescription>\n                    </DialogHeader>\n                    <AddProcurementForm\n                      projects={projects}\n                      onSubmit={(data) => addMutation.mutate(data)}\n                      isLoading={addMutation.isPending}\n                    />\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary border-r-transparent\" data-testid=\"loader-procurement\"></div>\n                <p className=\"mt-4 text-muted-foreground\">Loading procurement items...</p>\n              </div>\n            ) : filteredProcurement.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-items\">\n                  No procurement items found\n                </p>\n              </div>\n            ) : (\n              <div className=\"border rounded-md\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Item Name</TableHead>\n                      <TableHead>Project</TableHead>\n                      <TableHead>Quantity</TableHead>\n                      <TableHead>Unit</TableHead>\n                      <TableHead>Project Cost</TableHead>\n                      <TableHead>Execution Cost</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Bill Number</TableHead>\n                      <TableHead>Rental Details</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredProcurement.map((item) => (\n                      <TableRow key={item.id} data-testid={`row-item-${item.id}`}>\n                        <TableCell className=\"font-medium\">{item.itemName}</TableCell>\n                        <TableCell>{getProjectName(item.projectId)}</TableCell>\n                        <TableCell>{Number(item.quantity).toLocaleString()}</TableCell>\n                        <TableCell>{item.unit}</TableCell>\n                        <TableCell>\n                          {(Number(item.projectCost) * Number(item.quantity)).toLocaleString(\"en-PK\")} PKR\n                        </TableCell>\n                        <TableCell>\n                          {editingItemId === item.id ? (\n                            <Input\n                              type=\"number\"\n                              value={editFormData.executionCost !== undefined ? String(editFormData.executionCost) : \"\"}\n                              onChange={(e) =>\n                                setEditFormData({\n                                  ...editFormData,\n                                  executionCost: e.target.value ? Number(e.target.value) : undefined,\n                                })\n                              }\n                              className=\"w-32\"\n                              data-testid={`input-execution-cost-${item.id}`}\n                            />\n                          ) : item.executionCost ? (\n                            `${(Number(item.executionCost) * Number(item.quantity)).toLocaleString(\"en-PK\")} PKR`\n                          ) : (\n                            <span className=\"text-muted-foreground\">Not set</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Switch\n                              checked={item.isPurchased === 1}\n                              onCheckedChange={() => handleTogglePurchased(item)}\n                              disabled={updateMutation.isPending}\n                              data-testid={`switch-purchased-${item.id}`}\n                            />\n                            <Badge variant={item.isPurchased === 1 ? \"default\" : \"secondary\"}>\n                              {item.isPurchased === 1 ? \"Purchased\" : \"Pending\"}\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {editingItemId === item.id ? (\n                            <Input\n                              value={editFormData.billNumber || \"\"}\n                              onChange={(e) =>\n                                setEditFormData({ ...editFormData, billNumber: e.target.value })\n                              }\n                              className=\"w-32\"\n                              placeholder=\"Bill #\"\n                              data-testid={`input-bill-number-${item.id}`}\n                            />\n                          ) : item.billNumber ? (\n                            item.billNumber\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {editingItemId === item.id ? (\n                            <Input\n                              value={editFormData.rentalDetails || \"\"}\n                              onChange={(e) =>\n                                setEditFormData({ ...editFormData, rentalDetails: e.target.value })\n                              }\n                              className=\"w-32\"\n                              placeholder=\"RFT, SFT, etc.\"\n                              data-testid={`input-rental-details-${item.id}`}\n                            />\n                          ) : item.rentalDetails ? (\n                            item.rentalDetails\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {editingItemId === item.id ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => handleSaveEdit(item.id)}\n                                disabled={updateMutation.isPending}\n                                data-testid={`button-save-${item.id}`}\n                              >\n                                <Save className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={handleCancelEdit}\n                                disabled={updateMutation.isPending}\n                                data-testid={`button-cancel-${item.id}`}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ) : (\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => handleStartEdit(item)}\n                              data-testid={`button-edit-${item.id}`}\n                            >\n                              <Edit2 className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AddProcurementForm({\n  projects,\n  onSubmit,\n  isLoading,\n}: {\n  projects: Project[];\n  onSubmit: (data: InsertProcurementItem) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState<Partial<InsertProcurementItem>>({\n    projectId: \"\",\n    itemName: \"\",\n    quantity: 0,\n    unit: \"\",\n    projectCost: 0,\n    executionCost: 0,\n    billNumber: \"\",\n    rentalDetails: \"\",\n    notes: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (\n      !formData.projectId ||\n      !formData.itemName ||\n      !formData.quantity ||\n      !formData.unit ||\n      formData.projectCost === undefined\n    ) {\n      return;\n    }\n    onSubmit(formData as InsertProcurementItem);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"project\">Project *</Label>\n          <Select\n            value={formData.projectId}\n            onValueChange={(value) => setFormData({ ...formData, projectId: value })}\n          >\n            <SelectTrigger data-testid=\"select-project\">\n              <SelectValue placeholder=\"Select project\" />\n            </SelectTrigger>\n            <SelectContent>\n              {projects.map((project) => (\n                <SelectItem key={project.id} value={project.id}>\n                  {project.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"itemName\">Item Name *</Label>\n          <Input\n            id=\"itemName\"\n            value={formData.itemName}\n            onChange={(e) => setFormData({ ...formData, itemName: e.target.value })}\n            placeholder=\"e.g., Steel Beams\"\n            data-testid=\"input-item-name\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"quantity\">Quantity *</Label>\n          <Input\n            id=\"quantity\"\n            type=\"number\"\n            value={formData.quantity}\n            onChange={(e) => setFormData({ ...formData, quantity: Number(e.target.value) })}\n            placeholder=\"0\"\n            data-testid=\"input-quantity\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"unit\">Unit *</Label>\n          <Input\n            id=\"unit\"\n            value={formData.unit}\n            onChange={(e) => setFormData({ ...formData, unit: e.target.value })}\n            placeholder=\"e.g., pieces, kg, rft, sft\"\n            data-testid=\"input-unit\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"projectCost\">Project Cost (per unit) *</Label>\n          <Input\n            id=\"projectCost\"\n            type=\"number\"\n            value={formData.projectCost}\n            onChange={(e) => setFormData({ ...formData, projectCost: Number(e.target.value) })}\n            placeholder=\"0\"\n            data-testid=\"input-project-cost\"\n          />\n          <p className=\"text-xs text-muted-foreground\">Cost visible to client</p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"executionCost\">Execution Cost (per unit)</Label>\n          <Input\n            id=\"executionCost\"\n            type=\"number\"\n            value={formData.executionCost}\n            onChange={(e) =>\n              setFormData({ ...formData, executionCost: Number(e.target.value) })\n            }\n            placeholder=\"0\"\n            data-testid=\"input-execution-cost\"\n          />\n          <p className=\"text-xs text-muted-foreground\">Actual cost, visible only to principle</p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"billNumber\">Bill Number</Label>\n          <Input\n            id=\"billNumber\"\n            value={formData.billNumber || \"\"}\n            onChange={(e) => setFormData({ ...formData, billNumber: e.target.value })}\n            placeholder=\"Optional\"\n            data-testid=\"input-bill-number\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"rentalDetails\">Rental Details</Label>\n          <Input\n            id=\"rentalDetails\"\n            value={formData.rentalDetails || \"\"}\n            onChange={(e) => setFormData({ ...formData, rentalDetails: e.target.value })}\n            placeholder=\"e.g., RFT, SFT\"\n            data-testid=\"input-rental-details\"\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"notes\">Notes</Label>\n        <Textarea\n          id=\"notes\"\n          value={formData.notes || \"\"}\n          onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n          placeholder=\"Additional notes...\"\n          rows={3}\n          data-testid=\"textarea-notes\"\n        />\n      </div>\n\n      <div className=\"flex justify-end gap-2\">\n        <Button type=\"submit\" disabled={isLoading} data-testid=\"button-submit-procurement\">\n          {isLoading ? \"Adding...\" : \"Add Procurement Item\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":27191},"client/src/pages/client-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth, logout } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Project, \n  ProjectAssignment, \n  Division, \n  Item, \n  Task, \n  Comment, \n  ProjectFinancials,\n  User,\n} from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  LogOut,\n  ExternalLink,\n  Briefcase,\n  CheckCircle2,\n  AlertCircle,\n  TrendingUp,\n  Calendar,\n  DollarSign,\n  FileText,\n  MessageSquare,\n  Users,\n  Package,\n  ArrowLeft,\n  Send,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface ProjectWithDetails extends Project {\n  financials?: ProjectFinancials;\n  health: \"excellent\" | \"good\" | \"warning\" | \"critical\";\n  score: number;\n}\n\nexport default function ClientDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);\n  const [newComment, setNewComment] = useState(\"\");\n\n  // Fetch project assignments for this client\n  const { data: assignments = [] } = useQuery<ProjectAssignment[]>({\n    queryKey: [\"/api/assignments\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/assignments?userId=${user?.id}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch assignments\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get assigned project IDs\n  const assignedProjectIds = assignments.map(a => a.projectId);\n\n  // Fetch all projects\n  const { data: allProjects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Filter to only assigned projects\n  const assignedProjects = allProjects.filter(p => assignedProjectIds.includes(p.id));\n\n  // Fetch divisions for selected project\n  const { data: divisions = [] } = useQuery<Division[]>({\n    queryKey: [\"/api/divisions\", selectedProjectId],\n    queryFn: async () => {\n      const res = await fetch(`/api/divisions?projectId=${selectedProjectId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch divisions\");\n      return res.json();\n    },\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch items for selected project\n  const { data: items = [] } = useQuery<Item[]>({\n    queryKey: [\"/api/items\", selectedProjectId],\n    queryFn: async () => {\n      const res = await fetch(`/api/items?projectId=${selectedProjectId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch items\");\n      return res.json();\n    },\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch tasks for selected project\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", selectedProjectId],\n    queryFn: async () => {\n      const res = await fetch(`/api/tasks?projectId=${selectedProjectId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch tasks\");\n      return res.json();\n    },\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch financials for selected project\n  const { data: financials } = useQuery<ProjectFinancials>({\n    queryKey: [\"/api/financials\", selectedProjectId],\n    queryFn: async () => {\n      const res = await fetch(`/api/financials/${selectedProjectId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) return null;\n      return res.json();\n    },\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch comments for selected project\n  const { data: comments = [] } = useQuery<Comment[]>({\n    queryKey: [\"/api/comments\", selectedProjectId],\n    queryFn: async () => {\n      const res = await fetch(`/api/comments?projectId=${selectedProjectId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch comments\");\n      return res.json();\n    },\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch all users for displaying employee names\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/users\", {\n        credentials: \"include\",\n      });\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  // Add comment mutation\n  const addCommentMutation = useMutation({\n    mutationFn: async (comment: string) => {\n      const res = await apiRequest(\"POST\", \"/api/comments\", {\n        projectId: selectedProjectId,\n        userId: user?.id,\n        comment,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/comments\", selectedProjectId] });\n      setNewComment(\"\");\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add comment.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate project health with financials\n  const projectsWithDetails: ProjectWithDetails[] = assignedProjects.map(project => {\n    // Get tasks for this project\n    const projectTasks = tasks.filter(t => t.projectId === project.id);\n    const completedTasks = projectTasks.filter(t => t.status === \"Done\").length;\n    const totalTasks = projectTasks.length;\n    const taskCompletion = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 100;\n\n    // Get items for this project\n    const projectItems = items.filter(i => {\n      const itemDivision = divisions.find(d => d.id === i.divisionId);\n      return itemDivision?.projectId === project.id;\n    });\n    const completedItems = projectItems.filter(i => i.status === \"Installed\" || i.status === \"Delivered\").length;\n    const totalItems = projectItems.length;\n    const itemCompletion = totalItems > 0 ? (completedItems / totalItems) * 100 : 100;\n\n    const score = (taskCompletion + itemCompletion) / 2;\n    \n    let health: ProjectWithDetails[\"health\"] = \"excellent\";\n    if (score < 40) health = \"critical\";\n    else if (score < 60) health = \"warning\";\n    else if (score < 80) health = \"good\";\n\n    return { ...project, health, score };\n  });\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAddComment = () => {\n    if (!newComment.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a comment.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addCommentMutation.mutate(newComment);\n  };\n\n  const getHealthColor = (health: ProjectWithDetails[\"health\"]) => {\n    switch (health) {\n      case \"excellent\":\n        return \"text-green-500 border-green-500/50 bg-green-500/10\";\n      case \"good\":\n        return \"text-blue-500 border-blue-500/50 bg-blue-500/10\";\n      case \"warning\":\n        return \"text-yellow-500 border-yellow-500/50 bg-yellow-500/10\";\n      case \"critical\":\n        return \"text-red-500 border-red-500/50 bg-red-500/10\";\n    }\n  };\n\n  const getHealthIcon = (health: ProjectWithDetails[\"health\"]) => {\n    switch (health) {\n      case \"excellent\":\n        return <CheckCircle2 className=\"w-5 h-5\" />;\n      case \"good\":\n        return <TrendingUp className=\"w-5 h-5\" />;\n      case \"warning\":\n      case \"critical\":\n        return <AlertCircle className=\"w-5 h-5\" />;\n    }\n  };\n\n  const selectedProject = projectsWithDetails.find(p => p.id === selectedProjectId);\n  const selectedFinancials = financials;\n\n  // Calculate overall progress for selected project\n  const calculateProgress = () => {\n    if (!selectedProjectId) return 0;\n    \n    const projectItems = items.filter(i => {\n      const itemDivision = divisions.find(d => d.id === i.divisionId);\n      return itemDivision?.projectId === selectedProjectId;\n    });\n    \n    const completedItems = projectItems.filter(i => \n      i.status === \"Installed\" || i.status === \"Delivered\"\n    ).length;\n    \n    return projectItems.length > 0 ? (completedItems / projectItems.length) * 100 : 0;\n  };\n\n  // Group items by division\n  const itemsByDivision = divisions.map(div => ({\n    division: div,\n    items: items.filter(i => i.divisionId === div.id),\n  }));\n\n  // Group tasks by employee\n  const tasksByEmployee = tasks.reduce((acc, task) => {\n    const employeeId = task.employeeId;\n    if (!acc[employeeId]) {\n      acc[employeeId] = [];\n    }\n    acc[employeeId].push(task);\n    return acc;\n  }, {} as Record<string, Task[]>);\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-primary/30 bg-card/50 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-md bg-primary/20 border border-primary/50 flex items-center justify-center\">\n              <Briefcase className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <a\n                href=\"https://arka.pk\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 group\"\n                data-testid=\"link-arka-website\"\n              >\n                <h1 className=\"text-2xl font-display font-bold text-foreground tracking-wide\">\n                  ARKA SERVICES\n                </h1>\n                <ExternalLink className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n              </a>\n              <p className=\"text-xs text-muted-foreground uppercase tracking-widest\">\n                Client Portal\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-3 px-4 py-2 rounded-md bg-primary/10 border border-primary/40\">\n              <Avatar data-testid=\"avatar-client\">\n                <AvatarFallback className=\"bg-primary/20 text-primary font-display\">\n                  {user?.fullName?.split(\" \").map((n) => n[0]).join(\"\").toUpperCase() || \"CL\"}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-semibold text-foreground\" data-testid=\"text-client-name\">\n                  {user?.fullName || \"Client\"}\n                </p>\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wide\">\n                  Client\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"border-destructive/50 text-destructive hover:bg-destructive/10\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"max-w-[1600px] mx-auto space-y-6\">\n          {!selectedProjectId ? (\n            /* My Projects View */\n            <>\n              <div className=\"flex items-center gap-3 mb-6\">\n                <Briefcase className=\"w-6 h-6 text-primary\" />\n                <h2 className=\"text-2xl font-display font-bold text-foreground\">\n                  My Projects\n                </h2>\n              </div>\n\n              {projectsWithDetails.length === 0 ? (\n                <Card className=\"p-12\">\n                  <div className=\"text-center\">\n                    <Briefcase className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-foreground mb-2\" data-testid=\"text-no-projects\">\n                      No Projects Assigned\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      You don't have any projects assigned yet. Please contact ARKA Services for assistance.\n                    </p>\n                  </div>\n                </Card>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {projectsWithDetails.map(project => (\n                    <Card\n                      key={project.id}\n                      className={`p-6 border cursor-pointer hover-elevate ${getHealthColor(project.health)}`}\n                      onClick={() => setSelectedProjectId(project.id)}\n                      data-testid={`card-project-${project.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-display font-bold text-foreground mb-1\" data-testid={`text-project-name-${project.id}`}>\n                            {project.name}\n                          </h3>\n                          {project.projectTitle && (\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-project-title-${project.id}`}>\n                              {project.projectTitle}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {getHealthIcon(project.health)}\n                          <span className=\"text-sm font-mono font-bold\" data-testid={`text-health-score-${project.id}`}>\n                            {project.score.toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n\n                      <Separator className=\"mb-4\" />\n\n                      <div className=\"space-y-3\">\n                        {project.startDate && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"text-muted-foreground\">Start:</span>\n                            <span className=\"text-foreground font-medium\" data-testid={`text-start-date-${project.id}`}>\n                              {format(new Date(project.startDate), \"dd MMM yyyy\")}\n                            </span>\n                          </div>\n                        )}\n\n                        {project.deliveryDate && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"text-muted-foreground\">Delivery:</span>\n                            <span className=\"text-foreground font-medium\" data-testid={`text-delivery-date-${project.id}`}>\n                              {format(new Date(project.deliveryDate), \"dd MMM yyyy\")}\n                            </span>\n                          </div>\n                        )}\n\n                        <div className=\"pt-2\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n                              Progress\n                            </span>\n                            <span className=\"text-xs font-mono font-bold text-foreground\" data-testid={`text-progress-${project.id}`}>\n                              {project.score.toFixed(0)}%\n                            </span>\n                          </div>\n                          <Progress value={project.score} className=\"h-2\" />\n                        </div>\n\n                        <Badge variant=\"outline\" className=\"capitalize w-full justify-center\">\n                          {project.health}\n                        </Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </>\n          ) : (\n            /* Project Details View */\n            <>\n              <div className=\"flex items-center gap-4 mb-6\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedProjectId(null)}\n                  data-testid=\"button-back\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Projects\n                </Button>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-display font-bold text-foreground\" data-testid=\"text-selected-project-name\">\n                    {selectedProject?.name}\n                  </h2>\n                  {selectedProject?.projectTitle && (\n                    <p className=\"text-muted-foreground\">{selectedProject.projectTitle}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Project Overview */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card className=\"p-6\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <TrendingUp className=\"w-5 h-5 text-primary\" />\n                    <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">\n                      Health Score\n                    </h3>\n                  </div>\n                  <p className={`text-4xl font-display font-bold ${getHealthColor(selectedProject?.health || \"good\")}`} data-testid=\"text-detail-health-score\">\n                    {selectedProject?.score.toFixed(0)}%\n                  </p>\n                  <Badge variant=\"outline\" className=\"mt-2 capitalize\">\n                    {selectedProject?.health}\n                  </Badge>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Package className=\"w-5 h-5 text-blue-500\" />\n                    <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">\n                      Overall Progress\n                    </h3>\n                  </div>\n                  <p className=\"text-4xl font-display font-bold text-foreground\" data-testid=\"text-detail-progress\">\n                    {calculateProgress().toFixed(0)}%\n                  </p>\n                  <Progress value={calculateProgress()} className=\"h-2 mt-2\" />\n                </Card>\n\n                {selectedFinancials && (\n                  <Card className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <DollarSign className=\"w-5 h-5 text-green-500\" />\n                      <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">\n                        Payment Status\n                      </h3>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Received: <span className=\"font-semibold text-foreground\" data-testid=\"text-amount-received\">\n                          PKR {Number(selectedFinancials.amountReceived).toLocaleString()}\n                        </span>\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Contract: <span className=\"font-semibold text-foreground\" data-testid=\"text-contract-value\">\n                          PKR {Number(selectedFinancials.contractValue).toLocaleString()}\n                        </span>\n                      </p>\n                      <Progress \n                        value={(Number(selectedFinancials.amountReceived) / Number(selectedFinancials.contractValue)) * 100} \n                        className=\"h-2 mt-2\" \n                      />\n                    </div>\n                  </Card>\n                )}\n              </div>\n\n              {/* Divisions and Items */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <FileText className=\"w-5 h-5 text-primary\" />\n                  <h3 className=\"text-lg font-display font-bold text-foreground\">\n                    Division & Item Breakdown\n                  </h3>\n                </div>\n                <ScrollArea className=\"h-[400px]\">\n                  <div className=\"space-y-4\">\n                    {itemsByDivision.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-divisions\">\n                        No divisions found for this project.\n                      </p>\n                    ) : (\n                      itemsByDivision.map(({ division, items: divItems }) => (\n                        <Card key={division.id} className=\"p-4\" data-testid={`card-division-${division.id}`}>\n                          <h4 className=\"font-semibold text-foreground mb-3\" data-testid={`text-division-name-${division.id}`}>\n                            {division.name}\n                          </h4>\n                          <div className=\"space-y-2\">\n                            {divItems.length === 0 ? (\n                              <p className=\"text-sm text-muted-foreground\">No items in this division.</p>\n                            ) : (\n                              divItems.map(item => (\n                                <div key={item.id} className=\"flex items-center justify-between gap-4 py-2 border-b border-border last:border-0\" data-testid={`item-${item.id}`}>\n                                  <div className=\"flex-1\">\n                                    <p className=\"text-sm text-foreground\" data-testid={`text-item-desc-${item.id}`}>\n                                      {item.description}\n                                    </p>\n                                    <p className=\"text-xs text-muted-foreground\">\n                                      {Number(item.quantity).toLocaleString()} {item.unit} @ PKR {Number(item.rate).toLocaleString()}\n                                    </p>\n                                  </div>\n                                  <div className=\"flex items-center gap-3\">\n                                    <Badge variant=\"outline\" className=\"capitalize\" data-testid={`badge-priority-${item.id}`}>\n                                      {item.priority}\n                                    </Badge>\n                                    <Badge variant={item.status === \"Delivered\" || item.status === \"Installed\" ? \"default\" : \"secondary\"} data-testid={`badge-status-${item.id}`}>\n                                      {item.status}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              ))\n                            )}\n                          </div>\n                        </Card>\n                      ))\n                    )}\n                  </div>\n                </ScrollArea>\n              </Card>\n\n              {/* Task Progress by Employee */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <h3 className=\"text-lg font-display font-bold text-foreground\">\n                    Task Progress by Employee\n                  </h3>\n                </div>\n                <ScrollArea className=\"h-[300px]\">\n                  <div className=\"space-y-4\">\n                    {Object.keys(tasksByEmployee).length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-tasks\">\n                        No tasks assigned for this project.\n                      </p>\n                    ) : (\n                      Object.entries(tasksByEmployee).map(([employeeId, empTasks]) => {\n                        const employee = users.find(u => u.id === employeeId);\n                        const completedTasks = empTasks.filter(t => t.status === \"Done\").length;\n                        const progress = (completedTasks / empTasks.length) * 100;\n\n                        return (\n                          <Card key={employeeId} className=\"p-4\" data-testid={`card-employee-${employeeId}`}>\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div className=\"flex items-center gap-3\">\n                                <Avatar>\n                                  <AvatarFallback className=\"bg-primary/20 text-primary\">\n                                    {employee?.fullName?.charAt(0).toUpperCase() || \"E\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <p className=\"font-semibold text-foreground\" data-testid={`text-employee-name-${employeeId}`}>\n                                    {employee?.fullName || \"Unknown Employee\"}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {completedTasks} of {empTasks.length} tasks completed\n                                  </p>\n                                </div>\n                              </div>\n                              <span className=\"text-sm font-mono font-bold text-foreground\" data-testid={`text-employee-progress-${employeeId}`}>\n                                {progress.toFixed(0)}%\n                              </span>\n                            </div>\n                            <Progress value={progress} className=\"h-2 mb-3\" />\n                            <div className=\"space-y-1\">\n                              {empTasks.map(task => (\n                                <div key={task.id} className=\"flex items-center justify-between text-sm\">\n                                  <span className=\"text-muted-foreground\" data-testid={`text-task-type-${task.id}`}>\n                                    {task.taskType}\n                                  </span>\n                                  <Badge \n                                    variant={task.status === \"Done\" ? \"default\" : task.status === \"In Progress\" ? \"secondary\" : \"outline\"}\n                                    data-testid={`badge-task-status-${task.id}`}\n                                  >\n                                    {task.status}\n                                  </Badge>\n                                </div>\n                              ))}\n                            </div>\n                          </Card>\n                        );\n                      })\n                    )}\n                  </div>\n                </ScrollArea>\n              </Card>\n\n              {/* Comments Section */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <MessageSquare className=\"w-5 h-5 text-primary\" />\n                  <h3 className=\"text-lg font-display font-bold text-foreground\">\n                    Comments\n                  </h3>\n                </div>\n                <ScrollArea className=\"h-[300px] mb-4\">\n                  <div className=\"space-y-4\">\n                    {comments.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-comments\">\n                        No comments yet. Be the first to comment!\n                      </p>\n                    ) : (\n                      comments.map(comment => {\n                        const commentUser = users.find(u => u.id === comment.userId);\n                        return (\n                          <div key={comment.id} className=\"flex gap-3\" data-testid={`comment-${comment.id}`}>\n                            <Avatar>\n                              <AvatarFallback className=\"bg-primary/20 text-primary\">\n                                {commentUser?.fullName?.charAt(0).toUpperCase() || \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <p className=\"font-semibold text-foreground text-sm\" data-testid={`text-comment-user-${comment.id}`}>\n                                  {commentUser?.fullName || \"Unknown User\"}\n                                </p>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {format(new Date(comment.createdAt), \"dd MMM yyyy, HH:mm\")}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-foreground\" data-testid={`text-comment-content-${comment.id}`}>\n                                {comment.comment}\n                              </p>\n                            </div>\n                          </div>\n                        );\n                      })\n                    )}\n                  </div>\n                </ScrollArea>\n\n                <div className=\"flex gap-3\">\n                  <Textarea\n                    placeholder=\"Add a comment...\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    className=\"flex-1\"\n                    rows={3}\n                    data-testid=\"textarea-comment\"\n                  />\n                  <Button\n                    onClick={handleAddComment}\n                    disabled={addCommentMutation.isPending || !newComment.trim()}\n                    data-testid=\"button-add-comment\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </Card>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30436},"CHANGELOG.md":{"content":"# Changelog\n\nAll notable changes to the ARKA Services Project Management application.\n\n---\n\n## [1.3.0] - 2025-10-22\n\n### Fixed\n\n#### Critical Deployment Health Check Issues (DEPLOYMENT READY)\n- **Moved health check to absolute first position**: Health check endpoint now registered before ANY imports or middleware\n  - Health check responds instantly without waiting for database connections or module imports\n  - No blocking operations before health check registration\n  - Deployment platform health checks now pass immediately\n- **Removed database seeding from server startup**: Database seeding no longer runs during server initialization\n  - Prevents blocking the health check response\n  - Eliminates startup delays that caused deployment timeouts\n  - Server starts instantly and responds to health checks immediately\n- **Separated database seeding into manual process**: Seeding is now a one-time setup operation\n  - Run manually using: `tsx server/seed.ts`\n  - Does not interfere with deployment health checks\n  - Safe for production deployments\n\n### Changed\n\n#### Server Initialization\n- **Reorganized import order**: Routes and auth modules imported AFTER health check is established\n- **Instant health check response**: Health check endpoint returns 200 OK without any async operations\n- **Non-blocking startup**: Server listens on port immediately without waiting for database operations\n\n#### Database Management\n- **Manual seeding workflow**: Database must be seeded separately before first use\n- **Command**: Run `tsx server/seed.ts` to create default users\n- **Default users remain**: ZARA (principle) and procurement users created via manual seeding\n\n---\n\n## [1.2.0] - 2025-10-22\n\n### Fixed\n\n#### Deployment Configuration\n- **Identified and documented .replit port configuration issue**: Multiple external ports were causing 5xx errors during Autoscale deployments\n  - Replit Autoscale deployments require exactly ONE external port to be exposed\n  - Additional ports (3000, 3001) caused health check failures and 5xx errors\n  - **Action Required**: Manual edit of `.replit` file to remove extra port configurations (see Deployment Guide below)\n- **Verified build process**: Confirmed `npm run build` works correctly and produces production-ready artifacts\n- **Verified application functionality**: All features tested and working (authentication, dashboards, role-based access)\n\n### Testing\n- **End-to-end testing**: Validated login flow, dashboard loading, and logout functionality\n- **Authentication testing**: Confirmed case-insensitive login works as expected\n- **Build verification**: Confirmed production build completes successfully without errors\n\n---\n\n## Deployment Guide for Publishing\n\n### Prerequisites Before Publishing\n\n#### 1. Fix Port Configuration\n\nYour `.replit` file has **multiple external ports** configured. Replit Autoscale deployments require **exactly ONE external port**.\n\n**Steps:**\n1. Open the `.replit` file in your Replit workspace\n2. Find the `[[ports]]` section (around lines 13-23)\n3. **Remove** the extra port configurations for ports 3000 and 3001\n4. Keep ONLY the port 5000 → 80 mapping\n\n**Current Configuration (CAUSES 5XX ERRORS):**\n```\n[[ports]]\nlocalPort = 5000\nexternalPort = 80\n\n[[ports]]\nlocalPort = 36287\nexternalPort = 3001\n\n[[ports]]\nlocalPort = 40563\nexternalPort = 3000\n```\n\n**Corrected Configuration (READY FOR PUBLISHING):**\n```\n[[ports]]\nlocalPort = 5000\nexternalPort = 80\n```\n\n#### 2. Seed the Database (First Time Only - BEFORE Publishing)\n\nYou need to seed the database to create default users. This is a **one-time setup** that must be done **before publishing**.\n\n**Run this in your workspace shell:**\n```bash\ntsx server/seed.ts\n```\n\nThis creates the default users:\n- **Principle**: username `ZARA` / password `saroshahsato`\n- **Procurement**: username `procurement` / password `procurement123`\n\n**Important:** Since your development and production use the same PostgreSQL database, seeding once in your workspace will make the users available in both environments. There is no shell access in deployed apps, so you must seed before publishing.\n\n### Publishing Steps\n\n1. **Seed the database first** (run `tsx server/seed.ts` in workspace shell)\n2. Fix the `.replit` port configuration (see above)\n3. Save the `.replit` file\n4. Click the **Publish** button in your Replit workspace\n5. Choose **Autoscale** deployment\n6. If you get environment variable errors, manually add `SESSION_SECRET` and `DATABASE_URL` in deployment settings\n7. Wait for deployment to complete (~30 seconds)\n8. Your application is now live with default users ready!\n\n### Deployment Verification\n\n✅ **Build Process**: Verified working (`npm run build` completes successfully)  \n✅ **Health Checks**: Instant response without blocking operations  \n✅ **Session Store**: Configured for production with PostgreSQL  \n✅ **Database Seeding**: Removed from startup (manual one-time setup)  \n✅ **Application Testing**: All features tested and working  \n✅ **Server Startup**: Non-blocking, responds to health checks immediately  \n⚠️ **Port Configuration**: Requires manual fix (see above)  \n⚠️ **Database Seeding**: Requires manual one-time setup (see above)\n\n### What Happens During Publishing\n\n1. Replit runs `npm run build` to create production bundle\n2. Starts server with `npm run start` (production mode)\n3. Server binds to `0.0.0.0:5000` (accessible externally)\n4. Health check endpoint `/` responds **immediately** (no blocking operations)\n5. Server starts **instantly** without database seeding\n6. Session store uses PostgreSQL for persistence\n7. Application becomes available at your `.replit.app` domain\n8. Default users (seeded before publishing) are ready for login\n\n### Performance Optimizations\n\n- Health check registered FIRST, before any imports or middleware\n- No blocking operations during startup\n- Database seeding is a separate manual process\n- Session store uses PostgreSQL (supports multiple instances)\n- Static assets are pre-built and optimized\n- Build process completes in ~23 seconds\n- Server starts instantly and responds to health checks in milliseconds\n\n---\n\n## [1.1.0] - 2025-10-22\n\n### Fixed\n\n#### Critical Deployment Issues\n- **Fixed server early exit bug**: Removed async IIFE wrapper that was causing the server to exit immediately after starting, preventing health checks from passing\n- **Optimized health check endpoint**: Moved health check logic to the very first middleware, before session processing, ensuring immediate response to deployment platform health checks\n- **Removed redundant /health endpoint**: Simplified to use only the root `/` endpoint for health checks\n- **Fixed process lifecycle**: Changed to Promise chain pattern that keeps the server running naturally without manual promise blocking\n\n#### Authentication & Security\n- **Fixed case-sensitive login bug**: Implemented case-insensitive username lookup in database queries using SQL LOWER() function\n  - Users can now login with \"zara\", \"ZARA\", or any case variation\n  - Prevents login failures due to username case mismatch\n- **Improved user experience**: Username authentication now accepts any case variation while maintaining security\n\n#### Performance & Stability\n- **Non-blocking database seeding**: Database seeding now runs asynchronously after server startup, preventing deployment timeouts\n- **Updated dependencies**: Updated browserslist database to remove outdated warnings\n- **Error handling**: Improved error handling to prevent server crashes on seeding failures\n\n### Changed\n\n#### Backend Architecture\n- **Health check implementation**: Root endpoint now checks for absence of cookies to identify health check requests\n- **Server initialization**: Simplified server startup process to prevent early exit and ensure stable deployments\n- **Session middleware**: Health checks now bypass session middleware for faster response times\n\n#### Database\n- **Storage implementation**: Using PostgreSQL via Drizzle ORM with DatabaseStorage\n- **Username queries**: All username lookups now use case-insensitive comparison\n\n---\n\n## [1.0.0] - Initial Release\n\n### Added\n\n#### Core Project Management\n- **Project Management System**: Create, update, delete, and view unlimited projects\n  - Project metadata including client name, project title, start date, and delivery date\n  - Full CRUD operations for projects\n  - Cascade deletion for related divisions and items\n- **Division Management**: Organize projects into divisions with custom ordering\n  - Create and manage divisions within projects\n  - Reorder divisions with drag-and-drop or manual ordering\n  - Each division contains multiple items\n- **Item Management**: Track individual items with detailed specifications\n  - Description, unit, quantity, rate fields\n  - Priority levels: High, Mid, Low\n  - Status tracking: Not Started, Purchased, In Installation Phase, Installed, Delivered\n  - Automatic total cost calculation (quantity × rate)\n\n#### Multi-Role Management System\n- **Four User Roles with RBAC**:\n  - **Principle**: Full administrative access to all features\n    - Create/update/delete all resources\n    - Manage users, employees, clients\n    - Full financial visibility\n    - Assign projects to team members\n  - **Employee**: Limited access to assigned tasks and personal data\n    - View assigned projects only\n    - Manage personal tasks\n    - View own salary and attendance records\n    - Update task status\n  - **Client**: Read-only access to assigned projects\n    - View assigned projects, divisions, and items\n    - View project progress and timelines\n    - View procurement (with cost limitations)\n    - View comments and financials\n    - Cannot modify project data\n  - **Procurement**: Specialized access for procurement management\n    - Create/update/delete procurement items\n    - View all projects\n    - Manage purchase tracking\n\n#### User & Employee Management\n- **User Management** (Principle only):\n  - Create user accounts with role assignment\n  - Update user information and roles\n  - Activate/deactivate user accounts\n  - Secure password hashing with bcrypt\n- **Employee Management**:\n  - Employee profiles with ID card, WhatsApp, address\n  - Joining date tracking\n  - Profile picture support\n  - Link employees to user accounts\n  - Principle can view all employees, employees can view only their own data\n\n#### Client Management\n- **Client Profiles**:\n  - Company information\n  - Contact details (phone, email, address)\n  - Link clients to user accounts\n  - Project assignment tracking\n\n#### Task Management\n- **Task System**:\n  - Task types: Design CAD, IFCs, 3D Rendering, Procurement, Site Visits\n  - Task statuses: Done, Undone, In Progress\n  - Assign tasks to employees\n  - Link tasks to projects\n  - Employees see only their assigned tasks\n  - Clients can view tasks for their projects\n\n#### Procurement Tracking\n- **Procurement Items**:\n  - Track items with project cost and execution cost\n  - Purchase status tracking\n  - Bill number and rental details\n  - Quantity and unit specifications\n  - Purchase date and purchaser tracking\n  - Client role sees project cost only (execution cost hidden)\n  - Principle and Procurement roles have full access\n\n#### Salary & Attendance\n- **Salary Management** (Principle only):\n  - Monthly salary tracking per employee\n  - Components: Basic salary, incentives, medical allowance\n  - Deductions: Tax, other deductions\n  - Net salary calculation\n  - Payment status and payment date tracking\n  - Employees can view their own salary history\n- **Attendance Tracking**:\n  - Daily attendance records\n  - Monthly attendance filtering\n  - Attendance date tracking\n  - Employees can view their own attendance\n\n#### Project Assignments\n- **Assignment System**:\n  - Assign projects to employees and clients\n  - Track assignment history\n  - Record who made the assignment\n  - Filter projects by user assignments\n  - Role-based project visibility\n\n#### Comments & Project Financials\n- **Comment System**:\n  - Add comments to projects\n  - Timestamp tracking\n  - Author information\n  - View comment history per project\n- **Project Financials**:\n  - Track project-level financial data\n  - Budget and cost management\n  - Client-specific financial visibility\n\n#### Real-time Analytics\n- **Project Summary Dashboard**:\n  - Total project cost calculation\n  - Priority-based cost breakdown (High, Mid, Low)\n  - Division-wise cost analysis\n  - Status-based item tracking\n  - Overall progress percentage\n  - Item and division counts\n- **Data Visualization**:\n  - Recharts integration for interactive charts\n  - Pie charts for cost distribution\n  - Bar charts for division breakdown\n  - Priority-based visualizations\n  - Status progress tracking\n\n#### Progress Tracking\n- **Weighted Progress System**:\n  - Status-based progress calculation:\n    - Not Started: 0%\n    - Purchased: 25%\n    - In Installation Phase: 50%\n    - Installed: 75%\n    - Delivered: 100%\n  - Division-wise progress bars\n  - Overall project progress percentage\n  - Real-time progress updates\n\n#### Export Functionality\n- **Three Professional Export Templates**:\n  1. **Standard Template**: \n     - Cyberpunk-themed dashboard (1920×1080)\n     - Gradient backgrounds with neon accents\n     - Summary statistics grid\n     - Interactive charts\n     - Custom fonts (Orbitron, Rajdhani, Fira Code)\n  2. **BOQ (Bill of Quantities)**:\n     - Clean, professional layout\n     - Division-wise item tables\n     - Detailed quantity and rate information\n     - Total cost calculations\n     - Print-ready format\n  3. **Progress Report**:\n     - Comprehensive project overview\n     - Client information section\n     - Project timeline (start date, delivery date)\n     - Overall progress visualization\n     - Division-wise progress bars\n     - Status breakdown\n     - Item completion statistics\n\n- **Multiple Export Formats**:\n  - **Excel (.xlsx)**: \n    - Separate sheets for Summary, Divisions, and Items\n    - Formatted columns with proper headers\n    - Currency formatting for PKR\n    - Created with ExcelJS library\n  - **PDF**:\n    - Multi-page support\n    - Professional layout\n    - Summary and division breakdown\n    - Generated with jsPDF\n  - **JPEG**:\n    - Client-side rendering with html2canvas\n    - High-quality 1920×1080 images\n    - Three template options\n\n#### Authentication & Security\n- **Secure Authentication**:\n  - Session-based authentication with express-session\n  - Bcrypt password hashing (10 salt rounds)\n  - HTTP-only session cookies\n  - 7-day session expiration\n  - PostgreSQL session store in production (connect-pg-simple)\n  - MemoryStore fallback for development\n  - Automatic session persistence across server restarts\n- **Role-Based Access Control (RBAC)**:\n  - Route-level access control with requireAuth middleware\n  - Role-based permissions with requireRole middleware\n  - Data isolation: users only see their assigned projects/data\n  - Secure password-free responses (passwords never sent to client)\n  - Active/inactive user status checking\n\n#### Cyberpunk-Inspired UI\n- **Visual Design**:\n  - Dark mode-first design\n  - Neon color palette (cyan #00d9ff, purple #7b2ff7)\n  - High-contrast interface\n  - Custom fonts: Orbitron (headings), Rajdhani (body), Fira Code (monospace)\n  - Gradient backgrounds and borders\n  - Glow effects and shadows\n- **UI Component System**:\n  - Radix UI primitives for accessibility\n  - shadcn/ui component library\n  - Tailwind CSS for styling\n  - Class Variance Authority for variants\n  - Responsive layouts\n  - Information-dense design\n\n#### Frontend Architecture\n- **Modern React Stack**:\n  - React 18 with TypeScript\n  - Vite for fast development and building\n  - Wouter for client-side routing\n  - TanStack React Query for server state management\n  - React Hook Form with Zod validation\n  - Framer Motion for animations\n- **Form Management**:\n  - shadcn Form components\n  - React Hook Form integration\n  - Zod schema validation\n  - Custom validation rules\n  - Error handling and display\n\n#### Backend Architecture\n- **Express.js Server**:\n  - TypeScript-based REST API\n  - Modular route organization\n  - Request/response logging\n  - Error handling middleware\n  - JSON body parsing\n- **Database Integration**:\n  - PostgreSQL via Neon Serverless\n  - Drizzle ORM for type-safe queries\n  - Schema-first design\n  - Migration support with drizzle-kit\n  - Connection pooling\n  - Environment-based configuration\n\n#### Data Model\n- **Comprehensive Schema**:\n  - Projects with metadata and relationships\n  - Divisions with ordering\n  - Items with priority and status\n  - Users with role-based access\n  - Employees with profile information\n  - Clients with company details\n  - Tasks with type and status\n  - Procurement items with cost tracking\n  - Salaries with detailed breakdowns\n  - Attendance records\n  - Project assignments\n  - Comments\n  - Project financials\n  - All tables use UUID primary keys\n  - Cascade deletion for data integrity\n  - Timestamp tracking (createdAt, updatedAt)\n\n#### Deployment Configuration\n- **Production-Ready Setup**:\n  - Environment-based configuration\n  - Session store with PostgreSQL\n  - Health check endpoints\n  - Non-blocking database seeding\n  - Automatic table creation\n  - Port configuration (default: 5000)\n  - Host binding (0.0.0.0 for public access)\n- **Default Users**:\n  - Principle: ZARA / saroshahsanto\n  - Procurement: procurement / procurement123\n\n---\n\n## Default Credentials\n\n**Principle User:**\n- Username: `ZARA` (case-insensitive: zara, Zara, etc.)\n- Password: `saroshahsanto`\n\n**Procurement User:**\n- Username: `procurement` (case-insensitive)\n- Password: `procurement123`\n\n**Security Notice:** Change default passwords after first login in production environments.\n\n---\n\n## Technical Stack\n\n### Frontend\n- React 18.3.1\n- TypeScript 5.6.3\n- Vite 5.4.20\n- TanStack React Query 5.60.5\n- React Hook Form 7.55.0\n- Zod 3.24.2\n- Wouter 3.3.5\n- Recharts 2.15.2\n- Radix UI components\n- Tailwind CSS 3.4.17\n- Framer Motion 11.13.1\n\n### Backend\n- Node.js with Express 4.21.2\n- TypeScript 5.6.3\n- PostgreSQL (Neon Serverless)\n- Drizzle ORM 0.39.1\n- bcrypt 6.0.0\n- express-session 1.18.1\n- connect-pg-simple 10.0.0\n\n### Export Libraries\n- ExcelJS 4.4.0\n- jsPDF 3.0.3\n- html2canvas 1.4.1\n\n---\n\n## Currency\n\nAll monetary values are handled in **Pakistani Rupees (PKR)**.\n\n---\n\n## Known Issues\n\nNone at this time. Application is stable and ready for production deployment after .replit port configuration fix.\n\n---\n\n## Support\n\nFor detailed system architecture and configuration, refer to `replit.md`.\n\nFor questions or issues, contact the ARKA Services development team.\n\n---\n\n**Website:** [https://arka.pk](https://arka.pk)\n","size_bytes":18654},"client/src/pages/principle-dashboard-dialogs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Project, User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\n// Assign Task Dialog Component\nexport function AssignTaskDialog({ \n  open, \n  onOpenChange, \n  projects \n}: { \n  open: boolean; \n  onOpenChange: (open: boolean) => void; \n  projects: Project[]; \n}) {\n  const { toast } = useToast();\n  const [selectedProject, setSelectedProject] = useState(\"\");\n  const [selectedEmployee, setSelectedEmployee] = useState(\"\");\n  const [taskType, setTaskType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [dueDate, setDueDate] = useState<Date | undefined>();\n  const [projectEmployees, setProjectEmployees] = useState<User[]>([]);\n\n  // Fetch employees assigned to the selected project\n  useEffect(() => {\n    if (!selectedProject) {\n      setProjectEmployees([]);\n      setSelectedEmployee(\"\");\n      return;\n    }\n\n    const fetchProjectEmployees = async () => {\n      try {\n        const assignmentsRes = await fetch(`/api/assignments?projectId=${selectedProject}`);\n        if (!assignmentsRes.ok) throw new Error(\"Failed to fetch assignments\");\n        const assignments = await assignmentsRes.json();\n        \n        const employeeIds = assignments.map((a: any) => a.userId);\n        \n        const usersRes = await fetch(\"/api/users\");\n        if (!usersRes.ok) throw new Error(\"Failed to fetch users\");\n        const allUsers = await usersRes.json();\n        \n        const employees = allUsers.filter((u: User) => \n          employeeIds.includes(u.id) && u.role === \"employee\"\n        );\n        \n        setProjectEmployees(employees);\n      } catch (error) {\n        console.error(\"Error fetching project employees:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch employees for this project\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    fetchProjectEmployees();\n  }, [selectedProject, toast]);\n\n  const assignTaskMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/tasks\", {\n        projectId: selectedProject,\n        employeeId: selectedEmployee,\n        taskType,\n        description,\n        status: \"Undone\",\n        dueDate: dueDate?.toISOString(),\n        assignedBy: \"\", // Will be set by backend from req.user\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({\n        title: \"Success\",\n        description: \"Task assigned successfully!\",\n      });\n      setSelectedProject(\"\");\n      setSelectedEmployee(\"\");\n      setTaskType(\"\");\n      setDescription(\"\");\n      setDueDate(undefined);\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAssign = () => {\n    if (!selectedProject || !selectedEmployee || !taskType) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    assignTaskMutation.mutate();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Assign Task to Employee</DialogTitle>\n          <DialogDescription>\n            Assign a task to an employee for a specific project\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Project *</label>\n            <Select value={selectedProject} onValueChange={setSelectedProject}>\n              <SelectTrigger data-testid=\"select-task-project\">\n                <SelectValue placeholder=\"Select a project\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projects.map(project => (\n                  <SelectItem key={project.id} value={project.id}>\n                    {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Employee *</label>\n            <Select \n              value={selectedEmployee} \n              onValueChange={setSelectedEmployee}\n              disabled={!selectedProject}\n            >\n              <SelectTrigger data-testid=\"select-task-employee\">\n                <SelectValue placeholder={selectedProject ? \"Select an employee\" : \"Select a project first\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {projectEmployees.length === 0 && selectedProject ? (\n                  <div className=\"p-2 text-sm text-muted-foreground text-center\">\n                    No employees assigned to this project\n                  </div>\n                ) : (\n                  projectEmployees.map(employee => (\n                    <SelectItem key={employee.id} value={employee.id}>\n                      {employee.fullName}\n                    </SelectItem>\n                  ))\n                )}\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Task Type *</label>\n            <Select value={taskType} onValueChange={setTaskType}>\n              <SelectTrigger data-testid=\"select-task-type\">\n                <SelectValue placeholder=\"Select task type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Design CAD\">Design CAD</SelectItem>\n                <SelectItem value=\"IFCs\">IFCs</SelectItem>\n                <SelectItem value=\"3D Rendering\">3D Rendering</SelectItem>\n                <SelectItem value=\"Procurement\">Procurement</SelectItem>\n                <SelectItem value=\"Site Visits\">Site Visits</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Description</label>\n            <Textarea \n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Enter task description\"\n              className=\"resize-none\"\n              data-testid=\"input-task-description\"\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Due Date</label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start text-left font-normal\"\n                  data-testid=\"button-task-due-date\"\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {dueDate ? format(dueDate, \"PPP\") : \"Pick a date\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\">\n                <Calendar\n                  mode=\"single\"\n                  selected={dueDate}\n                  onSelect={setDueDate}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-task\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleAssign}\n              disabled={assignTaskMutation.isPending}\n              data-testid=\"button-submit-task\"\n            >\n              {assignTaskMutation.isPending ? \"Assigning...\" : \"Assign Task\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Edit User Dialog Component\nexport function EditUserDialog({ \n  open, \n  onOpenChange, \n  user \n}: { \n  open: boolean; \n  onOpenChange: (open: boolean) => void; \n  user: User | null;\n}) {\n  const { toast } = useToast();\n\n  const userSchema = z.object({\n    username: z.string().min(3, \"Username must be at least 3 characters\"),\n    fullName: z.string().min(1, \"Full name is required\"),\n    password: z.string().min(6, \"Password must be at least 6 characters\").optional().or(z.literal(\"\")),\n    isActive: z.number(),\n  });\n\n  const form = useForm({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      username: \"\",\n      fullName: \"\",\n      password: \"\",\n      isActive: 1,\n    },\n  });\n\n  // Update form when user changes\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        username: user.username,\n        fullName: user.fullName,\n        password: \"\",\n        isActive: user.isActive,\n      });\n    }\n  }, [user, form]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!user) return;\n      const updates: any = {\n        username: data.username,\n        fullName: data.fullName,\n        isActive: data.isActive,\n      };\n      // Only include password if it's provided\n      if (data.password && data.password.length > 0) {\n        updates.password = data.password;\n      }\n      const res = await apiRequest(\"PATCH\", `/api/users/${user.id}`, updates);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully!\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    updateUserMutation.mutate(data);\n  };\n\n  if (!user) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Edit User Account</DialogTitle>\n          <DialogDescription>\n            Update user information and credentials for {user.fullName}\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"fullName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter full name\" {...field} data-testid=\"input-edit-fullname\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Username *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter username\" {...field} data-testid=\"input-edit-username\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password (leave blank to keep current)</FormLabel>\n                  <FormControl>\n                    <Input type=\"password\" placeholder=\"Enter new password\" {...field} data-testid=\"input-edit-password\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"isActive\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select \n                    value={field.value.toString()} \n                    onValueChange={(value) => field.onChange(parseInt(value))}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-edit-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"1\">Active</SelectItem>\n                      <SelectItem value=\"0\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex justify-end gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-edit-user\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateUserMutation.isPending}\n                data-testid=\"button-submit-edit-user\"\n              >\n                {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14385},"client/src/components/TaskProgressGraph.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from \"recharts\";\n\ninterface TaskStats {\n  month: string;\n  total: number;\n  done: number;\n  inProgress: number;\n  undone: number;\n  completionRate: number;\n}\n\ninterface TaskProgressGraphProps {\n  employeeId?: string;\n  showEmployeeFilter?: boolean;\n}\n\nexport function TaskProgressGraph({ employeeId, showEmployeeFilter = false }: TaskProgressGraphProps) {\n  const [selectedMonth, setSelectedMonth] = useState(() => format(new Date(), \"yyyy-MM\"));\n\n  // Generate last 6 months for the dropdown\n  const months = Array.from({ length: 6 }, (_, i) => {\n    const date = new Date();\n    date.setMonth(date.getMonth() - i);\n    return format(date, \"yyyy-MM\");\n  });\n\n  // Fetch task statistics for the selected month\n  const { data: stats } = useQuery<TaskStats>({\n    queryKey: [\"/api/tasks/stats/monthly\", selectedMonth, employeeId],\n    queryFn: async () => {\n      let url = `/api/tasks/stats/monthly?month=${selectedMonth}`;\n      if (employeeId) {\n        url += `&employeeId=${employeeId}`;\n      }\n      const res = await fetch(url);\n      if (!res.ok) throw new Error(\"Failed to fetch statistics\");\n      return res.json();\n    },\n  });\n\n  // Prepare data for the chart\n  const chartData = stats ? [\n    { name: \"Done\", value: stats.done, fill: \"hsl(var(--chart-1))\" },\n    { name: \"In Progress\", value: stats.inProgress, fill: \"hsl(var(--chart-2))\" },\n    { name: \"Pending\", value: stats.undone, fill: \"hsl(var(--chart-3))\" },\n  ] : [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between gap-4\">\n          <div>\n            <CardTitle>Task Progress Analytics</CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Monthly task completion tracking\n            </p>\n          </div>\n          <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-progress-month\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {months.map((month) => (\n                <SelectItem key={month} value={month}>\n                  {format(new Date(month + \"-01\"), \"MMMM yyyy\")}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {stats ? (\n          <div className=\"space-y-6\">\n            {/* Statistics Summary */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"p-4 rounded-lg bg-card border border-border\">\n                <p className=\"text-sm text-muted-foreground\">Total Tasks</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total\">\n                  {stats.total}\n                </p>\n              </div>\n              <div className=\"p-4 rounded-lg bg-card border border-border\">\n                <p className=\"text-sm text-muted-foreground\">Completed</p>\n                <p className=\"text-2xl font-bold text-green-500\" data-testid=\"stat-done\">\n                  {stats.done}\n                </p>\n              </div>\n              <div className=\"p-4 rounded-lg bg-card border border-border\">\n                <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                <p className=\"text-2xl font-bold text-yellow-500\" data-testid=\"stat-inprogress\">\n                  {stats.inProgress}\n                </p>\n              </div>\n              <div className=\"p-4 rounded-lg bg-card border border-border\">\n                <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                <p className=\"text-2xl font-bold text-blue-500\" data-testid=\"stat-completion\">\n                  {stats.completionRate}%\n                </p>\n              </div>\n            </div>\n\n            {/* Bar Chart */}\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n                  <XAxis \n                    dataKey=\"name\" \n                    stroke=\"hsl(var(--muted-foreground))\"\n                    style={{ fontSize: '12px' }}\n                  />\n                  <YAxis \n                    stroke=\"hsl(var(--muted-foreground))\"\n                    style={{ fontSize: '12px' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'hsl(var(--card))',\n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '6px',\n                      color: 'hsl(var(--foreground))'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      fontSize: '12px',\n                      color: 'hsl(var(--foreground))'\n                    }}\n                  />\n                  <Bar dataKey=\"value\" fill=\"hsl(var(--primary))\" radius={[8, 8, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Progress Indicator */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Overall Progress</span>\n                <span className=\"font-semibold text-foreground\">{stats.completionRate}%</span>\n              </div>\n              <div className=\"w-full bg-secondary rounded-full h-3 overflow-hidden\">\n                <div\n                  className=\"bg-primary h-full transition-all duration-300 rounded-full\"\n                  style={{ width: `${stats.completionRate}%` }}\n                  data-testid=\"progress-bar\"\n                />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center h-[300px] text-muted-foreground\">\n            Loading statistics...\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6474}},"version":2}